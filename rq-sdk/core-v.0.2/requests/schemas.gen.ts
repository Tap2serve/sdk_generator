// This file is auto-generated by @hey-api/openapi-ts

export const $PaymentTransactionRequestDto = {
    type: 'object',
    properties: {
        paymentTransactionUuid: {
            type: 'string',
            format: 'uuid'
        },
        planUuid: {
            type: 'string',
            format: 'uuid'
        },
        patientUuid: {
            type: 'string',
            format: 'uuid'
        },
        leadUuid: {
            type: 'string',
            format: 'uuid'
        },
        customerType: {
            type: 'string',
            enum: ['LEAD', 'PATIENT']
        },
        individualAmount: {
            type: 'number',
            format: 'double'
        },
        defaultBillingPeriod: {
            type: 'string',
            enum: ['ANNUAL', 'MONTH', 'QUARTERLY', 'SEMI_ANNUALLY']
        },
        startPlanDateTime: {
            type: 'string',
            format: 'date'
        },
        endPlanDateTime: {
            type: 'string',
            format: 'date'
        },
        paymentMethod: {
            type: 'string',
            enum: ['CREDIT_CARD', 'BANK']
        },
        paymentStatus: {
            type: 'string',
            enum: ['COMPLETED', 'FAILED', 'OVERDUE', 'DUE']
        },
        totalAmount: {
            type: 'number',
            format: 'double'
        }
    }
} as const;

export const $Response = {
    type: 'object',
    properties: {
        date: {
            type: 'string',
            format: 'date-time'
        },
        code: {
            type: 'string',
            enum: ['INTERNAL_ERROR', 'ACCESS_DENIED', 'BAD_REQUEST', 'NOT_FOUND', 'CREATED', 'UNSUPPORTED_MEDIA_TYPE', 'OK', 'SERVICE_UNAVAILABLE', 'ENTITY', 'DB_ERROR', 'IAM_ERROR', 'AWS_ERROR', 'USER_ARCHIVED', 'USER_UNARCHIVED', 'USER_NOT_EXIST', 'BILLING_INVOICE_STATEMENT', 'INVOICE_CREATED', 'INVOICE_UPDATED', 'INVOICE_DELETED', 'INVOICE_VIEWED', 'INVOICE_SENT', 'INVOICE_GENERATED', 'PAYMENT_RECEIVED', 'INVOICE_MARKED_PAID', 'INVOICE_DOWNLOADED', 'INVOICE_PRINTED', 'INVOICES_FETCHED', 'CONTACT_DIRECTORY_CREATED', 'CONTACT_DIRECTORY_UPDATED', 'CONTACT_DIRECTORY_DELETED', 'CONTACT_DIRECTORY_VIEWED', 'CONTACT_DIRECTORY_FETCHED', 'CONTACT_DIRECTORY_LIST_FETCHED', 'CONTACT_DIRECTORY_SEARCHED', 'CONTACT_DIRECTORY_SHARED', 'NOTE_CREATED', 'NOTE_UPDATED', 'NOTE_DELETED', 'NOTE_VIEWED', 'NOTE_FETCHED', 'NOTE_SHARED', 'NOTE_ARCHIVED', 'NOTE_UNARCHIVED', 'NOTE_PINNED', 'NOTE_UNPINNED', 'REFERRAL_CREATED', 'REFERRAL_UPDATED', 'REFERRAL_DELETED', 'REFERRAL_VIEWED', 'REFERRAL_FETCHED', 'REFERRAL_SENT', 'REFERRAL_RECEIVED', 'REFERRAL_APPROVED', 'REFERRAL_REJECTED', 'REFERRAL_CANCELLED', 'PROCEDURE_CODE_CREATED', 'PROCEDURE_CODE_UPDATED', 'PROCEDURE_CODE_DELETED', 'PROCEDURE_CODE_VIEWED', 'PROCEDURE_CODE_FETCHED', 'PROCEDURE_CODE_ENABLED', 'PROCEDURE_CODE_DISABLED', 'PROCEDURE_CODE_ARCHIVED', 'PROCEDURE_CODE_UNARCHIVED', 'INVALID_CREDENTIALS', 'LOGIN_FAILED', 'INVALID_REFRESH_TOKEN', 'LOGOUT_RESPONSE', 'LOGOUT_FAILED', 'SET_PASSWORD_RESPONSE', 'INVALID_PASSWORD_LINK', 'INVALID_PASSWORD', 'RESET_PASSWORD_FAILED', 'CHANGE_PASSWORD_RESPONSE', 'VERIFY_PASSWORD_LINK_RESPONSE', 'FORGOT_PASSWORD_RESPONSE', 'RESEND_INVITE_EMAIL_RESPONSE', 'USER_CREATED', 'USER_FETCHED', 'USER_NOT_FOUND', 'USER_EMAIL_NOT_FOUND', 'UPDATE_USER_PROFILE_RESPONSE', 'USER_ENABLED', 'USER_DISABLED', 'DUPLICATE_EMAIL_ERROR', 'CHANGE_AVATAR_RESPONSE', 'USER_EMAIL_REQUIRED', 'USER_EMAIL_UPDATE_ERROR', 'INVALID_USER_ROLE', 'USER_EMAIL_VERIFIED', 'SIGNED_UP', 'USER_INACTIVE', 'EMPTY_EMAIL', 'MAIL_SENT_SUCCESSFULLY', 'PROVIDER_GROUP_CREATED', 'PROVIDER_GROUP_UPDATED', 'FAILED_UPDATE_PROVIDER_GROUP', 'PROVIDER_GROUP_ENABLED', 'PROVIDER_GROUP_DISABLED', 'PROVIDER_GROUP_ARCHIVED', 'PROVIDER_GROUP_UNARCHIVED', 'LOCATION_CREATED', 'LOCATION_UPDATED', 'LOCATION_DELETED', 'LOCATION_FETCHED', 'LOCATION_NOT_FOUND', 'LOCATION_ENABLED', 'LOCATION_DISABLED', 'LOCATION_ARCHIVED', 'LOCATION_UNARCHIVED', 'DEPARTMENT_CREATED', 'DEPARTMENT_UPDATED', 'DEPARTMENT_ENABLED', 'DEPARTMENT_DISABLED', 'DEPARTMENT_ARCHIVED', 'DEPARTMENT_UNARCHIVED', 'PROVIDER_CREATED', 'PROVIDER_UPDATED', 'PROVIDER_ENABLED', 'PROVIDER_DISABLED', 'PROVIDER_ARCHIVED', 'PROVIDER_FETCHED', 'PROVIDER_STATUS_CHANGED', 'PROVIDER_UNARCHIVED', 'NPI_ALREADY_EXIST', 'PATIENT_CREATED', 'PATIENT_UPDATE', 'PATIENT_REGISTER', 'PATIENT_DELETED', 'PATIENT_FOUND', 'PATIENT_PLAN_DETAIL', 'PATIENT_MEMBERSHIP', 'PATIENT_STATUS_UPDATED', 'PATIENT_ARCHIVE_STATUS_UPDATED', 'PATIENT_UNARCHIVE_STATUS_UPDATED', 'PATIENT_ENABLE_DISABLE_RESPONSE', 'FAILED_PATIENT_UPDATE', 'PATIENT_NOT_FOUND', 'USER_MRN_UPDATE_ERROR', 'PATIENT_DATA_FETCHED', 'PATIENT_DOCUMENT_REMOVED', 'UPLOAD_DOC_INVALID_ERROR', 'FAILED_PATIENT_STATUS_UPDATE', 'PATIENT_ARCHIVE', 'FAILED_PATIENT_ARCHIVE', 'INVALID_BIRTHDATE', 'FAILED_UPDATE_PATIENT_INSURANCE', 'ADDED_TO_WAITING_LIST', 'PATIENT_DRUGINTOLERANCE_CREATED', 'PATIENT_DRUGINTOLERANCE_FETCHED', 'PATIENT_DRUGINTOLERANCE_UPDATED', 'PATIENT_DRUGINTOLERANCE_DELETED', 'ICD_CODE_CREATED', 'ICD_CODE_FETCHED', 'ICD_CODE_DISABLED', 'PHARMACY_FETCHED', 'PHARMACY_CREATED', 'PHARMACY_UPDATED', 'PHARMACY_DISABLED', 'TENANT_CONFIGURATION_CREATED', 'TENANT_CONFIGURATION_UPDATED', 'FEE_AMOUNT_ADDED', 'FEE_AMOUNT_UPDATED', 'FEE_AMOUNT_STATUS_CHANGED', 'FEE_AMOUNT_ALREADY_EXISTS', 'FEE_AMOUNT_NOT_FOUND', 'FEE_DELETED', 'INVALID_MEDICAL_CODE', 'PATIENT_ADDED', 'PATIENT_ARCHIVED', 'PATIENT_UNARCHIVED', 'PATIENT_ENABLED', 'PATIENT_DISABLED', 'LEAD_ADDED', 'LEAD_UPDATED', 'LEAD_DELETED', 'LEAD_FETCHED', 'PLAN_ADDED', 'PLAN_UPDATED', 'PLAN_DELETED', 'PLAN_FETCHED', 'INSURANCEPAYER_NOT_FOUND', 'INSURANCE_POLICY_NOT_FOUND', 'TOO_MANY_INSURANCES', 'INSURANCE_NOT_FOUND', 'SECONDARY_INSURANCE_NOT_FOUND', 'INSURANCETYPE_UPDATED', 'CANNOT_UPDATE_INSURANCETYPE', 'PATIENT_INSURANCE_UPDATE', 'SECONDARY_INSURANCE_REMOVED', 'DUPLICATE_INSURANCE_ERROR', 'ELIGIBILITY_NOT_ALLOWED', 'INSURANCE_ADDED', 'INSURANCE_UPDATED', 'INSURANCE_DELETED', 'INSURANCE_FETCHED', 'INTAKE_FORM_ADDED', 'INTAKE_FORM_UPDATED', 'PATIENT_DOCUMENT_UPLOADED', 'REASON_IS_MANDATORY', 'CHARGEABLE_IS_MANDATORY', 'INTAKE_NEEDED', 'CONSENT_FORM_FOUND', 'ADDED_AVAILABILITY', 'CONSULT_TIME_CONFLICT', 'BOOKED_APPOINTMENT_SLOT', 'AVAILABILITY_NOT_FOUND', 'DAY_SLOT_NOT_FOUND', 'SLOT_NOT_FOUND', 'INVALID_TIME_DURATION', 'PAST_START_TIME', 'SLOT_ALREADY_BOOKED', 'APPOINTMENT_CREATED', 'APPOINTMENT_DATA_FETCHED', 'APPOINTMENT_NOT_FOUND', 'APPOINTMENT_UPDATED', 'APPOINTMENT_CONFIRMED', 'NEW_APPT_ALREADY_EXIST', 'NEW_APPT_NOT_EXIST', 'EXISTING_APPOINTMENT_NOT_FOUND', 'RESCHEDULE_NOT_ALLOWED', 'APPOINTMENT_RESCHEDULED', 'APPOINTMENT_RESCHEDULED_WITH_CHARGE', 'CHECKED_IN_NOT_ENABLED', 'FOLLOW_UP_APPT_ERROR', 'APPT_NOT_COMPLETE_ERROR', 'EXISTING_APPT_STATUS_ERROR', 'APPOINTMENT_FEE_SET', 'APPOINTMENT_FEE_ALREADY_PAID', 'NO_SHOW_NOT_ALLOWED', 'BILL_AMOUNT', 'SEND_MESSAGE_RESPONSE', 'EMAIL_SUBJECT_MANDATORY', 'PATIENT_PHONE_NOT_PRESENT', 'ENCOUNTER_ALREADY_EXIST', 'ENCOUNTER_ARCHIVED', 'ENCOUNTER_UPDATED', 'PATIENT_SCREENER_ADDED', 'PATIENTSCREENER_NOT_FOUND', 'PATIENT_SCORE_ADDED', 'PATIENT_SCREENER_ANSWER_UPDATED', 'INVALID_SCREENER_TYPE', 'INVALID_ANSWER_OPTION', 'INCOMPLETE_SCREENER_ANSWERS', 'PATIENT_SCREENER_SCORE_UPDATED', 'PATIENT_SCREENER_DATA_FETCHED', 'PAYMENT_CARD_ADDED', 'PAYMENT_CARD_ALREADY_EXISTS', 'PAYMENT_CHARGED', 'FINE_CHARGED', 'PAYMENT_CARD_NOT_FOUND', 'PAYMENT_ALREADY_DONE', 'PAYMENT_CARD_NOT_EXISTS', 'PAYMENT_AMOUNT_NOT_SET', 'PAYMENT_BILL_STATUS_ERROR', 'INVALID_CARD_EXPIRATION', 'NO_NOTIFICATIONS', 'NOTIFICATION_MARKED_AS_SEEN', 'NOTIFICATIONS_COUNT', 'PATIENT_CONSENT_FORMS_ADDED', 'TEXTMACRO_SHORTCUT_EXISTS', 'TEXTMACRO_ADDED', 'TEXTMACRO_DATA_FETCHED', 'TEXTMACRO_UPDATED', 'FAILED_UPDATE_TEXT_MACRO', 'FAILED_TEXTMACRO_ARCHIVE', 'TEXTMACRO_ARCHIVE', 'TASK_ADDED', 'TASK_DATA_FETCHED', 'TASK_UPDATED', 'TasK_ENABLED', 'TasK_DISABLED', 'TasK_ARCHIVED', 'TasK_UNARCHIVED', 'TASK_ASSIGNED', 'INVALID_TASK_STATUS', 'INVALID_DUEDATE', 'FINE_CHARGED_APPOINTMENT', 'APPOINTMENT_FINE', 'CANNOT_CHARGE_FINE', 'PAYMENT_SUCCESSFUL', 'VITAL_ADDED', 'VITAL_UPDATED', 'VITAL_DATA_FETCHED', 'VITAL_NOT_FOUND', 'FAILED_VITAL_UPDATED', 'EMITTED_SUCCESSFULLY', 'WEBHOOK_SUCCESSFUL', 'BILL_UPDATED', 'CLAIM_ADDED', 'BOOK_APPOINTMENT_ERROR', 'CANCEL_APPOINTMENT_ERROR', 'NOT_IMPLEMENTED', 'COMMENT_ADDED_SUCCESSFULLY', 'COMMENT_UPDATED_SUCCESSFULLY', 'COMMENT_DELETED_SUCCESSFULLY', 'MEDICAL_CODE_ADDED_SUCCESSFULLY', 'MEDICAL_CODE_UPDATED_SUCCESSFULLY', 'PROVIDER_REVIEW_ADDED_SUCCESSFULLY', 'PROVIDER_REVIEW_STATUS_UPDATED_SUCCESSFULLY', 'CHECK_IN_STATUS', 'REFILL_RX_ADDED', 'REFILL_RX_UPDATED', 'ROI_ADDED', 'ROI_UPDATED', 'ROI_STATUS_UPDATED', 'ROI_NOT_FOUND', 'CONSENT_FORM_TEMPLATE_ADDED', 'CONSENT_FORM_TEMPLATE_UPDATED', 'CONSENT_FORM_TEMPLATE_STATUS', 'INTERNAL_SERVER_ERROR', 'FILE_UPLOADED', 'EMPTY_FILE', 'MEDICAL_CODES_CREATED', 'MEDICAL_CODES_UPDATED', 'MEDICAL_CODE_ENABLED', 'MEDICAL_CODE_DISABLED', 'MEDICAL_CODE_ARCHIVED', 'MEDICAL_CODE_UNARCHIVED', 'PATIENT_DIAGNOSIS_CREATED', 'PATIENT_DIAGNOSIS_UPDATED', 'PATIENT_DIAGNOSIS_ENABLED', 'PATIENT_DIAGNOSIS_DISABLED', 'PATIENT_DIAGNOSIS_ARCHIVED', 'PATIENT_DIAGNOSIS_UNARCHIVED', 'PATIENT_DIAGNOSIS_FETCHED', 'PATIENT_ALLERGY_CREATED', 'PATIENT_ALLERGY_FETCHED', 'PATIENT_ALLERGY_UPDATED', 'PATIENT_ALLERGY_ENABLED', 'PATIENT_ALLERGY_DISABLED', 'PATIENT_ALLERGY_ARCHIVED', 'PATIENT_ALLERGY_UNARCHIVED', 'PATIENT_ALLERGY_DELETED', 'PATIENT_VACCINE_CREATED', 'PATIENT_VACCINE_UPDATED', 'PATIENT_VACCINE_ENABLED', 'PATIENT_VACCINE_DISABLED', 'PATIENT_VACCINE_ARCHIVED', 'PATIENT_VACCINE_UNARCHIVED', 'PATIENT_VACCINE_DELETED', 'PATIENT_VACCINE_FETCHED', 'VACCINE_CREATED', 'VACCINE_UPDATED', 'VACCINE_FETCHED', 'VACCINE_DELETED', 'PATIENT_VITAL_CREATED', 'PATIENT_VITAL_UPDATED', 'STICKY_NOTE_CREATED', 'STICKY_NOTE_UPDATED', 'STICKY_NOTE_ENABLED', 'STICKY_NOTE_DISABLED', 'STICKY_NOTE_ARCHIVED', 'STICKY_NOTE_UNARCHIVED', 'PATIENT_MEDICATION_CREATED', 'PATIENT_MEDICATION_FETCHED', 'PATIENT_MEDICATION_DELETED', 'PATIENT_MEDICATION_UPDATED', 'PATIENT_MEDICATION_ENABLED', 'PATIENT_MEDICATION_DISABLED', 'PATIENT_MEDICATION_ARCHIVED', 'PATIENT_MEDICATION_UNARCHIVED', 'PATIENT_MEDICAL_HISTORY_CREATED', 'PATIENT_MEDICAL_HISTORY_UPDATED', 'PATIENT_MEDICAL_HISTORY_ENABLED', 'PATIENT_MEDICAL_HISTORY_DISABLED', 'PATIENT_MEDICAL_HISTORY_ARCHIVED', 'PATIENT_MEDICAL_HISTORY_UNARCHIVED', 'PATIENT_MEDICAL_HISTORY_FETCHED', 'PATIENT_SURGICAL_HISTORY_CREATED', 'PATIENT_SURGICAL_HISTORY_UPDATED', 'PATIENT_SURGICAL_HISTORY_ENABLED', 'PATIENT_SURGICAL_HISTORY_DISABLED', 'PATIENT_SURGICAL_HISTORY_ARCHIVED', 'PATIENT_SURGICAL_HISTORY_UNARCHIVED', 'PATIENT_SURGICAL_HISTORY_FETCHED', 'PATIENT_FAMILY_HISTORY_CREATED', 'PATIENT_FAMILY_HISTORY_UPDATED', 'PATIENT_FAMILY_HISTORY_ENABLED', 'PATIENT_FAMILY_HISTORY_DISABLED', 'PATIENT_FAMILY_HISTORY_ARCHIVED', 'PATIENT_FAMILY_HISTORY_UNARCHIVED', 'PATIENT_FAMILY_HISTORY_FETCHED', 'PATIENT_LINK_PHARMACY_CREATED', 'PATIENT_LINK_PHARMACY_UPDATED', 'PATIENT_SOCIAL_HISTORY_CREATED', 'PATIENT_SOCIAL_HISTORY_UPDATED', 'PATIENT_SOCIAL_HISTORY_ENABLED', 'PATIENT_SOCIAL_HISTORY_DISABLED', 'PATIENT_SOCIAL_HISTORY_ARCHIVED', 'PATIENT_SOCIAL_HISTORY_UNARCHIVED', 'DOCUMENT_CREATED', 'DOCUMENT_UPDATED', 'DOCUMENT_DELETED', 'DOCUMENT_VIEWED', 'DOCUMENT_FETCHED', 'DOCUMENT_TYPE_CREATED', 'DOCUMENT_TYPE_UPDATED', 'DOCUMENT_TYPE_DELETED', 'DOCUMENT_TYPE_VIEWED', 'DOCUMENT_TYPE_FETCHED', 'DOCUMENT_TYPE_ENABLED', 'DOCUMENT_TYPE_DISABLED', 'DOCUMENT_TYPE_ARCHIVED', 'DOCUMENT_TYPE_UNARCHIVED', 'DOCUMENT_TAG_CREATED', 'DOCUMENT_TAG_UPDATED', 'DOCUMENT_TAG_ENABLED', 'DOCUMENT_TAG_DISABLED', 'DOCUMENT_TAG_ARCHIVED', 'DOCUMENT_TAG_UNARCHIVED', 'IMAGING_ORDER_CREATED', 'IMAGING_ORDER_UPDATED', 'IMAGING_ORDER_DELETED', 'IMAGING_ORDER_VIEWED', 'IMAGING_ORDER_FETCHED', 'IMAGING_ORDER_COMPLETED', 'IMAGING_ORDER_CANCELLED', 'IMAGING_ORDER_APPROVED', 'IMAGING_ORDER_REJECTED', 'IMAGING_ORDER_SCHEDULED', 'IMAGING_RESULT_CREATED', 'IMAGING_RESULT_UPDATED', 'IMAGING_RESULT_DELETED', 'IMAGING_RESULT_VIEWED', 'IMAGING_RESULT_FETCHED', 'IMAGING_RESULT_APPROVED', 'IMAGING_RESULT_REJECTED', 'IMAGING_RESULT_REVIEWED', 'IMAGING_RESULT_ARCHIVED', 'IMAGING_RESULT_UNARCHIVED', 'PATIENT_LAB_ORDER_CREATED', 'PATIENT_LAB_ORDER_UPDATED', 'PATIENT_LAB_ORDER_NOT_FOUND', 'PATIENT_LAB_ORDER_ENABLED', 'PATIENT_LAB_ORDER_DISABLED', 'PATIENT_LAB_ORDER_ARCHIVED', 'PATIENT_LAB_ORDER_UNARCHIVED', 'CLINICAL_NOTE_CREATED', 'CLINICAL_NOTE_UPDATED', 'CLINICAL_NOTE_NOT_FOUND', 'CLINICAL_NOTE_ENABLED', 'CLINICAL_NOTE_DISABLED', 'CLINICAL_NOTE_ARCHIVED', 'CLINICAL_NOTE_UNARCHIVED', 'LOCATION_GROUP_ADDED', 'LOCATION_GROUP_UPDATED', 'LOCATION_GROUP_DELETED', 'LOCATION_GROUP_FETCHED', 'USER_DOCUMENT_UPLOAD', 'ROLE_ADDED', 'PRIVILEGE_NOT_FOUND', 'ROLE_UPDATED', 'ROLE_NOT_FOUND', 'CUSTOM_FORM_CREATED', 'CUSTOM_FORM_STATUS_UPDATED', 'CUSTOM_FORM_UPDATED', 'CUSTOM_FORM_ENABLED', 'CUSTOM_FORM_DISABLED', 'CUSTOM_FORM_ARCHIVED', 'CUSTOM_FORM_UNARCHIVED', 'CUSTOM_FORM_RESTORED', 'CUSTOM_FORM_COPY', 'CUSTOM_FORM_TEMPLATE_CREATED', 'CUSTOM_FORM_TEMPLATE_STATUS_UPDATED', 'CUSTOM_FORM_TEMPLATE_UPDATED', 'CUSTOM_FORM_TEMPLATE_ENABLED', 'CUSTOM_FORM_TEMPLATE_DISABLED', 'CUSTOM_FORM_TEMPLATE_ARCHIVED', 'CUSTOM_FORM_TEMPLATE_RESTORED', 'MICROS_FORM_CREATED', 'MICROS_FORM_UPDATED', 'MICROS_FORM_STATUS_UPDATED', 'MICROS_FORM_ARCHIVE_STATUS_UPDATED', 'VISIT_NOTE_FORM_CREATED', 'VISIT_NOTE_FORM_UPDATED', 'VISIT_NOTE_FORM_STATUS_UPDATED', 'VISIT_NOTE_FORM_ARCHIVE_STATUS_UPDATED', 'REVIEW_OF_SYSTEM_FORM_CREATED', 'REVIEW_OF_SYSTEM_FORM_UPDATED', 'REVIEW_OF_SYSTEM_FORM_STATUS_UPDATED', 'REVIEW_OF_SYSTEM_FORM_ARCHIVE_STATUS_UPDATED', 'CUSTOM_QUESTIONNAIRE_FORM_CREATED', 'CUSTOM_QUESTIONNAIRE_FORM_UPDATED', 'CUSTOM_QUESTIONNAIRE_FORM_STATUS_UPDATED', 'CUSTOM_QUESTIONNAIRE_FORM_ARCHIVE_STATUS_UPDATED', 'CAREPLAN_FORM_CREATED', 'CAREPLAN_FORM_UPDATED', 'CAREPLAN_FORM_STATUS_UPDATED', 'CAREPLAN_FORM_ARCHIVE_STATUS_UPDATED', 'ANNOTABLE_IMAGE_FORM_CREATED', 'ANNOTABLE_IMAGE_FORM_UPDATED', 'ANNOTABLE_IMAGE_FORM_STATUS_UPDATED', 'ANNOTABLE_IMAGE_FORM_ARCHIVE_STATUS_UPDATED', 'ORDER_SET_FORM_CREATED', 'ORDER_SET_FORM_UPDATED', 'ORDER_SET_FORM_STATUS_UPDATED', 'ORDER_SET_FORM_ARCHIVE_STATUS_UPDATED', 'PHYSICAL_EXAM_FORM_CREATED', 'PHYSICAL_EXAM_FORM_UPDATED', 'PHYSICAL_EXAM_FORM_STATUS_UPDATED', 'PHYSICAL_EXAM_FORM_ARCHIVE_STATUS_UPDATED', 'CHECK_CONSULT_TIME', 'PATIENT_FLAG_CREATED', 'PATIENT_FLAG_FETCHED', 'PATIENT_FLAG_UPDATED', 'PATIENT_FLAG_DELETED', 'ICD_CODE_ADDED', 'CPT_CODE_ADDED', 'HCPCS_CODE_ADDED', 'LOINC_CODE_ADDED', 'ICD_CODE_UPDATED', 'CPT_CODE_UPDATED', 'HCPCS_CODE_UPDATED', 'LOINC_CODE_UPDATED', 'INVOICE_SETTING_CREATED', 'INVOICE_SETTING_UPDATED', 'INVOICE_SETTING_FETCHED', 'INVOICE_SETTING_DELETED', 'STUDY_ORDER_FETCHED', 'DOCUMENT_UPLOADED', 'IMAGE_UPLOADED', 'AUDIT_HISTORY_FETCHED', 'PAYMENT_TRANSACTION_CREATED', 'PAYMENT_TRANSACTION_UPDATED', 'PAYMENT_TRANSACTION_DELETED', 'PAYMENT_TRANSACTION_FETCHED']
        },
        message: {
            type: 'string'
        },
        data: {
            type: 'object'
        },
        errors: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        path: {
            type: 'string'
        },
        requestId: {
            type: 'string'
        },
        version: {
            type: 'string'
        }
    }
} as const;

export const $AddressDto = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        line1: {
            type: 'string'
        },
        line2: {
            type: 'string'
        },
        city: {
            type: 'string'
        },
        state: {
            type: 'string'
        },
        country: {
            type: 'string'
        },
        zipcode: {
            pattern: '^(?:\\d{5}|\\d{9})$',
            type: 'string'
        }
    }
} as const;

export const $ProviderRequestDto = {
    required: ['addressDto', 'bio', 'email', 'firstName', 'lastName', 'npi', 'phoneNumber'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        phoneNumber: {
            pattern: '^\\+?\\d{10,13}$',
            type: 'string'
        },
        phoneType: {
            type: 'string',
            enum: ['MOBILE', 'LANDLINE']
        },
        npi: {
            type: 'string'
        },
        notHaveNpi: {
            type: 'boolean'
        },
        longitude: {
            type: 'string'
        },
        latitude: {
            type: 'string'
        },
        gender: {
            type: 'string',
            enum: ['MALE', 'FEMALE', 'OTHER']
        },
        status: {
            type: 'boolean'
        },
        bio: {
            type: 'string'
        },
        distanceInMiles: {
            type: 'string'
        },
        email: {
            pattern: '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$',
            type: 'string'
        },
        avatar: {
            type: 'string'
        },
        treatAgeFrom: {
            type: 'integer',
            format: 'int32'
        },
        treatAgeTo: {
            type: 'integer',
            format: 'int32'
        },
        addressDto: {
            '$ref': '#/components/schemas/AddressDto'
        },
        acceptingEnrollmentFrom: {
            type: 'string',
            enum: ['RETAIL', 'EMPLOYER']
        },
        specialitiesUuid: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        specialityList: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SpecialityDto'
            }
        },
        locationUuids: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        education: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        locationNames: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $SpecialityDto = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        active: {
            type: 'boolean'
        }
    }
} as const;

export const $PlanDto = {
    type: 'object',
    properties: {
        planUuid: {
            type: 'string',
            format: 'uuid'
        },
        planName: {
            type: 'string'
        },
        planType: {
            type: 'string',
            enum: ['RETAIL', 'EMPLOYER']
        },
        billingDate: {
            type: 'string',
            format: 'date'
        },
        copied: {
            type: 'boolean'
        },
        copiedFromPlanDetailUuid: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const $AdvancePaymentOptions = {
    type: 'object',
    properties: {
        advancePaymentOptionUuid: {
            type: 'string',
            format: 'uuid'
        },
        billingAtEndOfBillingCycle: {
            type: 'boolean'
        },
        defaultBillingPeriod: {
            type: 'string',
            enum: ['ANNUAL', 'MONTH', 'QUARTERLY', 'SEMI_ANNUALLY']
        },
        minimumInitialEnrollmentPeriod: {
            type: 'boolean'
        },
        numberOfMonths: {
            type: 'integer',
            format: 'int32'
        },
        invoiceDetailMemberShipName: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        monthly: {
            type: 'boolean'
        },
        quarterly: {
            type: 'boolean'
        },
        semiAnnually: {
            type: 'boolean'
        },
        annually: {
            type: 'boolean'
        },
        monthlyDefaultDiscountOrSurcharge: {
            type: 'number',
            format: 'double'
        },
        quarterlyDefaultDiscountOrSurcharge: {
            type: 'number',
            format: 'double'
        },
        semiAnnuallyDefaultDiscountOrSurcharge: {
            type: 'number',
            format: 'double'
        },
        annuallyDefaultDiscountOrSurcharge: {
            type: 'number',
            format: 'double'
        }
    }
} as const;

export const $AdvancePricingRuleDto = {
    type: 'object',
    properties: {
        advancePricingRuleUuid: {
            type: 'string',
            format: 'uuid'
        },
        contactExpiration: {
            type: 'boolean'
        },
        sendRenewalBehaviour: {
            type: 'boolean'
        },
        contractDuration: {
            type: 'integer',
            format: 'int32'
        },
        renewalEmailNotificationTime: {
            type: 'integer',
            format: 'int32'
        },
        contractEndBehaviour: {
            type: 'string',
            enum: ['TERMINATE', 'AUTO_RENEW']
        },
        planUuid: {
            type: 'string',
            format: 'uuid'
        },
        planName: {
            type: 'string'
        },
        effectiveTime: {
            type: 'string',
            enum: ['PERIODS_OF_MONTHS', 'DATE']
        },
        effectiveDate: {
            type: 'string',
            format: 'date'
        },
        specialRateList: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SpecialRateDto'
            }
        }
    }
} as const;

export const $BasicPlanDetails = {
    type: 'object',
    properties: {
        planUuid: {
            type: 'string',
            format: 'uuid'
        },
        planName: {
            type: 'string'
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        planStatus: {
            type: 'string',
            enum: ['ACTIVE', 'UPCOMING', 'EXPIRED']
        },
        planType: {
            type: 'string',
            enum: ['RETAIL', 'EMPLOYER']
        }
    }
} as const;

export const $IndividualMemberShipRateDto = {
    type: 'object',
    properties: {
        individualMemberShipRateUuid: {
            type: 'string',
            format: 'uuid'
        },
        specialRateAmountUuid: {
            type: 'string',
            format: 'uuid'
        },
        defaultBillingPeriod: {
            type: 'string',
            enum: ['ANNUAL', 'MONTH', 'QUARTERLY', 'SEMI_ANNUALLY']
        },
        amount: {
            type: 'number',
            format: 'double'
        }
    }
} as const;

export const $IndividualMembershipFeeDto = {
    type: 'object',
    properties: {
        individualMembershipFeeUuid: {
            type: 'string',
            format: 'uuid'
        },
        fromAge: {
            type: 'integer',
            format: 'int32'
        },
        relationShip: {
            type: 'string',
            enum: ['ALL', 'SELF', 'SPOUSE', 'SIBLING', 'MOTHER', 'FATHER', 'GUARDIAN', 'PARENT', 'CHILDREN', 'GRANDPARENT', 'GRANDCHILDREN', 'FRIEND', 'PARTNER', 'OTHER']
        },
        toAge: {
            type: 'integer',
            format: 'int32'
        },
        rates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IndividualMemberShipRateDto'
            }
        }
    }
} as const;

export const $PlanDetailsDto = {
    type: 'object',
    properties: {
        planUuid: {
            type: 'string',
            format: 'uuid'
        },
        basicPlanDetails: {
            '$ref': '#/components/schemas/BasicPlanDetails'
        },
        registrationFee: {
            '$ref': '#/components/schemas/RegistrationFeeDto'
        },
        advancePaymentOptions: {
            '$ref': '#/components/schemas/AdvancePaymentOptions'
        },
        individualMembershipFee: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IndividualMembershipFeeDto'
            }
        },
        advancePricingRuleDto: {
            '$ref': '#/components/schemas/AdvancePricingRuleDto'
        }
    }
} as const;

export const $RegistrationFeeDto = {
    type: 'object',
    properties: {
        registrationFeeUuid: {
            type: 'string',
            format: 'uuid'
        },
        individualMembershipFee: {
            type: 'boolean'
        },
        amount: {
            type: 'number',
            format: 'double'
        }
    }
} as const;

export const $SpecialRateDto = {
    type: 'object',
    properties: {
        specialRateUuid: {
            type: 'string',
            format: 'uuid'
        },
        specialRateName: {
            type: 'string'
        },
        relationShip: {
            type: 'string',
            enum: ['ALL', 'SELF', 'SPOUSE', 'SIBLING', 'MOTHER', 'FATHER', 'GUARDIAN', 'PARENT', 'CHILDREN', 'GRANDPARENT', 'GRANDCHILDREN', 'FRIEND', 'PARTNER', 'OTHER']
        },
        specialRates: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IndividualMemberShipRateDto'
            }
        }
    }
} as const;

export const $EmergencyContactDto = {
    type: 'object',
    properties: {
        emergencyContactUuid: {
            type: 'string',
            format: 'uuid'
        },
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        phoneNumber: {
            type: 'string'
        },
        phoneType: {
            type: 'string',
            enum: ['MOBILE', 'LANDLINE']
        },
        email: {
            type: 'string'
        },
        relationShip: {
            type: 'string',
            enum: ['ALL', 'SELF', 'SPOUSE', 'SIBLING', 'MOTHER', 'FATHER', 'GUARDIAN', 'PARENT', 'CHILDREN', 'GRANDPARENT', 'GRANDCHILDREN', 'FRIEND', 'PARTNER', 'OTHER']
        }
    }
} as const;

export const $PatientRequestDto = {
    required: ['dateOfBirth', 'firstName', 'lastName', 'phoneNumber', 'preferredLocation', 'sex'],
    type: 'object',
    properties: {
        patientUuid: {
            type: 'string',
            format: 'uuid'
        },
        leadUuid: {
            type: 'string',
            format: 'uuid'
        },
        planUuid: {
            type: 'string',
            format: 'uuid'
        },
        primaryProviderUuid: {
            type: 'string',
            format: 'uuid'
        },
        employerUuid: {
            type: 'string',
            format: 'uuid'
        },
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        dateOfBirth: {
            type: 'string',
            format: 'date-time'
        },
        sex: {
            type: 'string',
            enum: ['MALE', 'FEMALE', 'OTHER']
        },
        preferredLocation: {
            type: 'string',
            enum: ['ALABAMA', 'ALASKA', 'ARIZONA', 'ARKANSAS', 'CALIFORNIA', 'COLORADO', 'CONNECTICUT', 'DELAWARE', 'FLORIDA', 'GEORGIA', 'HAWAII', 'IDAHO', 'ILLINOIS', 'INDIANA', 'IOWA', 'KANSAS', 'KENTUCKY', 'LOUISIANA', 'MAINE', 'MARYLAND', 'MASSACHUSETTS', 'MICHIGAN', 'MINNESOTA', 'MISSISSIPPI', 'MISSOURI', 'MONTANA', 'NEBRASKA', 'NEVADA', 'NEW_HAMPSHIRE', 'NEW_JERSEY', 'NEW_MEXICO', 'NEW_YORK', 'NORTH_CAROLINA', 'NORTH_DAKOTA', 'OHIO', 'OKLAHOMA', 'OREGON', 'PENNSYLVANIA', 'RHODE_ISLAND', 'SOUTH_CAROLINA', 'SOUTH_DAKOTA', 'TENNESSEE', 'TEXAS', 'UTAH', 'VERMONT', 'VIRGINIA', 'WASHINGTON', 'WEST_VIRGINIA', 'WISCONSIN', 'WYOMING']
        },
        email: {
            type: 'string'
        },
        avatar: {
            type: 'string'
        },
        latitude: {
            type: 'string'
        },
        longitude: {
            type: 'string'
        },
        haveEmail: {
            type: 'boolean'
        },
        phoneNumber: {
            type: 'string'
        },
        phoneType: {
            type: 'string',
            enum: ['MOBILE', 'LANDLINE']
        },
        planStartDate: {
            type: 'string',
            format: 'date'
        },
        planRenewalDate: {
            type: 'string',
            format: 'date'
        },
        relationshipToYou: {
            type: 'string',
            enum: ['ALL', 'SELF', 'SPOUSE', 'SIBLING', 'MOTHER', 'FATHER', 'GUARDIAN', 'PARENT', 'CHILDREN', 'GRANDPARENT', 'GRANDCHILDREN', 'FRIEND', 'PARTNER', 'OTHER']
        },
        relationShipName: {
            type: 'string'
        },
        dependent: {
            type: 'boolean'
        },
        addressDto: {
            '$ref': '#/components/schemas/AddressDto'
        },
        emergencyContactDto: {
            '$ref': '#/components/schemas/EmergencyContactDto'
        }
    }
} as const;

export const $CheckMyPlanDto = {
    type: 'object',
    properties: {
        planUuid: {
            type: 'string',
            format: 'uuid'
        },
        primaryLeadUuid: {
            type: 'string',
            format: 'uuid'
        },
        amount: {
            type: 'number',
            format: 'double'
        },
        defaultBillingPeriod: {
            type: 'string',
            enum: ['ANNUAL', 'MONTH', 'QUARTERLY', 'SEMI_ANNUALLY']
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        renewalDate: {
            type: 'string',
            format: 'date'
        },
        patientPlans: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PatientPlanDto'
            }
        },
        individualPatientPlans: {
            '$ref': '#/components/schemas/PatientPlanDto'
        },
        totalAmount: {
            type: 'number',
            format: 'double'
        }
    }
} as const;

export const $LeadResponseDto = {
    type: 'object',
    properties: {
        leadUuid: {
            type: 'string',
            format: 'uuid'
        },
        email: {
            type: 'string'
        },
        firstName: {
            type: 'string'
        },
        preferredLocation: {
            type: 'string',
            enum: ['ALABAMA', 'ALASKA', 'ARIZONA', 'ARKANSAS', 'CALIFORNIA', 'COLORADO', 'CONNECTICUT', 'DELAWARE', 'FLORIDA', 'GEORGIA', 'HAWAII', 'IDAHO', 'ILLINOIS', 'INDIANA', 'IOWA', 'KANSAS', 'KENTUCKY', 'LOUISIANA', 'MAINE', 'MARYLAND', 'MASSACHUSETTS', 'MICHIGAN', 'MINNESOTA', 'MISSISSIPPI', 'MISSOURI', 'MONTANA', 'NEBRASKA', 'NEVADA', 'NEW_HAMPSHIRE', 'NEW_JERSEY', 'NEW_MEXICO', 'NEW_YORK', 'NORTH_CAROLINA', 'NORTH_DAKOTA', 'OHIO', 'OKLAHOMA', 'OREGON', 'PENNSYLVANIA', 'RHODE_ISLAND', 'SOUTH_CAROLINA', 'SOUTH_DAKOTA', 'TENNESSEE', 'TEXAS', 'UTAH', 'VERMONT', 'VIRGINIA', 'WASHINGTON', 'WEST_VIRGINIA', 'WISCONSIN', 'WYOMING']
        },
        lastName: {
            type: 'string'
        },
        phoneNumber: {
            type: 'string'
        },
        sex: {
            type: 'string',
            enum: ['MALE', 'FEMALE', 'OTHER']
        },
        phoneType: {
            type: 'string',
            enum: ['MOBILE', 'LANDLINE']
        },
        birthDate: {
            type: 'string',
            format: 'date-time'
        },
        haveEmail: {
            type: 'boolean'
        },
        archive: {
            type: 'boolean'
        },
        relationshipToYou: {
            type: 'string',
            enum: ['ALL', 'SELF', 'SPOUSE', 'SIBLING', 'MOTHER', 'FATHER', 'GUARDIAN', 'PARENT', 'CHILDREN', 'GRANDPARENT', 'GRANDCHILDREN', 'FRIEND', 'PARTNER', 'OTHER']
        },
        relationshipName: {
            type: 'string'
        },
        dependent: {
            type: 'boolean'
        },
        checkMyPlanDto: {
            '$ref': '#/components/schemas/CheckMyPlanDto'
        }
    }
} as const;

export const $PatientPlanDto = {
    type: 'object',
    properties: {
        patientUuid: {
            type: 'string',
            format: 'uuid'
        },
        leadUuid: {
            type: 'string',
            format: 'uuid'
        },
        planAmount: {
            type: 'number',
            format: 'double'
        },
        relationShip: {
            type: 'string',
            enum: ['ALL', 'SELF', 'SPOUSE', 'SIBLING', 'MOTHER', 'FATHER', 'GUARDIAN', 'PARENT', 'CHILDREN', 'GRANDPARENT', 'GRANDCHILDREN', 'FRIEND', 'PARTNER', 'OTHER']
        },
        relationShipName: {
            type: 'string'
        },
        patientFullName: {
            type: 'string'
        }
    }
} as const;

export const $User = {
    required: ['firstName', 'lastName', 'phone'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        email: {
            maxLength: 64,
            minLength: 5,
            type: 'string'
        },
        firstName: {
            maxLength: 32,
            minLength: 2,
            type: 'string'
        },
        lastName: {
            maxLength: 32,
            minLength: 2,
            type: 'string'
        },
        phone: {
            type: 'string'
        },
        sex: {
            type: 'string',
            enum: ['MALE', 'FEMALE', 'OTHER']
        },
        phoneType: {
            type: 'string',
            enum: ['MOBILE', 'LANDLINE']
        },
        avatar: {
            type: 'string'
        },
        roleType: {
            type: 'string',
            enum: ['ADMIN', 'USER', 'EHR', 'EMPLOYER', 'PATIENT', 'AGENT']
        },
        role: {
            type: 'string'
        },
        lastLogin: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        birthDate: {
            type: 'string',
            format: 'date-time'
        },
        active: {
            type: 'boolean'
        },
        haveEmail: {
            type: 'boolean'
        },
        emailVerified: {
            type: 'boolean',
            readOnly: true
        },
        phoneVerified: {
            type: 'boolean',
            readOnly: true
        },
        archive: {
            type: 'boolean'
        }
    }
} as const;

export const $VaccineDto = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['ADULT', 'CHILD']
        }
    }
} as const;

export const $ReferralRequest = {
    required: ['contactDirectoryUuid', 'patientUuid', 'stat'],
    type: 'object',
    properties: {
        patientUuid: {
            type: 'string',
            format: 'uuid'
        },
        nurseProviderUuid: {
            type: 'string',
            format: 'uuid'
        },
        contactDirectoryUuid: {
            type: 'string',
            format: 'uuid'
        },
        icdCodeIdSet: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        procedureCodeIdSet: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        chartItem: {
            type: 'string'
        },
        referralNote: {
            type: 'string'
        },
        providerName: {
            type: 'string'
        },
        fileKey: {
            type: 'string'
        },
        fileType: {
            type: 'string'
        },
        stat: {
            type: 'boolean'
        }
    }
} as const;

export const $PharmacyDto = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        email: {
            type: 'string'
        },
        pharmacyType: {
            type: 'string',
            enum: ['INTERNAL', 'EXTERNAL']
        },
        name: {
            type: 'string'
        },
        phone: {
            type: 'string'
        },
        fax: {
            type: 'string'
        },
        addressDto: {
            '$ref': '#/components/schemas/AddressDto'
        },
        addressUuid: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const $LocalTime = {
    type: 'object',
    properties: {
        hour: {
            type: 'integer',
            format: 'int32'
        },
        minute: {
            type: 'integer',
            format: 'int32'
        },
        second: {
            type: 'integer',
            format: 'int32'
        },
        nano: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $PatientVaccinationDto = {
    required: ['patientUuid', 'vaccineUuid'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        status: {
            type: 'string',
            enum: ['ADMINISTERED', 'HISTORICAL', 'DECLINED', 'PATIENT_HAS_IMMUNITY', 'PATIENT_HAS_DISEASE', 'IMMUNITY_BY_TIER']
        },
        age: {
            type: 'integer',
            format: 'int32'
        },
        doseNumber: {
            type: 'integer',
            format: 'int64'
        },
        vaccineDto: {
            '$ref': '#/components/schemas/VaccineDto'
        },
        createdDate: {
            type: 'string',
            format: 'date'
        },
        date: {
            type: 'string',
            format: 'date'
        },
        time: {
            '$ref': '#/components/schemas/LocalTime'
        },
        reasonRefused: {
            type: 'string'
        },
        note: {
            type: 'string'
        },
        patientUuid: {
            type: 'string',
            format: 'uuid'
        },
        vaccineUuid: {
            type: 'string',
            format: 'uuid'
        },
        providerUuid: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const $PatientFlagDto = {
    required: ['flagName', 'patientUuid'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        patientUuid: {
            type: 'string',
            format: 'uuid'
        },
        flagName: {
            type: 'string'
        }
    }
} as const;

export const $PastSurgicalHistoryDto = {
    required: ['surgeryName'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        surgeryName: {
            pattern: '^[a-zA-Z0-9\\s]+$',
            type: 'string'
        },
        surgeryDate: {
            type: 'string',
            format: 'date'
        },
        recordedDate: {
            type: 'string',
            format: 'date'
        },
        note: {
            type: 'string'
        },
        patientUuid: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const $PastMedicalHistoryDto = {
    required: ['conditionName'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        conditionName: {
            pattern: '^[a-zA-Z0-9\\s]+$',
            type: 'string'
        },
        onsetDate: {
            type: 'string',
            format: 'date'
        },
        recordedDate: {
            type: 'string',
            format: 'date'
        },
        note: {
            type: 'string'
        },
        patientUuid: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const $NoteRequest = {
    required: ['documentNote', 'note', 'patientUuid'],
    type: 'object',
    properties: {
        patientUuid: {
            type: 'string',
            format: 'uuid'
        },
        note: {
            type: 'string'
        },
        documentNote: {
            type: 'string',
            enum: ['INTERNAL_NOTE', 'EXTERNAL_NOTE']
        }
    }
} as const;

export const $MedicationRequest = {
    required: ['medicineName', 'patientUuid', 'permanent'],
    type: 'object',
    properties: {
        patientUuid: {
            type: 'string',
            format: 'uuid'
        },
        medicineName: {
            type: 'string'
        },
        sig: {
            type: 'string'
        },
        quantity: {
            type: 'integer',
            format: 'int64'
        },
        refill: {
            type: 'integer',
            format: 'int64'
        },
        permanent: {
            type: 'boolean'
        },
        durationValue: {
            type: 'integer',
            format: 'int64'
        },
        durationUnit: {
            type: 'string',
            enum: ['DAYS', 'WEEKS', 'MONTHS', 'YEARS']
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        icdCodeIdSet: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        pharmacyNote: {
            type: 'string'
        }
    }
} as const;

export const $LocationRequestDto = {
    required: ['locationGroupUuid', 'name', 'phoneNumber', 'phoneType'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        phoneType: {
            type: 'string',
            enum: ['MOBILE', 'LANDLINE']
        },
        phoneNumber: {
            pattern: '^\\+?\\d{10,13}$',
            type: 'string'
        },
        addressDto: {
            '$ref': '#/components/schemas/AddressDto'
        },
        locationGroupUuid: {
            type: 'string',
            format: 'uuid'
        },
        locationGroupName: {
            type: 'string'
        },
        onlineSignUp: {
            type: 'boolean'
        },
        active: {
            type: 'boolean'
        }
    }
} as const;

export const $LocationGroupRequest = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        state: {
            type: 'string'
        }
    }
} as const;

export const $InvoiceRequest = {
    type: 'object',
    properties: {
        patientUuid: {
            type: 'string',
            format: 'uuid'
        },
        invoiceDate: {
            type: 'string',
            format: 'date'
        },
        invoiceChargeType: {
            type: 'string',
            enum: ['MEMBERSHIP_CHARGE', 'PROCEDURE_CHARGE', 'MEDICATION_CHARGE', 'LAB_CHARGE', 'PANEL_CHARGE']
        },
        invoiceStatus: {
            type: 'string',
            enum: ['PAID', 'PARTIALLY_PAID', 'UNPAID']
        },
        totalAmount: {
            type: 'number'
        },
        paidAmount: {
            type: 'number'
        },
        balanceAmount: {
            type: 'number'
        }
    }
} as const;

export const $InsuranceDetailsDto = {
    type: 'object',
    properties: {
        insuranceUuid: {
            type: 'string',
            format: 'uuid'
        },
        patientUuid: {
            type: 'string',
            format: 'uuid'
        },
        insuranceName: {
            type: 'string'
        },
        insuranceType: {
            type: 'string',
            enum: ['PRIMARY', 'SECONDARY']
        },
        memberId: {
            type: 'string'
        },
        groupId: {
            type: 'string'
        },
        groupName: {
            type: 'string'
        },
        expiryDate: {
            type: 'string',
            format: 'date'
        },
        frontSideKey: {
            type: 'string'
        },
        backSideKey: {
            type: 'string'
        },
        defaultInsurance: {
            type: 'boolean'
        }
    }
} as const;

export const $ImagingResultRequest = {
    required: ['imagingOrderResult', 'patientUuid'],
    type: 'object',
    properties: {
        patientUuid: {
            type: 'string',
            format: 'uuid'
        },
        imagingOrderResult: {
            type: 'boolean'
        },
        imagingOrderUuid: {
            type: 'string',
            format: 'uuid'
        },
        contactDirectoryUuid: {
            type: 'string',
            format: 'uuid'
        },
        imagingType: {
            type: 'string'
        },
        testName: {
            type: 'string'
        },
        imagingResultInterpretation: {
            type: 'string',
            enum: ['NORMAL', 'ABNORMAL', 'CRITICAL', 'INCONCLUSIVE', 'NOT_AVAILABLE']
        },
        providerUuid: {
            type: 'string',
            format: 'uuid'
        },
        recordedDate: {
            type: 'string',
            format: 'date'
        },
        recordedTime: {
            '$ref': '#/components/schemas/LocalTime'
        },
        fileKey: {
            type: 'string'
        },
        fileType: {
            type: 'string'
        },
        note: {
            type: 'string'
        }
    }
} as const;

export const $ImagingOrderRequest = {
    required: ['contactDirectoryUuid', 'faxPrelimToOffice', 'icdCodeIdSet', 'orderStudyIdSet', 'patientBackWithFilm', 'patientHomeIfNegative', 'patientIsPregnant', 'patientUuid', 'providerUuid', 'routineChannels'],
    type: 'object',
    properties: {
        patientUuid: {
            type: 'string',
            format: 'uuid'
        },
        providerUuid: {
            type: 'string',
            format: 'uuid'
        },
        contactDirectoryUuid: {
            type: 'string',
            format: 'uuid'
        },
        orderStudyIdSet: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        icdCodeIdSet: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        instructionsToCenter: {
            type: 'string'
        },
        routineChannels: {
            type: 'boolean'
        },
        faxPrelimToOffice: {
            type: 'boolean'
        },
        patientIsPregnant: {
            type: 'boolean'
        },
        patientBackWithFilm: {
            type: 'boolean'
        },
        patientHomeIfNegative: {
            type: 'boolean'
        },
        collectionDate: {
            type: 'string',
            format: 'date'
        },
        collectionTime: {
            '$ref': '#/components/schemas/LocalTime'
        },
        imagingOrderStatus: {
            type: 'string',
            enum: ['SEND', 'DRAFT', 'RECEIVED']
        },
        chartNote: {
            type: 'string'
        }
    }
} as const;

export const $IcdCodeDto = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        code: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['ICD_10']
        }
    }
} as const;

export const $FamilyHistoryDto = {
    required: ['problemName', 'relation'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        problemName: {
            pattern: '^[a-zA-Z0-9\\s]+$',
            type: 'string'
        },
        relation: {
            type: 'string',
            enum: ['ALL', 'SELF', 'SPOUSE', 'SIBLING', 'MOTHER', 'FATHER', 'GUARDIAN', 'PARENT', 'CHILDREN', 'GRANDPARENT', 'GRANDCHILDREN', 'FRIEND', 'PARTNER', 'OTHER']
        },
        onsetAge: {
            type: 'integer',
            format: 'int32'
        },
        alive: {
            type: 'boolean'
        },
        note: {
            type: 'string'
        },
        recordedDate: {
            type: 'string',
            format: 'date'
        },
        patientUuid: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const $DrugIntoleranceDto = {
    required: ['substance'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        substance: {
            type: 'string',
            enum: ['MORPHINE', 'HEROIN', 'OXYCODONE', 'FENTANYL', 'DIAZEPAM', 'ALPRAZOLAM', 'LORAZEPAM', 'PHENOBARBITAL', 'THIOPENTAL', 'ALCOHOL', 'AMPHETAMINE', 'METHAMPHETAMINE', 'METHYLPHENIDATE', 'COCAINE', 'CAFFEINE', 'NICOTINE', 'LSD', 'PSILOCYBIN', 'MESCALINE', 'MDMA', 'CANNABIS', 'FLUOXETINE', 'ANTIPSYCHOTICS', 'BETA_BLOCKERS', 'NITROGLYCERIN', 'OXYMETAZOLINE', 'LAXATIVES', 'PROTON_PUMP_INHIBITORS', 'DIPHENHYDRAMINE']
        },
        reaction: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReactionDto'
            }
        },
        severity: {
            type: 'string',
            enum: ['MILD', 'MODERATE', 'SEVERE']
        },
        status: {
            type: 'string',
            enum: ['ACTIVE', 'HISTORICAL', 'RESOLVED']
        },
        onsetDate: {
            type: 'string',
            format: 'date'
        },
        patientUuid: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const $ReactionDto = {
    type: 'object',
    properties: {
        reaction: {
            type: 'string'
        }
    }
} as const;

export const $UpdateDocumentTypeRequest = {
    required: ['documentType', 'uuid'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        documentType: {
            type: 'string'
        }
    }
} as const;

export const $DiagnosisDto = {
    required: ['icdCodeUuid'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        status: {
            type: 'string',
            enum: ['ACTIVE', 'HISTORICAL', 'RESOLVED']
        },
        type: {
            type: 'string',
            enum: ['ACUTE', 'CHRONIC']
        },
        onsetDate: {
            type: 'string',
            format: 'date'
        },
        note: {
            type: 'string'
        },
        recordedDate: {
            type: 'string',
            format: 'date'
        },
        resolvedDate: {
            type: 'string',
            format: 'date'
        },
        icdCodeDto: {
            '$ref': '#/components/schemas/IcdCodeDto'
        },
        patientUuid: {
            type: 'string',
            format: 'uuid'
        },
        icdCodeUuid: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const $AllergyDto = {
    required: ['name'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['DRUG', 'ENVIRONMENT', 'FOOD']
        },
        reaction: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ReactionDto'
            }
        },
        severity: {
            type: 'string',
            enum: ['MILD', 'MODERATE', 'SEVERE']
        },
        status: {
            type: 'boolean'
        },
        onsetDate: {
            type: 'string',
            format: 'date'
        },
        patientUuid: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const $PatientLinkedPharmacyDto = {
    required: ['pharmacyUuid'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        pharmacyUuid: {
            type: 'string',
            format: 'uuid'
        },
        defaultPharmacy: {
            type: 'boolean'
        },
        patientUuid: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const $DocumentTypeRequest = {
    required: ['documentTypes'],
    type: 'object',
    properties: {
        documentTypes: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const $DocumentRequest = {
    required: ['documentTypeUuid', 'fileKey', 'fileName', 'patientUuid'],
    type: 'object',
    properties: {
        patientUuid: {
            type: 'string',
            format: 'uuid'
        },
        documentTypeUuid: {
            type: 'string',
            format: 'uuid'
        },
        fileName: {
            type: 'string'
        },
        fileKey: {
            type: 'string'
        },
        fileType: {
            type: 'string'
        },
        date: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $ContactDirectoryRequest = {
    required: ['name', 'referralType'],
    type: 'object',
    properties: {
        referralType: {
            type: 'string',
            enum: ['IMAGING', 'SPECIALIST']
        },
        name: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        fax: {
            type: 'string'
        },
        phone: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        addressDto: {
            '$ref': '#/components/schemas/AddressDto'
        }
    }
} as const;