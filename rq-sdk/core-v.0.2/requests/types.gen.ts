// This file is auto-generated by @hey-api/openapi-ts

export type PaymentTransactionRequestDto = {
    paymentTransactionUuid?: string;
    planUuid?: string;
    patientUuid?: string;
    leadUuid?: string;
    customerType?: 'LEAD' | 'PATIENT';
    individualAmount?: number;
    defaultBillingPeriod?: 'ANNUAL' | 'MONTH' | 'QUARTERLY' | 'SEMI_ANNUALLY';
    startPlanDateTime?: string;
    endPlanDateTime?: string;
    paymentMethod?: 'CREDIT_CARD' | 'BANK';
    paymentStatus?: 'COMPLETED' | 'FAILED' | 'OVERDUE' | 'DUE';
    totalAmount?: number;
};

export type customerType = 'LEAD' | 'PATIENT';

export type defaultBillingPeriod = 'ANNUAL' | 'MONTH' | 'QUARTERLY' | 'SEMI_ANNUALLY';

export type paymentMethod = 'CREDIT_CARD' | 'BANK';

export type paymentStatus = 'COMPLETED' | 'FAILED' | 'OVERDUE' | 'DUE';

export type Response = {
    date?: string;
    code?: 'INTERNAL_ERROR' | 'ACCESS_DENIED' | 'BAD_REQUEST' | 'NOT_FOUND' | 'CREATED' | 'UNSUPPORTED_MEDIA_TYPE' | 'OK' | 'SERVICE_UNAVAILABLE' | 'ENTITY' | 'DB_ERROR' | 'IAM_ERROR' | 'AWS_ERROR' | 'USER_ARCHIVED' | 'USER_UNARCHIVED' | 'USER_NOT_EXIST' | 'BILLING_INVOICE_STATEMENT' | 'INVOICE_CREATED' | 'INVOICE_UPDATED' | 'INVOICE_DELETED' | 'INVOICE_VIEWED' | 'INVOICE_SENT' | 'INVOICE_GENERATED' | 'PAYMENT_RECEIVED' | 'INVOICE_MARKED_PAID' | 'INVOICE_DOWNLOADED' | 'INVOICE_PRINTED' | 'INVOICES_FETCHED' | 'CONTACT_DIRECTORY_CREATED' | 'CONTACT_DIRECTORY_UPDATED' | 'CONTACT_DIRECTORY_DELETED' | 'CONTACT_DIRECTORY_VIEWED' | 'CONTACT_DIRECTORY_FETCHED' | 'CONTACT_DIRECTORY_LIST_FETCHED' | 'CONTACT_DIRECTORY_SEARCHED' | 'CONTACT_DIRECTORY_SHARED' | 'NOTE_CREATED' | 'NOTE_UPDATED' | 'NOTE_DELETED' | 'NOTE_VIEWED' | 'NOTE_FETCHED' | 'NOTE_SHARED' | 'NOTE_ARCHIVED' | 'NOTE_UNARCHIVED' | 'NOTE_PINNED' | 'NOTE_UNPINNED' | 'REFERRAL_CREATED' | 'REFERRAL_UPDATED' | 'REFERRAL_DELETED' | 'REFERRAL_VIEWED' | 'REFERRAL_FETCHED' | 'REFERRAL_SENT' | 'REFERRAL_RECEIVED' | 'REFERRAL_APPROVED' | 'REFERRAL_REJECTED' | 'REFERRAL_CANCELLED' | 'PROCEDURE_CODE_CREATED' | 'PROCEDURE_CODE_UPDATED' | 'PROCEDURE_CODE_DELETED' | 'PROCEDURE_CODE_VIEWED' | 'PROCEDURE_CODE_FETCHED' | 'PROCEDURE_CODE_ENABLED' | 'PROCEDURE_CODE_DISABLED' | 'PROCEDURE_CODE_ARCHIVED' | 'PROCEDURE_CODE_UNARCHIVED' | 'INVALID_CREDENTIALS' | 'LOGIN_FAILED' | 'INVALID_REFRESH_TOKEN' | 'LOGOUT_RESPONSE' | 'LOGOUT_FAILED' | 'SET_PASSWORD_RESPONSE' | 'INVALID_PASSWORD_LINK' | 'INVALID_PASSWORD' | 'RESET_PASSWORD_FAILED' | 'CHANGE_PASSWORD_RESPONSE' | 'VERIFY_PASSWORD_LINK_RESPONSE' | 'FORGOT_PASSWORD_RESPONSE' | 'RESEND_INVITE_EMAIL_RESPONSE' | 'USER_CREATED' | 'USER_FETCHED' | 'USER_NOT_FOUND' | 'USER_EMAIL_NOT_FOUND' | 'UPDATE_USER_PROFILE_RESPONSE' | 'USER_ENABLED' | 'USER_DISABLED' | 'DUPLICATE_EMAIL_ERROR' | 'CHANGE_AVATAR_RESPONSE' | 'USER_EMAIL_REQUIRED' | 'USER_EMAIL_UPDATE_ERROR' | 'INVALID_USER_ROLE' | 'USER_EMAIL_VERIFIED' | 'SIGNED_UP' | 'USER_INACTIVE' | 'EMPTY_EMAIL' | 'MAIL_SENT_SUCCESSFULLY' | 'PROVIDER_GROUP_CREATED' | 'PROVIDER_GROUP_UPDATED' | 'FAILED_UPDATE_PROVIDER_GROUP' | 'PROVIDER_GROUP_ENABLED' | 'PROVIDER_GROUP_DISABLED' | 'PROVIDER_GROUP_ARCHIVED' | 'PROVIDER_GROUP_UNARCHIVED' | 'LOCATION_CREATED' | 'LOCATION_UPDATED' | 'LOCATION_DELETED' | 'LOCATION_FETCHED' | 'LOCATION_NOT_FOUND' | 'LOCATION_ENABLED' | 'LOCATION_DISABLED' | 'LOCATION_ARCHIVED' | 'LOCATION_UNARCHIVED' | 'DEPARTMENT_CREATED' | 'DEPARTMENT_UPDATED' | 'DEPARTMENT_ENABLED' | 'DEPARTMENT_DISABLED' | 'DEPARTMENT_ARCHIVED' | 'DEPARTMENT_UNARCHIVED' | 'PROVIDER_CREATED' | 'PROVIDER_UPDATED' | 'PROVIDER_ENABLED' | 'PROVIDER_DISABLED' | 'PROVIDER_ARCHIVED' | 'PROVIDER_FETCHED' | 'PROVIDER_STATUS_CHANGED' | 'PROVIDER_UNARCHIVED' | 'NPI_ALREADY_EXIST' | 'PATIENT_CREATED' | 'PATIENT_UPDATE' | 'PATIENT_REGISTER' | 'PATIENT_DELETED' | 'PATIENT_FOUND' | 'PATIENT_PLAN_DETAIL' | 'PATIENT_MEMBERSHIP' | 'PATIENT_STATUS_UPDATED' | 'PATIENT_ARCHIVE_STATUS_UPDATED' | 'PATIENT_UNARCHIVE_STATUS_UPDATED' | 'PATIENT_ENABLE_DISABLE_RESPONSE' | 'FAILED_PATIENT_UPDATE' | 'PATIENT_NOT_FOUND' | 'USER_MRN_UPDATE_ERROR' | 'PATIENT_DATA_FETCHED' | 'PATIENT_DOCUMENT_REMOVED' | 'UPLOAD_DOC_INVALID_ERROR' | 'FAILED_PATIENT_STATUS_UPDATE' | 'PATIENT_ARCHIVE' | 'FAILED_PATIENT_ARCHIVE' | 'INVALID_BIRTHDATE' | 'FAILED_UPDATE_PATIENT_INSURANCE' | 'ADDED_TO_WAITING_LIST' | 'PATIENT_DRUGINTOLERANCE_CREATED' | 'PATIENT_DRUGINTOLERANCE_FETCHED' | 'PATIENT_DRUGINTOLERANCE_UPDATED' | 'PATIENT_DRUGINTOLERANCE_DELETED' | 'ICD_CODE_CREATED' | 'ICD_CODE_FETCHED' | 'ICD_CODE_DISABLED' | 'PHARMACY_FETCHED' | 'PHARMACY_CREATED' | 'PHARMACY_UPDATED' | 'PHARMACY_DISABLED' | 'TENANT_CONFIGURATION_CREATED' | 'TENANT_CONFIGURATION_UPDATED' | 'FEE_AMOUNT_ADDED' | 'FEE_AMOUNT_UPDATED' | 'FEE_AMOUNT_STATUS_CHANGED' | 'FEE_AMOUNT_ALREADY_EXISTS' | 'FEE_AMOUNT_NOT_FOUND' | 'FEE_DELETED' | 'INVALID_MEDICAL_CODE' | 'PATIENT_ADDED' | 'PATIENT_ARCHIVED' | 'PATIENT_UNARCHIVED' | 'PATIENT_ENABLED' | 'PATIENT_DISABLED' | 'LEAD_ADDED' | 'LEAD_UPDATED' | 'LEAD_DELETED' | 'LEAD_FETCHED' | 'PLAN_ADDED' | 'PLAN_UPDATED' | 'PLAN_DELETED' | 'PLAN_FETCHED' | 'INSURANCEPAYER_NOT_FOUND' | 'INSURANCE_POLICY_NOT_FOUND' | 'TOO_MANY_INSURANCES' | 'INSURANCE_NOT_FOUND' | 'SECONDARY_INSURANCE_NOT_FOUND' | 'INSURANCETYPE_UPDATED' | 'CANNOT_UPDATE_INSURANCETYPE' | 'PATIENT_INSURANCE_UPDATE' | 'SECONDARY_INSURANCE_REMOVED' | 'DUPLICATE_INSURANCE_ERROR' | 'ELIGIBILITY_NOT_ALLOWED' | 'INSURANCE_ADDED' | 'INSURANCE_UPDATED' | 'INSURANCE_DELETED' | 'INSURANCE_FETCHED' | 'INTAKE_FORM_ADDED' | 'INTAKE_FORM_UPDATED' | 'PATIENT_DOCUMENT_UPLOADED' | 'REASON_IS_MANDATORY' | 'CHARGEABLE_IS_MANDATORY' | 'INTAKE_NEEDED' | 'CONSENT_FORM_FOUND' | 'ADDED_AVAILABILITY' | 'CONSULT_TIME_CONFLICT' | 'BOOKED_APPOINTMENT_SLOT' | 'AVAILABILITY_NOT_FOUND' | 'DAY_SLOT_NOT_FOUND' | 'SLOT_NOT_FOUND' | 'INVALID_TIME_DURATION' | 'PAST_START_TIME' | 'SLOT_ALREADY_BOOKED' | 'APPOINTMENT_CREATED' | 'APPOINTMENT_DATA_FETCHED' | 'APPOINTMENT_NOT_FOUND' | 'APPOINTMENT_UPDATED' | 'APPOINTMENT_CONFIRMED' | 'NEW_APPT_ALREADY_EXIST' | 'NEW_APPT_NOT_EXIST' | 'EXISTING_APPOINTMENT_NOT_FOUND' | 'RESCHEDULE_NOT_ALLOWED' | 'APPOINTMENT_RESCHEDULED' | 'APPOINTMENT_RESCHEDULED_WITH_CHARGE' | 'CHECKED_IN_NOT_ENABLED' | 'FOLLOW_UP_APPT_ERROR' | 'APPT_NOT_COMPLETE_ERROR' | 'EXISTING_APPT_STATUS_ERROR' | 'APPOINTMENT_FEE_SET' | 'APPOINTMENT_FEE_ALREADY_PAID' | 'NO_SHOW_NOT_ALLOWED' | 'BILL_AMOUNT' | 'SEND_MESSAGE_RESPONSE' | 'EMAIL_SUBJECT_MANDATORY' | 'PATIENT_PHONE_NOT_PRESENT' | 'ENCOUNTER_ALREADY_EXIST' | 'ENCOUNTER_ARCHIVED' | 'ENCOUNTER_UPDATED' | 'PATIENT_SCREENER_ADDED' | 'PATIENTSCREENER_NOT_FOUND' | 'PATIENT_SCORE_ADDED' | 'PATIENT_SCREENER_ANSWER_UPDATED' | 'INVALID_SCREENER_TYPE' | 'INVALID_ANSWER_OPTION' | 'INCOMPLETE_SCREENER_ANSWERS' | 'PATIENT_SCREENER_SCORE_UPDATED' | 'PATIENT_SCREENER_DATA_FETCHED' | 'PAYMENT_CARD_ADDED' | 'PAYMENT_CARD_ALREADY_EXISTS' | 'PAYMENT_CHARGED' | 'FINE_CHARGED' | 'PAYMENT_CARD_NOT_FOUND' | 'PAYMENT_ALREADY_DONE' | 'PAYMENT_CARD_NOT_EXISTS' | 'PAYMENT_AMOUNT_NOT_SET' | 'PAYMENT_BILL_STATUS_ERROR' | 'INVALID_CARD_EXPIRATION' | 'NO_NOTIFICATIONS' | 'NOTIFICATION_MARKED_AS_SEEN' | 'NOTIFICATIONS_COUNT' | 'PATIENT_CONSENT_FORMS_ADDED' | 'TEXTMACRO_SHORTCUT_EXISTS' | 'TEXTMACRO_ADDED' | 'TEXTMACRO_DATA_FETCHED' | 'TEXTMACRO_UPDATED' | 'FAILED_UPDATE_TEXT_MACRO' | 'FAILED_TEXTMACRO_ARCHIVE' | 'TEXTMACRO_ARCHIVE' | 'TASK_ADDED' | 'TASK_DATA_FETCHED' | 'TASK_UPDATED' | 'TasK_ENABLED' | 'TasK_DISABLED' | 'TasK_ARCHIVED' | 'TasK_UNARCHIVED' | 'TASK_ASSIGNED' | 'INVALID_TASK_STATUS' | 'INVALID_DUEDATE' | 'FINE_CHARGED_APPOINTMENT' | 'APPOINTMENT_FINE' | 'CANNOT_CHARGE_FINE' | 'PAYMENT_SUCCESSFUL' | 'VITAL_ADDED' | 'VITAL_UPDATED' | 'VITAL_DATA_FETCHED' | 'VITAL_NOT_FOUND' | 'FAILED_VITAL_UPDATED' | 'EMITTED_SUCCESSFULLY' | 'WEBHOOK_SUCCESSFUL' | 'BILL_UPDATED' | 'CLAIM_ADDED' | 'BOOK_APPOINTMENT_ERROR' | 'CANCEL_APPOINTMENT_ERROR' | 'NOT_IMPLEMENTED' | 'COMMENT_ADDED_SUCCESSFULLY' | 'COMMENT_UPDATED_SUCCESSFULLY' | 'COMMENT_DELETED_SUCCESSFULLY' | 'MEDICAL_CODE_ADDED_SUCCESSFULLY' | 'MEDICAL_CODE_UPDATED_SUCCESSFULLY' | 'PROVIDER_REVIEW_ADDED_SUCCESSFULLY' | 'PROVIDER_REVIEW_STATUS_UPDATED_SUCCESSFULLY' | 'CHECK_IN_STATUS' | 'REFILL_RX_ADDED' | 'REFILL_RX_UPDATED' | 'ROI_ADDED' | 'ROI_UPDATED' | 'ROI_STATUS_UPDATED' | 'ROI_NOT_FOUND' | 'CONSENT_FORM_TEMPLATE_ADDED' | 'CONSENT_FORM_TEMPLATE_UPDATED' | 'CONSENT_FORM_TEMPLATE_STATUS' | 'INTERNAL_SERVER_ERROR' | 'FILE_UPLOADED' | 'EMPTY_FILE' | 'MEDICAL_CODES_CREATED' | 'MEDICAL_CODES_UPDATED' | 'MEDICAL_CODE_ENABLED' | 'MEDICAL_CODE_DISABLED' | 'MEDICAL_CODE_ARCHIVED' | 'MEDICAL_CODE_UNARCHIVED' | 'PATIENT_DIAGNOSIS_CREATED' | 'PATIENT_DIAGNOSIS_UPDATED' | 'PATIENT_DIAGNOSIS_ENABLED' | 'PATIENT_DIAGNOSIS_DISABLED' | 'PATIENT_DIAGNOSIS_ARCHIVED' | 'PATIENT_DIAGNOSIS_UNARCHIVED' | 'PATIENT_DIAGNOSIS_FETCHED' | 'PATIENT_ALLERGY_CREATED' | 'PATIENT_ALLERGY_FETCHED' | 'PATIENT_ALLERGY_UPDATED' | 'PATIENT_ALLERGY_ENABLED' | 'PATIENT_ALLERGY_DISABLED' | 'PATIENT_ALLERGY_ARCHIVED' | 'PATIENT_ALLERGY_UNARCHIVED' | 'PATIENT_ALLERGY_DELETED' | 'PATIENT_VACCINE_CREATED' | 'PATIENT_VACCINE_UPDATED' | 'PATIENT_VACCINE_ENABLED' | 'PATIENT_VACCINE_DISABLED' | 'PATIENT_VACCINE_ARCHIVED' | 'PATIENT_VACCINE_UNARCHIVED' | 'PATIENT_VACCINE_DELETED' | 'PATIENT_VACCINE_FETCHED' | 'VACCINE_CREATED' | 'VACCINE_UPDATED' | 'VACCINE_FETCHED' | 'VACCINE_DELETED' | 'PATIENT_VITAL_CREATED' | 'PATIENT_VITAL_UPDATED' | 'STICKY_NOTE_CREATED' | 'STICKY_NOTE_UPDATED' | 'STICKY_NOTE_ENABLED' | 'STICKY_NOTE_DISABLED' | 'STICKY_NOTE_ARCHIVED' | 'STICKY_NOTE_UNARCHIVED' | 'PATIENT_MEDICATION_CREATED' | 'PATIENT_MEDICATION_FETCHED' | 'PATIENT_MEDICATION_DELETED' | 'PATIENT_MEDICATION_UPDATED' | 'PATIENT_MEDICATION_ENABLED' | 'PATIENT_MEDICATION_DISABLED' | 'PATIENT_MEDICATION_ARCHIVED' | 'PATIENT_MEDICATION_UNARCHIVED' | 'PATIENT_MEDICAL_HISTORY_CREATED' | 'PATIENT_MEDICAL_HISTORY_UPDATED' | 'PATIENT_MEDICAL_HISTORY_ENABLED' | 'PATIENT_MEDICAL_HISTORY_DISABLED' | 'PATIENT_MEDICAL_HISTORY_ARCHIVED' | 'PATIENT_MEDICAL_HISTORY_UNARCHIVED' | 'PATIENT_MEDICAL_HISTORY_FETCHED' | 'PATIENT_SURGICAL_HISTORY_CREATED' | 'PATIENT_SURGICAL_HISTORY_UPDATED' | 'PATIENT_SURGICAL_HISTORY_ENABLED' | 'PATIENT_SURGICAL_HISTORY_DISABLED' | 'PATIENT_SURGICAL_HISTORY_ARCHIVED' | 'PATIENT_SURGICAL_HISTORY_UNARCHIVED' | 'PATIENT_SURGICAL_HISTORY_FETCHED' | 'PATIENT_FAMILY_HISTORY_CREATED' | 'PATIENT_FAMILY_HISTORY_UPDATED' | 'PATIENT_FAMILY_HISTORY_ENABLED' | 'PATIENT_FAMILY_HISTORY_DISABLED' | 'PATIENT_FAMILY_HISTORY_ARCHIVED' | 'PATIENT_FAMILY_HISTORY_UNARCHIVED' | 'PATIENT_FAMILY_HISTORY_FETCHED' | 'PATIENT_LINK_PHARMACY_CREATED' | 'PATIENT_LINK_PHARMACY_UPDATED' | 'PATIENT_SOCIAL_HISTORY_CREATED' | 'PATIENT_SOCIAL_HISTORY_UPDATED' | 'PATIENT_SOCIAL_HISTORY_ENABLED' | 'PATIENT_SOCIAL_HISTORY_DISABLED' | 'PATIENT_SOCIAL_HISTORY_ARCHIVED' | 'PATIENT_SOCIAL_HISTORY_UNARCHIVED' | 'DOCUMENT_CREATED' | 'DOCUMENT_UPDATED' | 'DOCUMENT_DELETED' | 'DOCUMENT_VIEWED' | 'DOCUMENT_FETCHED' | 'DOCUMENT_TYPE_CREATED' | 'DOCUMENT_TYPE_UPDATED' | 'DOCUMENT_TYPE_DELETED' | 'DOCUMENT_TYPE_VIEWED' | 'DOCUMENT_TYPE_FETCHED' | 'DOCUMENT_TYPE_ENABLED' | 'DOCUMENT_TYPE_DISABLED' | 'DOCUMENT_TYPE_ARCHIVED' | 'DOCUMENT_TYPE_UNARCHIVED' | 'DOCUMENT_TAG_CREATED' | 'DOCUMENT_TAG_UPDATED' | 'DOCUMENT_TAG_ENABLED' | 'DOCUMENT_TAG_DISABLED' | 'DOCUMENT_TAG_ARCHIVED' | 'DOCUMENT_TAG_UNARCHIVED' | 'IMAGING_ORDER_CREATED' | 'IMAGING_ORDER_UPDATED' | 'IMAGING_ORDER_DELETED' | 'IMAGING_ORDER_VIEWED' | 'IMAGING_ORDER_FETCHED' | 'IMAGING_ORDER_COMPLETED' | 'IMAGING_ORDER_CANCELLED' | 'IMAGING_ORDER_APPROVED' | 'IMAGING_ORDER_REJECTED' | 'IMAGING_ORDER_SCHEDULED' | 'IMAGING_RESULT_CREATED' | 'IMAGING_RESULT_UPDATED' | 'IMAGING_RESULT_DELETED' | 'IMAGING_RESULT_VIEWED' | 'IMAGING_RESULT_FETCHED' | 'IMAGING_RESULT_APPROVED' | 'IMAGING_RESULT_REJECTED' | 'IMAGING_RESULT_REVIEWED' | 'IMAGING_RESULT_ARCHIVED' | 'IMAGING_RESULT_UNARCHIVED' | 'PATIENT_LAB_ORDER_CREATED' | 'PATIENT_LAB_ORDER_UPDATED' | 'PATIENT_LAB_ORDER_NOT_FOUND' | 'PATIENT_LAB_ORDER_ENABLED' | 'PATIENT_LAB_ORDER_DISABLED' | 'PATIENT_LAB_ORDER_ARCHIVED' | 'PATIENT_LAB_ORDER_UNARCHIVED' | 'CLINICAL_NOTE_CREATED' | 'CLINICAL_NOTE_UPDATED' | 'CLINICAL_NOTE_NOT_FOUND' | 'CLINICAL_NOTE_ENABLED' | 'CLINICAL_NOTE_DISABLED' | 'CLINICAL_NOTE_ARCHIVED' | 'CLINICAL_NOTE_UNARCHIVED' | 'LOCATION_GROUP_ADDED' | 'LOCATION_GROUP_UPDATED' | 'LOCATION_GROUP_DELETED' | 'LOCATION_GROUP_FETCHED' | 'USER_DOCUMENT_UPLOAD' | 'ROLE_ADDED' | 'PRIVILEGE_NOT_FOUND' | 'ROLE_UPDATED' | 'ROLE_NOT_FOUND' | 'CUSTOM_FORM_CREATED' | 'CUSTOM_FORM_STATUS_UPDATED' | 'CUSTOM_FORM_UPDATED' | 'CUSTOM_FORM_ENABLED' | 'CUSTOM_FORM_DISABLED' | 'CUSTOM_FORM_ARCHIVED' | 'CUSTOM_FORM_UNARCHIVED' | 'CUSTOM_FORM_RESTORED' | 'CUSTOM_FORM_COPY' | 'CUSTOM_FORM_TEMPLATE_CREATED' | 'CUSTOM_FORM_TEMPLATE_STATUS_UPDATED' | 'CUSTOM_FORM_TEMPLATE_UPDATED' | 'CUSTOM_FORM_TEMPLATE_ENABLED' | 'CUSTOM_FORM_TEMPLATE_DISABLED' | 'CUSTOM_FORM_TEMPLATE_ARCHIVED' | 'CUSTOM_FORM_TEMPLATE_RESTORED' | 'MICROS_FORM_CREATED' | 'MICROS_FORM_UPDATED' | 'MICROS_FORM_STATUS_UPDATED' | 'MICROS_FORM_ARCHIVE_STATUS_UPDATED' | 'VISIT_NOTE_FORM_CREATED' | 'VISIT_NOTE_FORM_UPDATED' | 'VISIT_NOTE_FORM_STATUS_UPDATED' | 'VISIT_NOTE_FORM_ARCHIVE_STATUS_UPDATED' | 'REVIEW_OF_SYSTEM_FORM_CREATED' | 'REVIEW_OF_SYSTEM_FORM_UPDATED' | 'REVIEW_OF_SYSTEM_FORM_STATUS_UPDATED' | 'REVIEW_OF_SYSTEM_FORM_ARCHIVE_STATUS_UPDATED' | 'CUSTOM_QUESTIONNAIRE_FORM_CREATED' | 'CUSTOM_QUESTIONNAIRE_FORM_UPDATED' | 'CUSTOM_QUESTIONNAIRE_FORM_STATUS_UPDATED' | 'CUSTOM_QUESTIONNAIRE_FORM_ARCHIVE_STATUS_UPDATED' | 'CAREPLAN_FORM_CREATED' | 'CAREPLAN_FORM_UPDATED' | 'CAREPLAN_FORM_STATUS_UPDATED' | 'CAREPLAN_FORM_ARCHIVE_STATUS_UPDATED' | 'ANNOTABLE_IMAGE_FORM_CREATED' | 'ANNOTABLE_IMAGE_FORM_UPDATED' | 'ANNOTABLE_IMAGE_FORM_STATUS_UPDATED' | 'ANNOTABLE_IMAGE_FORM_ARCHIVE_STATUS_UPDATED' | 'ORDER_SET_FORM_CREATED' | 'ORDER_SET_FORM_UPDATED' | 'ORDER_SET_FORM_STATUS_UPDATED' | 'ORDER_SET_FORM_ARCHIVE_STATUS_UPDATED' | 'PHYSICAL_EXAM_FORM_CREATED' | 'PHYSICAL_EXAM_FORM_UPDATED' | 'PHYSICAL_EXAM_FORM_STATUS_UPDATED' | 'PHYSICAL_EXAM_FORM_ARCHIVE_STATUS_UPDATED' | 'CHECK_CONSULT_TIME' | 'PATIENT_FLAG_CREATED' | 'PATIENT_FLAG_FETCHED' | 'PATIENT_FLAG_UPDATED' | 'PATIENT_FLAG_DELETED' | 'ICD_CODE_ADDED' | 'CPT_CODE_ADDED' | 'HCPCS_CODE_ADDED' | 'LOINC_CODE_ADDED' | 'ICD_CODE_UPDATED' | 'CPT_CODE_UPDATED' | 'HCPCS_CODE_UPDATED' | 'LOINC_CODE_UPDATED' | 'INVOICE_SETTING_CREATED' | 'INVOICE_SETTING_UPDATED' | 'INVOICE_SETTING_FETCHED' | 'INVOICE_SETTING_DELETED' | 'STUDY_ORDER_FETCHED' | 'DOCUMENT_UPLOADED' | 'IMAGE_UPLOADED' | 'AUDIT_HISTORY_FETCHED' | 'PAYMENT_TRANSACTION_CREATED' | 'PAYMENT_TRANSACTION_UPDATED' | 'PAYMENT_TRANSACTION_DELETED' | 'PAYMENT_TRANSACTION_FETCHED';
    message?: string;
    data?: {
        [key: string]: unknown;
    };
    errors?: {
        [key: string]: (string);
    };
    path?: string;
    requestId?: string;
    version?: string;
};

export type code = 'INTERNAL_ERROR' | 'ACCESS_DENIED' | 'BAD_REQUEST' | 'NOT_FOUND' | 'CREATED' | 'UNSUPPORTED_MEDIA_TYPE' | 'OK' | 'SERVICE_UNAVAILABLE' | 'ENTITY' | 'DB_ERROR' | 'IAM_ERROR' | 'AWS_ERROR' | 'USER_ARCHIVED' | 'USER_UNARCHIVED' | 'USER_NOT_EXIST' | 'BILLING_INVOICE_STATEMENT' | 'INVOICE_CREATED' | 'INVOICE_UPDATED' | 'INVOICE_DELETED' | 'INVOICE_VIEWED' | 'INVOICE_SENT' | 'INVOICE_GENERATED' | 'PAYMENT_RECEIVED' | 'INVOICE_MARKED_PAID' | 'INVOICE_DOWNLOADED' | 'INVOICE_PRINTED' | 'INVOICES_FETCHED' | 'CONTACT_DIRECTORY_CREATED' | 'CONTACT_DIRECTORY_UPDATED' | 'CONTACT_DIRECTORY_DELETED' | 'CONTACT_DIRECTORY_VIEWED' | 'CONTACT_DIRECTORY_FETCHED' | 'CONTACT_DIRECTORY_LIST_FETCHED' | 'CONTACT_DIRECTORY_SEARCHED' | 'CONTACT_DIRECTORY_SHARED' | 'NOTE_CREATED' | 'NOTE_UPDATED' | 'NOTE_DELETED' | 'NOTE_VIEWED' | 'NOTE_FETCHED' | 'NOTE_SHARED' | 'NOTE_ARCHIVED' | 'NOTE_UNARCHIVED' | 'NOTE_PINNED' | 'NOTE_UNPINNED' | 'REFERRAL_CREATED' | 'REFERRAL_UPDATED' | 'REFERRAL_DELETED' | 'REFERRAL_VIEWED' | 'REFERRAL_FETCHED' | 'REFERRAL_SENT' | 'REFERRAL_RECEIVED' | 'REFERRAL_APPROVED' | 'REFERRAL_REJECTED' | 'REFERRAL_CANCELLED' | 'PROCEDURE_CODE_CREATED' | 'PROCEDURE_CODE_UPDATED' | 'PROCEDURE_CODE_DELETED' | 'PROCEDURE_CODE_VIEWED' | 'PROCEDURE_CODE_FETCHED' | 'PROCEDURE_CODE_ENABLED' | 'PROCEDURE_CODE_DISABLED' | 'PROCEDURE_CODE_ARCHIVED' | 'PROCEDURE_CODE_UNARCHIVED' | 'INVALID_CREDENTIALS' | 'LOGIN_FAILED' | 'INVALID_REFRESH_TOKEN' | 'LOGOUT_RESPONSE' | 'LOGOUT_FAILED' | 'SET_PASSWORD_RESPONSE' | 'INVALID_PASSWORD_LINK' | 'INVALID_PASSWORD' | 'RESET_PASSWORD_FAILED' | 'CHANGE_PASSWORD_RESPONSE' | 'VERIFY_PASSWORD_LINK_RESPONSE' | 'FORGOT_PASSWORD_RESPONSE' | 'RESEND_INVITE_EMAIL_RESPONSE' | 'USER_CREATED' | 'USER_FETCHED' | 'USER_NOT_FOUND' | 'USER_EMAIL_NOT_FOUND' | 'UPDATE_USER_PROFILE_RESPONSE' | 'USER_ENABLED' | 'USER_DISABLED' | 'DUPLICATE_EMAIL_ERROR' | 'CHANGE_AVATAR_RESPONSE' | 'USER_EMAIL_REQUIRED' | 'USER_EMAIL_UPDATE_ERROR' | 'INVALID_USER_ROLE' | 'USER_EMAIL_VERIFIED' | 'SIGNED_UP' | 'USER_INACTIVE' | 'EMPTY_EMAIL' | 'MAIL_SENT_SUCCESSFULLY' | 'PROVIDER_GROUP_CREATED' | 'PROVIDER_GROUP_UPDATED' | 'FAILED_UPDATE_PROVIDER_GROUP' | 'PROVIDER_GROUP_ENABLED' | 'PROVIDER_GROUP_DISABLED' | 'PROVIDER_GROUP_ARCHIVED' | 'PROVIDER_GROUP_UNARCHIVED' | 'LOCATION_CREATED' | 'LOCATION_UPDATED' | 'LOCATION_DELETED' | 'LOCATION_FETCHED' | 'LOCATION_NOT_FOUND' | 'LOCATION_ENABLED' | 'LOCATION_DISABLED' | 'LOCATION_ARCHIVED' | 'LOCATION_UNARCHIVED' | 'DEPARTMENT_CREATED' | 'DEPARTMENT_UPDATED' | 'DEPARTMENT_ENABLED' | 'DEPARTMENT_DISABLED' | 'DEPARTMENT_ARCHIVED' | 'DEPARTMENT_UNARCHIVED' | 'PROVIDER_CREATED' | 'PROVIDER_UPDATED' | 'PROVIDER_ENABLED' | 'PROVIDER_DISABLED' | 'PROVIDER_ARCHIVED' | 'PROVIDER_FETCHED' | 'PROVIDER_STATUS_CHANGED' | 'PROVIDER_UNARCHIVED' | 'NPI_ALREADY_EXIST' | 'PATIENT_CREATED' | 'PATIENT_UPDATE' | 'PATIENT_REGISTER' | 'PATIENT_DELETED' | 'PATIENT_FOUND' | 'PATIENT_PLAN_DETAIL' | 'PATIENT_MEMBERSHIP' | 'PATIENT_STATUS_UPDATED' | 'PATIENT_ARCHIVE_STATUS_UPDATED' | 'PATIENT_UNARCHIVE_STATUS_UPDATED' | 'PATIENT_ENABLE_DISABLE_RESPONSE' | 'FAILED_PATIENT_UPDATE' | 'PATIENT_NOT_FOUND' | 'USER_MRN_UPDATE_ERROR' | 'PATIENT_DATA_FETCHED' | 'PATIENT_DOCUMENT_REMOVED' | 'UPLOAD_DOC_INVALID_ERROR' | 'FAILED_PATIENT_STATUS_UPDATE' | 'PATIENT_ARCHIVE' | 'FAILED_PATIENT_ARCHIVE' | 'INVALID_BIRTHDATE' | 'FAILED_UPDATE_PATIENT_INSURANCE' | 'ADDED_TO_WAITING_LIST' | 'PATIENT_DRUGINTOLERANCE_CREATED' | 'PATIENT_DRUGINTOLERANCE_FETCHED' | 'PATIENT_DRUGINTOLERANCE_UPDATED' | 'PATIENT_DRUGINTOLERANCE_DELETED' | 'ICD_CODE_CREATED' | 'ICD_CODE_FETCHED' | 'ICD_CODE_DISABLED' | 'PHARMACY_FETCHED' | 'PHARMACY_CREATED' | 'PHARMACY_UPDATED' | 'PHARMACY_DISABLED' | 'TENANT_CONFIGURATION_CREATED' | 'TENANT_CONFIGURATION_UPDATED' | 'FEE_AMOUNT_ADDED' | 'FEE_AMOUNT_UPDATED' | 'FEE_AMOUNT_STATUS_CHANGED' | 'FEE_AMOUNT_ALREADY_EXISTS' | 'FEE_AMOUNT_NOT_FOUND' | 'FEE_DELETED' | 'INVALID_MEDICAL_CODE' | 'PATIENT_ADDED' | 'PATIENT_ARCHIVED' | 'PATIENT_UNARCHIVED' | 'PATIENT_ENABLED' | 'PATIENT_DISABLED' | 'LEAD_ADDED' | 'LEAD_UPDATED' | 'LEAD_DELETED' | 'LEAD_FETCHED' | 'PLAN_ADDED' | 'PLAN_UPDATED' | 'PLAN_DELETED' | 'PLAN_FETCHED' | 'INSURANCEPAYER_NOT_FOUND' | 'INSURANCE_POLICY_NOT_FOUND' | 'TOO_MANY_INSURANCES' | 'INSURANCE_NOT_FOUND' | 'SECONDARY_INSURANCE_NOT_FOUND' | 'INSURANCETYPE_UPDATED' | 'CANNOT_UPDATE_INSURANCETYPE' | 'PATIENT_INSURANCE_UPDATE' | 'SECONDARY_INSURANCE_REMOVED' | 'DUPLICATE_INSURANCE_ERROR' | 'ELIGIBILITY_NOT_ALLOWED' | 'INSURANCE_ADDED' | 'INSURANCE_UPDATED' | 'INSURANCE_DELETED' | 'INSURANCE_FETCHED' | 'INTAKE_FORM_ADDED' | 'INTAKE_FORM_UPDATED' | 'PATIENT_DOCUMENT_UPLOADED' | 'REASON_IS_MANDATORY' | 'CHARGEABLE_IS_MANDATORY' | 'INTAKE_NEEDED' | 'CONSENT_FORM_FOUND' | 'ADDED_AVAILABILITY' | 'CONSULT_TIME_CONFLICT' | 'BOOKED_APPOINTMENT_SLOT' | 'AVAILABILITY_NOT_FOUND' | 'DAY_SLOT_NOT_FOUND' | 'SLOT_NOT_FOUND' | 'INVALID_TIME_DURATION' | 'PAST_START_TIME' | 'SLOT_ALREADY_BOOKED' | 'APPOINTMENT_CREATED' | 'APPOINTMENT_DATA_FETCHED' | 'APPOINTMENT_NOT_FOUND' | 'APPOINTMENT_UPDATED' | 'APPOINTMENT_CONFIRMED' | 'NEW_APPT_ALREADY_EXIST' | 'NEW_APPT_NOT_EXIST' | 'EXISTING_APPOINTMENT_NOT_FOUND' | 'RESCHEDULE_NOT_ALLOWED' | 'APPOINTMENT_RESCHEDULED' | 'APPOINTMENT_RESCHEDULED_WITH_CHARGE' | 'CHECKED_IN_NOT_ENABLED' | 'FOLLOW_UP_APPT_ERROR' | 'APPT_NOT_COMPLETE_ERROR' | 'EXISTING_APPT_STATUS_ERROR' | 'APPOINTMENT_FEE_SET' | 'APPOINTMENT_FEE_ALREADY_PAID' | 'NO_SHOW_NOT_ALLOWED' | 'BILL_AMOUNT' | 'SEND_MESSAGE_RESPONSE' | 'EMAIL_SUBJECT_MANDATORY' | 'PATIENT_PHONE_NOT_PRESENT' | 'ENCOUNTER_ALREADY_EXIST' | 'ENCOUNTER_ARCHIVED' | 'ENCOUNTER_UPDATED' | 'PATIENT_SCREENER_ADDED' | 'PATIENTSCREENER_NOT_FOUND' | 'PATIENT_SCORE_ADDED' | 'PATIENT_SCREENER_ANSWER_UPDATED' | 'INVALID_SCREENER_TYPE' | 'INVALID_ANSWER_OPTION' | 'INCOMPLETE_SCREENER_ANSWERS' | 'PATIENT_SCREENER_SCORE_UPDATED' | 'PATIENT_SCREENER_DATA_FETCHED' | 'PAYMENT_CARD_ADDED' | 'PAYMENT_CARD_ALREADY_EXISTS' | 'PAYMENT_CHARGED' | 'FINE_CHARGED' | 'PAYMENT_CARD_NOT_FOUND' | 'PAYMENT_ALREADY_DONE' | 'PAYMENT_CARD_NOT_EXISTS' | 'PAYMENT_AMOUNT_NOT_SET' | 'PAYMENT_BILL_STATUS_ERROR' | 'INVALID_CARD_EXPIRATION' | 'NO_NOTIFICATIONS' | 'NOTIFICATION_MARKED_AS_SEEN' | 'NOTIFICATIONS_COUNT' | 'PATIENT_CONSENT_FORMS_ADDED' | 'TEXTMACRO_SHORTCUT_EXISTS' | 'TEXTMACRO_ADDED' | 'TEXTMACRO_DATA_FETCHED' | 'TEXTMACRO_UPDATED' | 'FAILED_UPDATE_TEXT_MACRO' | 'FAILED_TEXTMACRO_ARCHIVE' | 'TEXTMACRO_ARCHIVE' | 'TASK_ADDED' | 'TASK_DATA_FETCHED' | 'TASK_UPDATED' | 'TasK_ENABLED' | 'TasK_DISABLED' | 'TasK_ARCHIVED' | 'TasK_UNARCHIVED' | 'TASK_ASSIGNED' | 'INVALID_TASK_STATUS' | 'INVALID_DUEDATE' | 'FINE_CHARGED_APPOINTMENT' | 'APPOINTMENT_FINE' | 'CANNOT_CHARGE_FINE' | 'PAYMENT_SUCCESSFUL' | 'VITAL_ADDED' | 'VITAL_UPDATED' | 'VITAL_DATA_FETCHED' | 'VITAL_NOT_FOUND' | 'FAILED_VITAL_UPDATED' | 'EMITTED_SUCCESSFULLY' | 'WEBHOOK_SUCCESSFUL' | 'BILL_UPDATED' | 'CLAIM_ADDED' | 'BOOK_APPOINTMENT_ERROR' | 'CANCEL_APPOINTMENT_ERROR' | 'NOT_IMPLEMENTED' | 'COMMENT_ADDED_SUCCESSFULLY' | 'COMMENT_UPDATED_SUCCESSFULLY' | 'COMMENT_DELETED_SUCCESSFULLY' | 'MEDICAL_CODE_ADDED_SUCCESSFULLY' | 'MEDICAL_CODE_UPDATED_SUCCESSFULLY' | 'PROVIDER_REVIEW_ADDED_SUCCESSFULLY' | 'PROVIDER_REVIEW_STATUS_UPDATED_SUCCESSFULLY' | 'CHECK_IN_STATUS' | 'REFILL_RX_ADDED' | 'REFILL_RX_UPDATED' | 'ROI_ADDED' | 'ROI_UPDATED' | 'ROI_STATUS_UPDATED' | 'ROI_NOT_FOUND' | 'CONSENT_FORM_TEMPLATE_ADDED' | 'CONSENT_FORM_TEMPLATE_UPDATED' | 'CONSENT_FORM_TEMPLATE_STATUS' | 'INTERNAL_SERVER_ERROR' | 'FILE_UPLOADED' | 'EMPTY_FILE' | 'MEDICAL_CODES_CREATED' | 'MEDICAL_CODES_UPDATED' | 'MEDICAL_CODE_ENABLED' | 'MEDICAL_CODE_DISABLED' | 'MEDICAL_CODE_ARCHIVED' | 'MEDICAL_CODE_UNARCHIVED' | 'PATIENT_DIAGNOSIS_CREATED' | 'PATIENT_DIAGNOSIS_UPDATED' | 'PATIENT_DIAGNOSIS_ENABLED' | 'PATIENT_DIAGNOSIS_DISABLED' | 'PATIENT_DIAGNOSIS_ARCHIVED' | 'PATIENT_DIAGNOSIS_UNARCHIVED' | 'PATIENT_DIAGNOSIS_FETCHED' | 'PATIENT_ALLERGY_CREATED' | 'PATIENT_ALLERGY_FETCHED' | 'PATIENT_ALLERGY_UPDATED' | 'PATIENT_ALLERGY_ENABLED' | 'PATIENT_ALLERGY_DISABLED' | 'PATIENT_ALLERGY_ARCHIVED' | 'PATIENT_ALLERGY_UNARCHIVED' | 'PATIENT_ALLERGY_DELETED' | 'PATIENT_VACCINE_CREATED' | 'PATIENT_VACCINE_UPDATED' | 'PATIENT_VACCINE_ENABLED' | 'PATIENT_VACCINE_DISABLED' | 'PATIENT_VACCINE_ARCHIVED' | 'PATIENT_VACCINE_UNARCHIVED' | 'PATIENT_VACCINE_DELETED' | 'PATIENT_VACCINE_FETCHED' | 'VACCINE_CREATED' | 'VACCINE_UPDATED' | 'VACCINE_FETCHED' | 'VACCINE_DELETED' | 'PATIENT_VITAL_CREATED' | 'PATIENT_VITAL_UPDATED' | 'STICKY_NOTE_CREATED' | 'STICKY_NOTE_UPDATED' | 'STICKY_NOTE_ENABLED' | 'STICKY_NOTE_DISABLED' | 'STICKY_NOTE_ARCHIVED' | 'STICKY_NOTE_UNARCHIVED' | 'PATIENT_MEDICATION_CREATED' | 'PATIENT_MEDICATION_FETCHED' | 'PATIENT_MEDICATION_DELETED' | 'PATIENT_MEDICATION_UPDATED' | 'PATIENT_MEDICATION_ENABLED' | 'PATIENT_MEDICATION_DISABLED' | 'PATIENT_MEDICATION_ARCHIVED' | 'PATIENT_MEDICATION_UNARCHIVED' | 'PATIENT_MEDICAL_HISTORY_CREATED' | 'PATIENT_MEDICAL_HISTORY_UPDATED' | 'PATIENT_MEDICAL_HISTORY_ENABLED' | 'PATIENT_MEDICAL_HISTORY_DISABLED' | 'PATIENT_MEDICAL_HISTORY_ARCHIVED' | 'PATIENT_MEDICAL_HISTORY_UNARCHIVED' | 'PATIENT_MEDICAL_HISTORY_FETCHED' | 'PATIENT_SURGICAL_HISTORY_CREATED' | 'PATIENT_SURGICAL_HISTORY_UPDATED' | 'PATIENT_SURGICAL_HISTORY_ENABLED' | 'PATIENT_SURGICAL_HISTORY_DISABLED' | 'PATIENT_SURGICAL_HISTORY_ARCHIVED' | 'PATIENT_SURGICAL_HISTORY_UNARCHIVED' | 'PATIENT_SURGICAL_HISTORY_FETCHED' | 'PATIENT_FAMILY_HISTORY_CREATED' | 'PATIENT_FAMILY_HISTORY_UPDATED' | 'PATIENT_FAMILY_HISTORY_ENABLED' | 'PATIENT_FAMILY_HISTORY_DISABLED' | 'PATIENT_FAMILY_HISTORY_ARCHIVED' | 'PATIENT_FAMILY_HISTORY_UNARCHIVED' | 'PATIENT_FAMILY_HISTORY_FETCHED' | 'PATIENT_LINK_PHARMACY_CREATED' | 'PATIENT_LINK_PHARMACY_UPDATED' | 'PATIENT_SOCIAL_HISTORY_CREATED' | 'PATIENT_SOCIAL_HISTORY_UPDATED' | 'PATIENT_SOCIAL_HISTORY_ENABLED' | 'PATIENT_SOCIAL_HISTORY_DISABLED' | 'PATIENT_SOCIAL_HISTORY_ARCHIVED' | 'PATIENT_SOCIAL_HISTORY_UNARCHIVED' | 'DOCUMENT_CREATED' | 'DOCUMENT_UPDATED' | 'DOCUMENT_DELETED' | 'DOCUMENT_VIEWED' | 'DOCUMENT_FETCHED' | 'DOCUMENT_TYPE_CREATED' | 'DOCUMENT_TYPE_UPDATED' | 'DOCUMENT_TYPE_DELETED' | 'DOCUMENT_TYPE_VIEWED' | 'DOCUMENT_TYPE_FETCHED' | 'DOCUMENT_TYPE_ENABLED' | 'DOCUMENT_TYPE_DISABLED' | 'DOCUMENT_TYPE_ARCHIVED' | 'DOCUMENT_TYPE_UNARCHIVED' | 'DOCUMENT_TAG_CREATED' | 'DOCUMENT_TAG_UPDATED' | 'DOCUMENT_TAG_ENABLED' | 'DOCUMENT_TAG_DISABLED' | 'DOCUMENT_TAG_ARCHIVED' | 'DOCUMENT_TAG_UNARCHIVED' | 'IMAGING_ORDER_CREATED' | 'IMAGING_ORDER_UPDATED' | 'IMAGING_ORDER_DELETED' | 'IMAGING_ORDER_VIEWED' | 'IMAGING_ORDER_FETCHED' | 'IMAGING_ORDER_COMPLETED' | 'IMAGING_ORDER_CANCELLED' | 'IMAGING_ORDER_APPROVED' | 'IMAGING_ORDER_REJECTED' | 'IMAGING_ORDER_SCHEDULED' | 'IMAGING_RESULT_CREATED' | 'IMAGING_RESULT_UPDATED' | 'IMAGING_RESULT_DELETED' | 'IMAGING_RESULT_VIEWED' | 'IMAGING_RESULT_FETCHED' | 'IMAGING_RESULT_APPROVED' | 'IMAGING_RESULT_REJECTED' | 'IMAGING_RESULT_REVIEWED' | 'IMAGING_RESULT_ARCHIVED' | 'IMAGING_RESULT_UNARCHIVED' | 'PATIENT_LAB_ORDER_CREATED' | 'PATIENT_LAB_ORDER_UPDATED' | 'PATIENT_LAB_ORDER_NOT_FOUND' | 'PATIENT_LAB_ORDER_ENABLED' | 'PATIENT_LAB_ORDER_DISABLED' | 'PATIENT_LAB_ORDER_ARCHIVED' | 'PATIENT_LAB_ORDER_UNARCHIVED' | 'CLINICAL_NOTE_CREATED' | 'CLINICAL_NOTE_UPDATED' | 'CLINICAL_NOTE_NOT_FOUND' | 'CLINICAL_NOTE_ENABLED' | 'CLINICAL_NOTE_DISABLED' | 'CLINICAL_NOTE_ARCHIVED' | 'CLINICAL_NOTE_UNARCHIVED' | 'LOCATION_GROUP_ADDED' | 'LOCATION_GROUP_UPDATED' | 'LOCATION_GROUP_DELETED' | 'LOCATION_GROUP_FETCHED' | 'USER_DOCUMENT_UPLOAD' | 'ROLE_ADDED' | 'PRIVILEGE_NOT_FOUND' | 'ROLE_UPDATED' | 'ROLE_NOT_FOUND' | 'CUSTOM_FORM_CREATED' | 'CUSTOM_FORM_STATUS_UPDATED' | 'CUSTOM_FORM_UPDATED' | 'CUSTOM_FORM_ENABLED' | 'CUSTOM_FORM_DISABLED' | 'CUSTOM_FORM_ARCHIVED' | 'CUSTOM_FORM_UNARCHIVED' | 'CUSTOM_FORM_RESTORED' | 'CUSTOM_FORM_COPY' | 'CUSTOM_FORM_TEMPLATE_CREATED' | 'CUSTOM_FORM_TEMPLATE_STATUS_UPDATED' | 'CUSTOM_FORM_TEMPLATE_UPDATED' | 'CUSTOM_FORM_TEMPLATE_ENABLED' | 'CUSTOM_FORM_TEMPLATE_DISABLED' | 'CUSTOM_FORM_TEMPLATE_ARCHIVED' | 'CUSTOM_FORM_TEMPLATE_RESTORED' | 'MICROS_FORM_CREATED' | 'MICROS_FORM_UPDATED' | 'MICROS_FORM_STATUS_UPDATED' | 'MICROS_FORM_ARCHIVE_STATUS_UPDATED' | 'VISIT_NOTE_FORM_CREATED' | 'VISIT_NOTE_FORM_UPDATED' | 'VISIT_NOTE_FORM_STATUS_UPDATED' | 'VISIT_NOTE_FORM_ARCHIVE_STATUS_UPDATED' | 'REVIEW_OF_SYSTEM_FORM_CREATED' | 'REVIEW_OF_SYSTEM_FORM_UPDATED' | 'REVIEW_OF_SYSTEM_FORM_STATUS_UPDATED' | 'REVIEW_OF_SYSTEM_FORM_ARCHIVE_STATUS_UPDATED' | 'CUSTOM_QUESTIONNAIRE_FORM_CREATED' | 'CUSTOM_QUESTIONNAIRE_FORM_UPDATED' | 'CUSTOM_QUESTIONNAIRE_FORM_STATUS_UPDATED' | 'CUSTOM_QUESTIONNAIRE_FORM_ARCHIVE_STATUS_UPDATED' | 'CAREPLAN_FORM_CREATED' | 'CAREPLAN_FORM_UPDATED' | 'CAREPLAN_FORM_STATUS_UPDATED' | 'CAREPLAN_FORM_ARCHIVE_STATUS_UPDATED' | 'ANNOTABLE_IMAGE_FORM_CREATED' | 'ANNOTABLE_IMAGE_FORM_UPDATED' | 'ANNOTABLE_IMAGE_FORM_STATUS_UPDATED' | 'ANNOTABLE_IMAGE_FORM_ARCHIVE_STATUS_UPDATED' | 'ORDER_SET_FORM_CREATED' | 'ORDER_SET_FORM_UPDATED' | 'ORDER_SET_FORM_STATUS_UPDATED' | 'ORDER_SET_FORM_ARCHIVE_STATUS_UPDATED' | 'PHYSICAL_EXAM_FORM_CREATED' | 'PHYSICAL_EXAM_FORM_UPDATED' | 'PHYSICAL_EXAM_FORM_STATUS_UPDATED' | 'PHYSICAL_EXAM_FORM_ARCHIVE_STATUS_UPDATED' | 'CHECK_CONSULT_TIME' | 'PATIENT_FLAG_CREATED' | 'PATIENT_FLAG_FETCHED' | 'PATIENT_FLAG_UPDATED' | 'PATIENT_FLAG_DELETED' | 'ICD_CODE_ADDED' | 'CPT_CODE_ADDED' | 'HCPCS_CODE_ADDED' | 'LOINC_CODE_ADDED' | 'ICD_CODE_UPDATED' | 'CPT_CODE_UPDATED' | 'HCPCS_CODE_UPDATED' | 'LOINC_CODE_UPDATED' | 'INVOICE_SETTING_CREATED' | 'INVOICE_SETTING_UPDATED' | 'INVOICE_SETTING_FETCHED' | 'INVOICE_SETTING_DELETED' | 'STUDY_ORDER_FETCHED' | 'DOCUMENT_UPLOADED' | 'IMAGE_UPLOADED' | 'AUDIT_HISTORY_FETCHED' | 'PAYMENT_TRANSACTION_CREATED' | 'PAYMENT_TRANSACTION_UPDATED' | 'PAYMENT_TRANSACTION_DELETED' | 'PAYMENT_TRANSACTION_FETCHED';

export type AddressDto = {
    id?: number;
    line1?: string;
    line2?: string;
    city?: string;
    state?: string;
    country?: string;
    zipcode?: string;
};

export type ProviderRequestDto = {
    uuid?: string;
    firstName: string;
    lastName: string;
    phoneNumber: string;
    phoneType?: 'MOBILE' | 'LANDLINE';
    npi: string;
    notHaveNpi?: boolean;
    longitude?: string;
    latitude?: string;
    gender?: 'MALE' | 'FEMALE' | 'OTHER';
    status?: boolean;
    bio: string;
    distanceInMiles?: string;
    email: string;
    avatar?: string;
    treatAgeFrom?: number;
    treatAgeTo?: number;
    addressDto: AddressDto;
    acceptingEnrollmentFrom?: 'RETAIL' | 'EMPLOYER';
    specialitiesUuid?: Array<(string)>;
    specialityList?: Array<SpecialityDto>;
    locationUuids?: Array<(string)>;
    education?: Array<(string)>;
    locationNames?: Array<(string)>;
};

export type phoneType = 'MOBILE' | 'LANDLINE';

export type gender = 'MALE' | 'FEMALE' | 'OTHER';

export type acceptingEnrollmentFrom = 'RETAIL' | 'EMPLOYER';

export type SpecialityDto = {
    uuid?: string;
    name?: string;
    active?: boolean;
};

export type PlanDto = {
    planUuid?: string;
    planName?: string;
    planType?: 'RETAIL' | 'EMPLOYER';
    billingDate?: string;
    copied?: boolean;
    copiedFromPlanDetailUuid?: string;
};

export type planType = 'RETAIL' | 'EMPLOYER';

export type AdvancePaymentOptions = {
    advancePaymentOptionUuid?: string;
    billingAtEndOfBillingCycle?: boolean;
    defaultBillingPeriod?: 'ANNUAL' | 'MONTH' | 'QUARTERLY' | 'SEMI_ANNUALLY';
    minimumInitialEnrollmentPeriod?: boolean;
    numberOfMonths?: number;
    invoiceDetailMemberShipName?: string;
    description?: string;
    monthly?: boolean;
    quarterly?: boolean;
    semiAnnually?: boolean;
    annually?: boolean;
    monthlyDefaultDiscountOrSurcharge?: number;
    quarterlyDefaultDiscountOrSurcharge?: number;
    semiAnnuallyDefaultDiscountOrSurcharge?: number;
    annuallyDefaultDiscountOrSurcharge?: number;
};

export type AdvancePricingRuleDto = {
    advancePricingRuleUuid?: string;
    contactExpiration?: boolean;
    sendRenewalBehaviour?: boolean;
    contractDuration?: number;
    renewalEmailNotificationTime?: number;
    contractEndBehaviour?: 'TERMINATE' | 'AUTO_RENEW';
    planUuid?: string;
    planName?: string;
    effectiveTime?: 'PERIODS_OF_MONTHS' | 'DATE';
    effectiveDate?: string;
    specialRateList?: Array<SpecialRateDto>;
};

export type contractEndBehaviour = 'TERMINATE' | 'AUTO_RENEW';

export type effectiveTime = 'PERIODS_OF_MONTHS' | 'DATE';

export type BasicPlanDetails = {
    planUuid?: string;
    planName?: string;
    startDate?: string;
    endDate?: string;
    planStatus?: 'ACTIVE' | 'UPCOMING' | 'EXPIRED';
    planType?: 'RETAIL' | 'EMPLOYER';
};

export type planStatus = 'ACTIVE' | 'UPCOMING' | 'EXPIRED';

export type IndividualMemberShipRateDto = {
    individualMemberShipRateUuid?: string;
    specialRateAmountUuid?: string;
    defaultBillingPeriod?: 'ANNUAL' | 'MONTH' | 'QUARTERLY' | 'SEMI_ANNUALLY';
    amount?: number;
};

export type IndividualMembershipFeeDto = {
    individualMembershipFeeUuid?: string;
    fromAge?: number;
    relationShip?: 'ALL' | 'SELF' | 'SPOUSE' | 'SIBLING' | 'MOTHER' | 'FATHER' | 'GUARDIAN' | 'PARENT' | 'CHILDREN' | 'GRANDPARENT' | 'GRANDCHILDREN' | 'FRIEND' | 'PARTNER' | 'OTHER';
    toAge?: number;
    rates?: Array<IndividualMemberShipRateDto>;
};

export type relationShip = 'ALL' | 'SELF' | 'SPOUSE' | 'SIBLING' | 'MOTHER' | 'FATHER' | 'GUARDIAN' | 'PARENT' | 'CHILDREN' | 'GRANDPARENT' | 'GRANDCHILDREN' | 'FRIEND' | 'PARTNER' | 'OTHER';

export type PlanDetailsDto = {
    planUuid?: string;
    basicPlanDetails?: BasicPlanDetails;
    registrationFee?: RegistrationFeeDto;
    advancePaymentOptions?: AdvancePaymentOptions;
    individualMembershipFee?: Array<IndividualMembershipFeeDto>;
    advancePricingRuleDto?: AdvancePricingRuleDto;
};

export type RegistrationFeeDto = {
    registrationFeeUuid?: string;
    individualMembershipFee?: boolean;
    amount?: number;
};

export type SpecialRateDto = {
    specialRateUuid?: string;
    specialRateName?: string;
    relationShip?: 'ALL' | 'SELF' | 'SPOUSE' | 'SIBLING' | 'MOTHER' | 'FATHER' | 'GUARDIAN' | 'PARENT' | 'CHILDREN' | 'GRANDPARENT' | 'GRANDCHILDREN' | 'FRIEND' | 'PARTNER' | 'OTHER';
    specialRates?: Array<IndividualMemberShipRateDto>;
};

export type EmergencyContactDto = {
    emergencyContactUuid?: string;
    firstName?: string;
    lastName?: string;
    phoneNumber?: string;
    phoneType?: 'MOBILE' | 'LANDLINE';
    email?: string;
    relationShip?: 'ALL' | 'SELF' | 'SPOUSE' | 'SIBLING' | 'MOTHER' | 'FATHER' | 'GUARDIAN' | 'PARENT' | 'CHILDREN' | 'GRANDPARENT' | 'GRANDCHILDREN' | 'FRIEND' | 'PARTNER' | 'OTHER';
};

export type PatientRequestDto = {
    patientUuid?: string;
    leadUuid?: string;
    planUuid?: string;
    primaryProviderUuid?: string;
    employerUuid?: string;
    firstName: string;
    lastName: string;
    dateOfBirth: string;
    sex: 'MALE' | 'FEMALE' | 'OTHER';
    preferredLocation: 'ALABAMA' | 'ALASKA' | 'ARIZONA' | 'ARKANSAS' | 'CALIFORNIA' | 'COLORADO' | 'CONNECTICUT' | 'DELAWARE' | 'FLORIDA' | 'GEORGIA' | 'HAWAII' | 'IDAHO' | 'ILLINOIS' | 'INDIANA' | 'IOWA' | 'KANSAS' | 'KENTUCKY' | 'LOUISIANA' | 'MAINE' | 'MARYLAND' | 'MASSACHUSETTS' | 'MICHIGAN' | 'MINNESOTA' | 'MISSISSIPPI' | 'MISSOURI' | 'MONTANA' | 'NEBRASKA' | 'NEVADA' | 'NEW_HAMPSHIRE' | 'NEW_JERSEY' | 'NEW_MEXICO' | 'NEW_YORK' | 'NORTH_CAROLINA' | 'NORTH_DAKOTA' | 'OHIO' | 'OKLAHOMA' | 'OREGON' | 'PENNSYLVANIA' | 'RHODE_ISLAND' | 'SOUTH_CAROLINA' | 'SOUTH_DAKOTA' | 'TENNESSEE' | 'TEXAS' | 'UTAH' | 'VERMONT' | 'VIRGINIA' | 'WASHINGTON' | 'WEST_VIRGINIA' | 'WISCONSIN' | 'WYOMING';
    email?: string;
    avatar?: string;
    latitude?: string;
    longitude?: string;
    haveEmail?: boolean;
    phoneNumber: string;
    phoneType?: 'MOBILE' | 'LANDLINE';
    planStartDate?: string;
    planRenewalDate?: string;
    relationshipToYou?: 'ALL' | 'SELF' | 'SPOUSE' | 'SIBLING' | 'MOTHER' | 'FATHER' | 'GUARDIAN' | 'PARENT' | 'CHILDREN' | 'GRANDPARENT' | 'GRANDCHILDREN' | 'FRIEND' | 'PARTNER' | 'OTHER';
    relationShipName?: string;
    dependent?: boolean;
    addressDto?: AddressDto;
    emergencyContactDto?: EmergencyContactDto;
};

export type sex = 'MALE' | 'FEMALE' | 'OTHER';

export type preferredLocation = 'ALABAMA' | 'ALASKA' | 'ARIZONA' | 'ARKANSAS' | 'CALIFORNIA' | 'COLORADO' | 'CONNECTICUT' | 'DELAWARE' | 'FLORIDA' | 'GEORGIA' | 'HAWAII' | 'IDAHO' | 'ILLINOIS' | 'INDIANA' | 'IOWA' | 'KANSAS' | 'KENTUCKY' | 'LOUISIANA' | 'MAINE' | 'MARYLAND' | 'MASSACHUSETTS' | 'MICHIGAN' | 'MINNESOTA' | 'MISSISSIPPI' | 'MISSOURI' | 'MONTANA' | 'NEBRASKA' | 'NEVADA' | 'NEW_HAMPSHIRE' | 'NEW_JERSEY' | 'NEW_MEXICO' | 'NEW_YORK' | 'NORTH_CAROLINA' | 'NORTH_DAKOTA' | 'OHIO' | 'OKLAHOMA' | 'OREGON' | 'PENNSYLVANIA' | 'RHODE_ISLAND' | 'SOUTH_CAROLINA' | 'SOUTH_DAKOTA' | 'TENNESSEE' | 'TEXAS' | 'UTAH' | 'VERMONT' | 'VIRGINIA' | 'WASHINGTON' | 'WEST_VIRGINIA' | 'WISCONSIN' | 'WYOMING';

export type relationshipToYou = 'ALL' | 'SELF' | 'SPOUSE' | 'SIBLING' | 'MOTHER' | 'FATHER' | 'GUARDIAN' | 'PARENT' | 'CHILDREN' | 'GRANDPARENT' | 'GRANDCHILDREN' | 'FRIEND' | 'PARTNER' | 'OTHER';

export type CheckMyPlanDto = {
    planUuid?: string;
    primaryLeadUuid?: string;
    amount?: number;
    defaultBillingPeriod?: 'ANNUAL' | 'MONTH' | 'QUARTERLY' | 'SEMI_ANNUALLY';
    startDate?: string;
    renewalDate?: string;
    patientPlans?: Array<PatientPlanDto>;
    individualPatientPlans?: PatientPlanDto;
    totalAmount?: number;
};

export type LeadResponseDto = {
    leadUuid?: string;
    email?: string;
    firstName?: string;
    preferredLocation?: 'ALABAMA' | 'ALASKA' | 'ARIZONA' | 'ARKANSAS' | 'CALIFORNIA' | 'COLORADO' | 'CONNECTICUT' | 'DELAWARE' | 'FLORIDA' | 'GEORGIA' | 'HAWAII' | 'IDAHO' | 'ILLINOIS' | 'INDIANA' | 'IOWA' | 'KANSAS' | 'KENTUCKY' | 'LOUISIANA' | 'MAINE' | 'MARYLAND' | 'MASSACHUSETTS' | 'MICHIGAN' | 'MINNESOTA' | 'MISSISSIPPI' | 'MISSOURI' | 'MONTANA' | 'NEBRASKA' | 'NEVADA' | 'NEW_HAMPSHIRE' | 'NEW_JERSEY' | 'NEW_MEXICO' | 'NEW_YORK' | 'NORTH_CAROLINA' | 'NORTH_DAKOTA' | 'OHIO' | 'OKLAHOMA' | 'OREGON' | 'PENNSYLVANIA' | 'RHODE_ISLAND' | 'SOUTH_CAROLINA' | 'SOUTH_DAKOTA' | 'TENNESSEE' | 'TEXAS' | 'UTAH' | 'VERMONT' | 'VIRGINIA' | 'WASHINGTON' | 'WEST_VIRGINIA' | 'WISCONSIN' | 'WYOMING';
    lastName?: string;
    phoneNumber?: string;
    sex?: 'MALE' | 'FEMALE' | 'OTHER';
    phoneType?: 'MOBILE' | 'LANDLINE';
    birthDate?: string;
    haveEmail?: boolean;
    archive?: boolean;
    relationshipToYou?: 'ALL' | 'SELF' | 'SPOUSE' | 'SIBLING' | 'MOTHER' | 'FATHER' | 'GUARDIAN' | 'PARENT' | 'CHILDREN' | 'GRANDPARENT' | 'GRANDCHILDREN' | 'FRIEND' | 'PARTNER' | 'OTHER';
    relationshipName?: string;
    dependent?: boolean;
    checkMyPlanDto?: CheckMyPlanDto;
};

export type PatientPlanDto = {
    patientUuid?: string;
    leadUuid?: string;
    planAmount?: number;
    relationShip?: 'ALL' | 'SELF' | 'SPOUSE' | 'SIBLING' | 'MOTHER' | 'FATHER' | 'GUARDIAN' | 'PARENT' | 'CHILDREN' | 'GRANDPARENT' | 'GRANDCHILDREN' | 'FRIEND' | 'PARTNER' | 'OTHER';
    relationShipName?: string;
    patientFullName?: string;
};

export type User = {
    id?: number;
    uuid?: string;
    email?: string;
    firstName: string;
    lastName: string;
    phone: string;
    sex?: 'MALE' | 'FEMALE' | 'OTHER';
    phoneType?: 'MOBILE' | 'LANDLINE';
    avatar?: string;
    roleType?: 'ADMIN' | 'USER' | 'EHR' | 'EMPLOYER' | 'PATIENT' | 'AGENT';
    role?: string;
    readonly lastLogin?: string;
    birthDate?: string;
    active?: boolean;
    haveEmail?: boolean;
    readonly emailVerified?: boolean;
    readonly phoneVerified?: boolean;
    archive?: boolean;
};

export type roleType = 'ADMIN' | 'USER' | 'EHR' | 'EMPLOYER' | 'PATIENT' | 'AGENT';

export type VaccineDto = {
    uuid?: string;
    name?: string;
    type?: 'ADULT' | 'CHILD';
};

export type type = 'ADULT' | 'CHILD';

export type ReferralRequest = {
    patientUuid: string;
    nurseProviderUuid?: string;
    contactDirectoryUuid: string;
    icdCodeIdSet?: Array<(number)>;
    procedureCodeIdSet?: Array<(number)>;
    chartItem?: string;
    referralNote?: string;
    providerName?: string;
    fileKey?: string;
    fileType?: string;
    stat: boolean;
};

export type PharmacyDto = {
    uuid?: string;
    email?: string;
    pharmacyType?: 'INTERNAL' | 'EXTERNAL';
    name?: string;
    phone?: string;
    fax?: string;
    addressDto?: AddressDto;
    addressUuid?: string;
};

export type pharmacyType = 'INTERNAL' | 'EXTERNAL';

export type LocalTime = {
    hour?: number;
    minute?: number;
    second?: number;
    nano?: number;
};

export type PatientVaccinationDto = {
    uuid?: string;
    status?: 'ADMINISTERED' | 'HISTORICAL' | 'DECLINED' | 'PATIENT_HAS_IMMUNITY' | 'PATIENT_HAS_DISEASE' | 'IMMUNITY_BY_TIER';
    age?: number;
    doseNumber?: number;
    vaccineDto?: VaccineDto;
    createdDate?: string;
    date?: string;
    time?: LocalTime;
    reasonRefused?: string;
    note?: string;
    patientUuid: string;
    vaccineUuid: string;
    providerUuid?: string;
};

export type status = 'ADMINISTERED' | 'HISTORICAL' | 'DECLINED' | 'PATIENT_HAS_IMMUNITY' | 'PATIENT_HAS_DISEASE' | 'IMMUNITY_BY_TIER';

export type PatientFlagDto = {
    uuid?: string;
    patientUuid: string;
    flagName: string;
};

export type PastSurgicalHistoryDto = {
    uuid?: string;
    surgeryName: string;
    surgeryDate?: string;
    recordedDate?: string;
    note?: string;
    patientUuid?: string;
};

export type PastMedicalHistoryDto = {
    uuid?: string;
    conditionName: string;
    onsetDate?: string;
    recordedDate?: string;
    note?: string;
    patientUuid?: string;
};

export type NoteRequest = {
    patientUuid: string;
    note: string;
    documentNote: 'INTERNAL_NOTE' | 'EXTERNAL_NOTE';
};

export type documentNote = 'INTERNAL_NOTE' | 'EXTERNAL_NOTE';

export type MedicationRequest = {
    patientUuid: string;
    medicineName: string;
    sig?: string;
    quantity?: number;
    refill?: number;
    permanent: boolean;
    durationValue?: number;
    durationUnit?: 'DAYS' | 'WEEKS' | 'MONTHS' | 'YEARS';
    startDate?: string;
    endDate?: string;
    icdCodeIdSet?: Array<(number)>;
    pharmacyNote?: string;
};

export type durationUnit = 'DAYS' | 'WEEKS' | 'MONTHS' | 'YEARS';

export type LocationRequestDto = {
    uuid?: string;
    name: string;
    phoneType: 'MOBILE' | 'LANDLINE';
    phoneNumber: string;
    addressDto?: AddressDto;
    locationGroupUuid: string;
    locationGroupName?: string;
    onlineSignUp?: boolean;
    active?: boolean;
};

export type LocationGroupRequest = {
    uuid?: string;
    name?: string;
    description?: string;
    state?: string;
};

export type InvoiceRequest = {
    patientUuid?: string;
    invoiceDate?: string;
    invoiceChargeType?: 'MEMBERSHIP_CHARGE' | 'PROCEDURE_CHARGE' | 'MEDICATION_CHARGE' | 'LAB_CHARGE' | 'PANEL_CHARGE';
    invoiceStatus?: 'PAID' | 'PARTIALLY_PAID' | 'UNPAID';
    totalAmount?: number;
    paidAmount?: number;
    balanceAmount?: number;
};

export type invoiceChargeType = 'MEMBERSHIP_CHARGE' | 'PROCEDURE_CHARGE' | 'MEDICATION_CHARGE' | 'LAB_CHARGE' | 'PANEL_CHARGE';

export type invoiceStatus = 'PAID' | 'PARTIALLY_PAID' | 'UNPAID';

export type InsuranceDetailsDto = {
    insuranceUuid?: string;
    patientUuid?: string;
    insuranceName?: string;
    insuranceType?: 'PRIMARY' | 'SECONDARY';
    memberId?: string;
    groupId?: string;
    groupName?: string;
    expiryDate?: string;
    frontSideKey?: string;
    backSideKey?: string;
    defaultInsurance?: boolean;
};

export type insuranceType = 'PRIMARY' | 'SECONDARY';

export type ImagingResultRequest = {
    patientUuid: string;
    imagingOrderResult: boolean;
    imagingOrderUuid?: string;
    contactDirectoryUuid?: string;
    imagingType?: string;
    testName?: string;
    imagingResultInterpretation?: 'NORMAL' | 'ABNORMAL' | 'CRITICAL' | 'INCONCLUSIVE' | 'NOT_AVAILABLE';
    providerUuid?: string;
    recordedDate?: string;
    recordedTime?: LocalTime;
    fileKey?: string;
    fileType?: string;
    note?: string;
};

export type imagingResultInterpretation = 'NORMAL' | 'ABNORMAL' | 'CRITICAL' | 'INCONCLUSIVE' | 'NOT_AVAILABLE';

export type ImagingOrderRequest = {
    patientUuid: string;
    providerUuid: string;
    contactDirectoryUuid: string;
    orderStudyIdSet: Array<(number)>;
    icdCodeIdSet: Array<(number)>;
    instructionsToCenter?: string;
    routineChannels: boolean;
    faxPrelimToOffice: boolean;
    patientIsPregnant: boolean;
    patientBackWithFilm: boolean;
    patientHomeIfNegative: boolean;
    collectionDate?: string;
    collectionTime?: LocalTime;
    imagingOrderStatus?: 'SEND' | 'DRAFT' | 'RECEIVED';
    chartNote?: string;
};

export type imagingOrderStatus = 'SEND' | 'DRAFT' | 'RECEIVED';

export type IcdCodeDto = {
    id?: number;
    uuid?: string;
    code?: string;
    description?: string;
    type?: 'ICD_10';
};

export type type2 = 'ICD_10';

export type FamilyHistoryDto = {
    uuid?: string;
    problemName: string;
    relation: 'ALL' | 'SELF' | 'SPOUSE' | 'SIBLING' | 'MOTHER' | 'FATHER' | 'GUARDIAN' | 'PARENT' | 'CHILDREN' | 'GRANDPARENT' | 'GRANDCHILDREN' | 'FRIEND' | 'PARTNER' | 'OTHER';
    onsetAge?: number;
    alive?: boolean;
    note?: string;
    recordedDate?: string;
    patientUuid?: string;
};

export type relation = 'ALL' | 'SELF' | 'SPOUSE' | 'SIBLING' | 'MOTHER' | 'FATHER' | 'GUARDIAN' | 'PARENT' | 'CHILDREN' | 'GRANDPARENT' | 'GRANDCHILDREN' | 'FRIEND' | 'PARTNER' | 'OTHER';

export type DrugIntoleranceDto = {
    uuid?: string;
    substance: 'MORPHINE' | 'HEROIN' | 'OXYCODONE' | 'FENTANYL' | 'DIAZEPAM' | 'ALPRAZOLAM' | 'LORAZEPAM' | 'PHENOBARBITAL' | 'THIOPENTAL' | 'ALCOHOL' | 'AMPHETAMINE' | 'METHAMPHETAMINE' | 'METHYLPHENIDATE' | 'COCAINE' | 'CAFFEINE' | 'NICOTINE' | 'LSD' | 'PSILOCYBIN' | 'MESCALINE' | 'MDMA' | 'CANNABIS' | 'FLUOXETINE' | 'ANTIPSYCHOTICS' | 'BETA_BLOCKERS' | 'NITROGLYCERIN' | 'OXYMETAZOLINE' | 'LAXATIVES' | 'PROTON_PUMP_INHIBITORS' | 'DIPHENHYDRAMINE';
    reaction?: Array<ReactionDto>;
    severity?: 'MILD' | 'MODERATE' | 'SEVERE';
    status?: 'ACTIVE' | 'HISTORICAL' | 'RESOLVED';
    onsetDate?: string;
    patientUuid?: string;
};

export type substance = 'MORPHINE' | 'HEROIN' | 'OXYCODONE' | 'FENTANYL' | 'DIAZEPAM' | 'ALPRAZOLAM' | 'LORAZEPAM' | 'PHENOBARBITAL' | 'THIOPENTAL' | 'ALCOHOL' | 'AMPHETAMINE' | 'METHAMPHETAMINE' | 'METHYLPHENIDATE' | 'COCAINE' | 'CAFFEINE' | 'NICOTINE' | 'LSD' | 'PSILOCYBIN' | 'MESCALINE' | 'MDMA' | 'CANNABIS' | 'FLUOXETINE' | 'ANTIPSYCHOTICS' | 'BETA_BLOCKERS' | 'NITROGLYCERIN' | 'OXYMETAZOLINE' | 'LAXATIVES' | 'PROTON_PUMP_INHIBITORS' | 'DIPHENHYDRAMINE';

export type severity = 'MILD' | 'MODERATE' | 'SEVERE';

export type status2 = 'ACTIVE' | 'HISTORICAL' | 'RESOLVED';

export type ReactionDto = {
    reaction?: string;
};

export type UpdateDocumentTypeRequest = {
    uuid: string;
    documentType: string;
};

export type DiagnosisDto = {
    uuid?: string;
    status?: 'ACTIVE' | 'HISTORICAL' | 'RESOLVED';
    type?: 'ACUTE' | 'CHRONIC';
    onsetDate?: string;
    note?: string;
    recordedDate?: string;
    resolvedDate?: string;
    icdCodeDto?: IcdCodeDto;
    patientUuid?: string;
    icdCodeUuid: string;
};

export type type3 = 'ACUTE' | 'CHRONIC';

export type AllergyDto = {
    uuid?: string;
    name: string;
    type?: 'DRUG' | 'ENVIRONMENT' | 'FOOD';
    reaction?: Array<ReactionDto>;
    severity?: 'MILD' | 'MODERATE' | 'SEVERE';
    status?: boolean;
    onsetDate?: string;
    patientUuid?: string;
};

export type type4 = 'DRUG' | 'ENVIRONMENT' | 'FOOD';

export type PatientLinkedPharmacyDto = {
    uuid?: string;
    pharmacyUuid: string;
    defaultPharmacy?: boolean;
    patientUuid?: string;
};

export type DocumentTypeRequest = {
    documentTypes: Array<(string)>;
};

export type DocumentRequest = {
    patientUuid: string;
    documentTypeUuid: string;
    fileName: string;
    fileKey: string;
    fileType?: string;
    date?: string;
};

export type ContactDirectoryRequest = {
    referralType: 'IMAGING' | 'SPECIALIST';
    name: string;
    lastName?: string;
    fax?: string;
    phone?: string;
    email?: string;
    addressDto?: AddressDto;
};

export type referralType = 'IMAGING' | 'SPECIALIST';

export type UpdatePaymentTransactionData = {
    requestBody: PaymentTransactionRequestDto;
};

export type UpdatePaymentTransactionResponse = Response;

export type CreatePaymentTransactionData = {
    requestBody: PaymentTransactionRequestDto;
};

export type CreatePaymentTransactionResponse = Response;

export type GetPaymentTransactionByUuidData = {
    paymentTransactionUuid: string;
};

export type GetPaymentTransactionByUuidResponse = Response;

export type DeletePaymentTransactionData = {
    paymentTransactionUuid: string;
};

export type DeletePaymentTransactionResponse = Response;

export type GetAllPaymentTransactionsData = {
    page?: number;
    pageSize?: number;
    searchString?: string;
    sortBy?: string;
    sortDirection?: string;
};

export type GetAllPaymentTransactionsResponse = Response;

export type UpdateUserArchiveStatusData = {
    status: boolean;
    userId: string;
};

export type UpdateUserArchiveStatusResponse = Response;

export type UpdateUserData = {
    requestBody: User;
};

export type UpdateUserResponse = Response;

export type AddUserData = {
    requestBody: User;
};

export type AddUserResponse = Response;

export type UpdateUserStatusData = {
    status: boolean;
    userId: string;
};

export type UpdateUserStatusResponse = Response;

export type GetAllUsersData = {
    archive?: boolean;
    page?: number;
    role?: string;
    roleType?: 'ADMIN' | 'USER' | 'EHR' | 'EMPLOYER' | 'PATIENT' | 'AGENT';
    searchString?: string;
    size?: number;
    sortBy?: string;
    sortDirection?: string;
    status?: boolean;
};

export type GetAllUsersResponse = Response;

export type GetUserData = {
    userId: string;
};

export type GetUserResponse = Response;

export type GetProfileResponse = Response;

export type UpdateProviderData = {
    requestBody: ProviderRequestDto;
};

export type UpdateProviderResponse = Response;

export type AddProviderData = {
    requestBody: ProviderRequestDto;
};

export type AddProviderResponse = Response;

export type UpdateProviderStatusData = {
    providerUuid: string;
    status: boolean;
};

export type UpdateProviderStatusResponse = Response;

export type GetProviderByUuidData = {
    providerUuid: string;
};

export type GetProviderByUuidResponse = Response;

export type DeleteProviderByUuidData = {
    providerUuid: string;
};

export type DeleteProviderByUuidResponse = Response;

export type GetAllProvidersData = {
    filterBy?: string;
    filterValue?: Array<(string)>;
    latitude?: string;
    longitude?: string;
    page?: number;
    pageSize?: number;
    patientAge?: number;
    searchString?: string;
    sortBy?: string;
    sortDirection?: string;
    status?: boolean;
    zipcode?: string;
};

export type GetAllProvidersResponse = Response;

export type GetPlanAmountData = {
    primaryLeadUuid: string;
};

export type GetPlanAmountResponse = Response;

export type UpdatePlanData = {
    requestBody: PlanDto;
};

export type UpdatePlanResponse = Response;

export type CreatePlanData = {
    requestBody: PlanDto;
};

export type CreatePlanResponse = Response;

export type UpdatePlanDetailsData = {
    requestBody: PlanDetailsDto;
};

export type UpdatePlanDetailsResponse = Response;

export type GetPlanByUuidData = {
    planUuid: string;
};

export type GetPlanByUuidResponse = Response;

export type DeletePlanByUuidData = {
    planUuid: string;
};

export type DeletePlanByUuidResponse = Response;

export type GetAllPlanData = {
    planUuid: string;
};

export type GetAllPlanResponse = Response;

export type CheckMyPlanData = {
    defaultBillingPeriod: 'ANNUAL' | 'MONTH' | 'QUARTERLY' | 'SEMI_ANNUALLY';
    primaryLeadUuid: string;
};

export type CheckMyPlanResponse = Response;

export type GetAllPlan1Data = {
    search?: string;
};

export type GetAllPlan1Response = Response;

export type UpdatePatientData = {
    requestBody: PatientRequestDto;
};

export type UpdatePatientResponse = Response;

export type AddPatientData = {
    requestBody: PatientRequestDto;
};

export type AddPatientResponse = Response;

export type CreateUpdatePatientData = {
    requestBody: Array<PatientRequestDto>;
};

export type CreateUpdatePatientResponse = Response;

export type GetPatientByUuidData = {
    patientUuid: string;
};

export type GetPatientByUuidResponse = Response;

export type DeletePatientByUuidData = {
    patientUuid: string;
};

export type DeletePatientByUuidResponse = Response;

export type GetPatientPlanDetailsData = {
    patientUuid: string;
};

export type GetPatientPlanDetailsResponse = Response;

export type GetPatientOverviewData = {
    patientUuid: string;
};

export type GetPatientOverviewResponse = Response;

export type GetPatientMemberShipData = {
    patientUuid: string;
};

export type GetPatientMemberShipResponse = Response;

export type GetAllPatientData = {
    employerUuids?: Array<(string)>;
    endDate?: string;
    page?: number;
    pageSize?: number;
    searchString?: string;
    sortBy?: string;
    sortDirection?: string;
    startDate?: string;
    status?: boolean;
};

export type GetAllPatientResponse = Response;

export type UpdateLeadData = {
    requestBody: LeadResponseDto;
};

export type UpdateLeadResponse = Response;

export type CreateLeadData = {
    requestBody: LeadResponseDto;
};

export type CreateLeadResponse = Response;

export type CreateUpdateLeadData = {
    requestBody: Array<LeadResponseDto>;
};

export type CreateUpdateLeadResponse = Response;

export type GetLeadByUuidData = {
    leadUuid: string;
};

export type GetLeadByUuidResponse = Response;

export type DeleteLeadByUuidData = {
    leadUuid: string;
};

export type DeleteLeadByUuidResponse = Response;

export type GetAllLeadData = {
    page?: number;
    pageSize?: number;
    searchString?: string;
    sortBy?: string;
    sortDirection?: string;
};

export type GetAllLeadResponse = Response;

export type GetVaccineByUuidData = {
    uuid: string;
};

export type GetVaccineByUuidResponse = Response;

export type UpdateVaccineData = {
    requestBody: VaccineDto;
    uuid: string;
};

export type UpdateVaccineResponse = Response;

export type DeleteVaccineByUuidData = {
    uuid: string;
};

export type DeleteVaccineByUuidResponse = Response;

export type CreateVaccineData = {
    requestBody: VaccineDto;
};

export type CreateVaccineResponse = Response;

export type GetAllVaccinesData = {
    page?: number;
    pageSize?: number;
    type?: 'ADULT' | 'CHILD';
};

export type GetAllVaccinesResponse = Response;

export type UpdateReferralByUuidData = {
    referralByUuid: string;
    requestBody: ReferralRequest;
};

export type UpdateReferralByUuidResponse = Response;

export type SaveReferralData = {
    requestBody: ReferralRequest;
};

export type SaveReferralResponse = Response;

export type GetReferralByUuidData = {
    referralByUuid: string;
};

export type GetReferralByUuidResponse = Response;

export type DeleteReferralByUuidData = {
    referralByUuid: string;
};

export type DeleteReferralByUuidResponse = Response;

export type GetAllReferralsData = {
    createdStartDate?: string;
    email?: string;
    fax?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUuid: string;
    phone?: string;
    referralType?: 'IMAGING' | 'SPECIALIST';
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    stat?: boolean;
};

export type GetAllReferralsResponse = Response;

export type GetPharmacyByUuidData = {
    uuid: string;
};

export type GetPharmacyByUuidResponse = Response;

export type UpdatePharmacyData = {
    requestBody: PharmacyDto;
    uuid: string;
};

export type UpdatePharmacyResponse = Response;

export type DeletePharmacyData = {
    uuid: string;
};

export type DeletePharmacyResponse = Response;

export type AddPharmacyData = {
    requestBody: PharmacyDto;
};

export type AddPharmacyResponse = Response;

export type GetAllPharmaciesData = {
    page?: number;
    pageSize?: number;
    sortBy?: string;
    sortDirection?: string;
};

export type GetAllPharmaciesResponse = Response;

export type GetPatientVaccinationByUuidData = {
    uuid: string;
};

export type GetPatientVaccinationByUuidResponse = Response;

export type UpdatePatientVaccinationData = {
    requestBody: PatientVaccinationDto;
    uuid: string;
};

export type UpdatePatientVaccinationResponse = Response;

export type DeletePatientVaccinationData = {
    uuid: string;
};

export type DeletePatientVaccinationResponse = Response;

export type CreatePatientVaccinationData = {
    requestBody: PatientVaccinationDto;
};

export type CreatePatientVaccinationResponse = Response;

export type GetAllPatientVaccinationData = {
    page?: number;
    pageSize?: number;
    patientUuid: string;
    sortBy?: string;
    sortDirection?: string;
};

export type GetAllPatientVaccinationResponse = Response;

export type GetAllPatientVaccinationForVaccineTableData = {
    patientUuid: string;
};

export type GetAllPatientVaccinationForVaccineTableResponse = Response;

export type GetPatientFlagByUuidData = {
    uuid: string;
};

export type GetPatientFlagByUuidResponse = Response;

export type UpdatePatientFlagData = {
    requestBody: PatientFlagDto;
    uuid: string;
};

export type UpdatePatientFlagResponse = Response;

export type DeletePatientFlagData = {
    uuid: string;
};

export type DeletePatientFlagResponse = Response;

export type AddPatientFlagData = {
    requestBody: PatientFlagDto;
};

export type AddPatientFlagResponse = Response;

export type GetAllPatientFlagsData = {
    page?: number;
    pageSize?: number;
    patientUuid: string;
    sortBy?: string;
    sortDirection?: string;
};

export type GetAllPatientFlagsResponse = Response;

export type GetPastSurgicalHistoryByUuidData = {
    uuid: string;
};

export type GetPastSurgicalHistoryByUuidResponse = Response;

export type UpdatePastSurgicalHistoryData = {
    requestBody: PastSurgicalHistoryDto;
    uuid: string;
};

export type UpdatePastSurgicalHistoryResponse = Response;

export type DeletePastSurgicalHistoryByUuidData = {
    uuid: string;
};

export type DeletePastSurgicalHistoryByUuidResponse = Response;

export type AddPastSurgicalHistoryData = {
    requestBody: PastSurgicalHistoryDto;
};

export type AddPastSurgicalHistoryResponse = Response;

export type GetAllPastSurgicalHistoryData = {
    page?: number;
    pageSize?: number;
    patientUuid: string;
    sortBy?: string;
    sortDirection?: string;
};

export type GetAllPastSurgicalHistoryResponse = Response;

export type GetPastMedicalHistoryByUuidData = {
    uuid: string;
};

export type GetPastMedicalHistoryByUuidResponse = Response;

export type UpdatePastMedicalHistoryData = {
    requestBody: PastMedicalHistoryDto;
    uuid: string;
};

export type UpdatePastMedicalHistoryResponse = Response;

export type DeletePastMedicalHistoryByUuidData = {
    uuid: string;
};

export type DeletePastMedicalHistoryByUuidResponse = Response;

export type AddPastMedicalHistoryData = {
    requestBody: PastMedicalHistoryDto;
};

export type AddPastMedicalHistoryResponse = Response;

export type GetAllPastMedicalHistoryData = {
    page?: number;
    pageSize?: number;
    patientUuid: string;
    sortBy?: string;
    sortDirection?: string;
};

export type GetAllPastMedicalHistoryResponse = Response;

export type UpdateNoteByUuidData = {
    noteByUuid: string;
    requestBody: NoteRequest;
};

export type UpdateNoteByUuidResponse = Response;

export type SaveNoteData = {
    requestBody: NoteRequest;
};

export type SaveNoteResponse = Response;

export type GetNoteByUuidData = {
    noteByUuid: string;
};

export type GetNoteByUuidResponse = Response;

export type DeleteNoteByUuidData = {
    noteByUuid: string;
};

export type DeleteNoteByUuidResponse = Response;

export type GetAllNotesData = {
    createdDate?: string;
    documentNote?: 'INTERNAL_NOTE' | 'EXTERNAL_NOTE';
    modifiedDate?: string;
    note?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAllNotesResponse = Response;

export type GetMedicationByUuidData = {
    medicationUuid: string;
};

export type GetMedicationByUuidResponse = Response;

export type UpdateMedicationByUuidData = {
    medicationUuid: string;
    requestBody: MedicationRequest;
};

export type UpdateMedicationByUuidResponse = Response;

export type DeleteMedicationByUuidData = {
    medicationUuid: string;
};

export type DeleteMedicationByUuidResponse = Response;

export type SaveMedicationData = {
    requestBody: MedicationRequest;
};

export type SaveMedicationResponse = Response;

export type GetAllMedicationsData = {
    medicationStatus?: 'ACTIVE' | 'PAST' | 'PENDING' | 'ONGOING' | 'COMPLETED';
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAllMedicationsResponse = Response;

export type UpdateLocationData = {
    requestBody: LocationRequestDto;
};

export type UpdateLocationResponse = Response;

export type AddLocationData = {
    requestBody: LocationRequestDto;
};

export type AddLocationResponse = Response;

export type GetLocationByUuidData = {
    locationUuid: string;
};

export type GetLocationByUuidResponse = Response;

export type DeleteLocationByUuidData = {
    locationUuid: string;
};

export type DeleteLocationByUuidResponse = Response;

export type GetAllLocationData = {
    page?: number;
    pageSize?: number;
    searchString?: string;
    sortBy?: string;
    sortDirection?: string;
    status?: boolean;
};

export type GetAllLocationResponse = Response;

export type UpdateLocationGroupData = {
    requestBody: LocationGroupRequest;
};

export type UpdateLocationGroupResponse = Response;

export type AddLocationGroupData = {
    requestBody: LocationGroupRequest;
};

export type AddLocationGroupResponse = Response;

export type GetLocationGroupByUuidData = {
    locationGroupUuid: string;
};

export type GetLocationGroupByUuidResponse = Response;

export type DeleteLocationGroupByUuidData = {
    locationGroupUuid: string;
};

export type DeleteLocationGroupByUuidResponse = Response;

export type GetAllLocationGroupData = {
    page?: number;
    pageSize?: number;
    searchString?: string;
    sortBy?: string;
    sortDirection?: string;
    status?: boolean;
};

export type GetAllLocationGroupResponse = Response;

export type SetDefaultPharmacyData = {
    patientUuid: string;
    pharmacyUuid: string;
};

export type SetDefaultPharmacyResponse = Response;

export type LinkPharmacyData = {
    requestBody: PatientLinkedPharmacyDto;
};

export type LinkPharmacyResponse = Response;

export type GetAllPharmaciesForPatientData = {
    page?: number;
    pageSize?: number;
    patientUuid: string;
    sortBy?: string;
    sortDirection?: string;
};

export type GetAllPharmaciesForPatientResponse = Response;

export type GetInvoiceByUuidData = {
    invoiceUuid: string;
};

export type GetInvoiceByUuidResponse = Response;

export type UpdateInvoiceByUuidData = {
    invoiceUuid: string;
    requestBody: InvoiceRequest;
};

export type UpdateInvoiceByUuidResponse = Response;

export type DeleteInvoiceByUuidData = {
    invoiceUuid: string;
};

export type DeleteInvoiceByUuidResponse = Response;

export type SaveInvoiceData = {
    requestBody: InvoiceRequest;
};

export type SaveInvoiceResponse = Response;

export type GetAllInvoicesData = {
    invoiceChargeType?: 'MEMBERSHIP_CHARGE' | 'PROCEDURE_CHARGE' | 'MEDICATION_CHARGE' | 'LAB_CHARGE' | 'PANEL_CHARGE';
    invoiceId?: string;
    invoiceStatus?: 'PAID' | 'PARTIALLY_PAID' | 'UNPAID';
    localDate?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAllInvoicesResponse = Response;

export type UpdateInsuranceData = {
    requestBody: Array<InsuranceDetailsDto>;
};

export type UpdateInsuranceResponse = Response;

export type CreateInsuranceData = {
    requestBody: InsuranceDetailsDto;
};

export type CreateInsuranceResponse = Response;

export type GetInsuranceByUuidData = {
    insuranceUuid: string;
};

export type GetInsuranceByUuidResponse = Response;

export type DeleteInsuranceByUuidData = {
    insuranceUuid: string;
};

export type DeleteInsuranceByUuidResponse = Response;

export type GetAllPatientInsuranceData = {
    page?: number;
    pageSize?: number;
    patientUuid: string;
    searchString?: string;
    sortBy?: string;
    sortDirection?: string;
};

export type GetAllPatientInsuranceResponse = Response;

export type GetImagingResultByUuidData = {
    imagingResultByUuid: string;
};

export type GetImagingResultByUuidResponse = Response;

export type UpdateImagingResultData = {
    imagingResultByUuid: string;
    requestBody: ImagingResultRequest;
};

export type UpdateImagingResultResponse = Response;

export type DeleteImagingResultByUuidData = {
    imagingResultByUuid: string;
};

export type DeleteImagingResultByUuidResponse = Response;

export type SaveImagingResultData = {
    requestBody: ImagingResultRequest;
};

export type SaveImagingResultResponse = Response;

export type GetAllImagingResultsData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAllImagingResultsResponse = Response;

export type GetImagingOrderByUuidData = {
    imagingOrderByUuid: string;
};

export type GetImagingOrderByUuidResponse = Response;

export type UpdateImagingOrderData = {
    imagingOrderByUuid: string;
    requestBody: ImagingOrderRequest;
};

export type UpdateImagingOrderResponse = Response;

export type DeleteImagingOrderByUuidData = {
    imagingOrderByUuid: string;
};

export type DeleteImagingOrderByUuidResponse = Response;

export type SaveImagingOrderData = {
    requestBody: ImagingOrderRequest;
};

export type SaveImagingOrderResponse = Response;

export type GetAllImagingOrderData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAllImagingOrderResponse = Response;

export type GetIcdCodeByUuidData = {
    uuid: string;
};

export type GetIcdCodeByUuidResponse = Response;

export type UpdateIcdCodeData = {
    requestBody: IcdCodeDto;
    uuid: string;
};

export type UpdateIcdCodeResponse = Response;

export type DeleteIcdCodeByUuidData = {
    uuid: string;
};

export type DeleteIcdCodeByUuidResponse = Response;

export type CreateIcdCodeData = {
    requestBody: IcdCodeDto;
};

export type CreateIcdCodeResponse = Response;

export type GetAllIcdCodesData = {
    page?: number;
    pageSize?: number;
    searchString?: string;
    sortBy?: string;
    sortDirection?: string;
};

export type GetAllIcdCodesResponse = Response;

export type GetFamilyHistoryByUuidData = {
    uuid: string;
};

export type GetFamilyHistoryByUuidResponse = Response;

export type UpdateFamilyHistoryData = {
    requestBody: FamilyHistoryDto;
    uuid: string;
};

export type UpdateFamilyHistoryResponse = Response;

export type DeleteFamilyHistoryByUuidData = {
    uuid: string;
};

export type DeleteFamilyHistoryByUuidResponse = Response;

export type AddFamilyHistoryData = {
    requestBody: FamilyHistoryDto;
};

export type AddFamilyHistoryResponse = Response;

export type GetAllFamilyHistoryData = {
    page?: number;
    pageSize?: number;
    patientUuid: string;
    sortBy?: string;
    sortDirection?: string;
};

export type GetAllFamilyHistoryResponse = Response;

export type UpdateDrugIntoleranceData = {
    requestBody: DrugIntoleranceDto;
    uuid: string;
};

export type UpdateDrugIntoleranceResponse = Response;

export type AddDrugIntoleranceData = {
    requestBody: DrugIntoleranceDto;
};

export type AddDrugIntoleranceResponse = Response;

export type GetDrugIntoleranceByUuidData = {
    drugIntoleranceUuid: string;
};

export type GetDrugIntoleranceByUuidResponse = Response;

export type DeleteDrugIntoleranceByUuidData = {
    drugIntoleranceUuid: string;
};

export type DeleteDrugIntoleranceByUuidResponse = Response;

export type GetAllDrugIntolerancesData = {
    page?: number;
    pageSize?: number;
    patientUuid: string;
    sortBy?: string;
    sortDirection?: string;
};

export type GetAllDrugIntolerancesResponse = Response;

export type UpdateDocumentTypeData = {
    requestBody: Array<UpdateDocumentTypeRequest>;
};

export type UpdateDocumentTypeResponse = Response;

export type SaveDocumentTypeData = {
    requestBody: DocumentTypeRequest;
};

export type SaveDocumentTypeResponse = Response;

export type GetDocumentTypeByUuidData = {
    documentTypeUuid: string;
};

export type GetDocumentTypeByUuidResponse = Response;

export type DeleteDocumentTypeByUuidData = {
    documentTypeUuid: string;
};

export type DeleteDocumentTypeByUuidResponse = Response;

export type GetAllDocumentTypesData = {
    documentType?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAllDocumentTypesResponse = Response;

export type GetDiagnosisByUuidData = {
    uuid: string;
};

export type GetDiagnosisByUuidResponse = Response;

export type UpdateDiagnosisData = {
    requestBody: DiagnosisDto;
    uuid: string;
};

export type UpdateDiagnosisResponse = Response;

export type DeleteDiagnosisData = {
    uuid: string;
};

export type DeleteDiagnosisResponse = Response;

export type AddDiagnosisData = {
    requestBody: DiagnosisDto;
};

export type AddDiagnosisResponse = Response;

export type ResolvedDiagnosisData = {
    uuid: string;
};

export type ResolvedDiagnosisResponse = Response;

export type GetAllDiagnosesData = {
    page?: number;
    pageSize?: number;
    patientUuid: string;
    searchString?: string;
    sortBy?: string;
    sortDirection?: string;
    status?: 'ACTIVE' | 'HISTORICAL' | 'RESOLVED';
    type?: 'ACUTE' | 'CHRONIC';
};

export type GetAllDiagnosesResponse = Response;

export type GetAllergyByUuidData = {
    uuid: string;
};

export type GetAllergyByUuidResponse = Response;

export type UpdateAllergyData = {
    requestBody: AllergyDto;
    uuid: string;
};

export type UpdateAllergyResponse = Response;

export type DeleteAllergyByUuIdData = {
    uuid: string;
};

export type DeleteAllergyByUuIdResponse = Response;

export type AddAllergyData = {
    requestBody: AllergyDto;
};

export type AddAllergyResponse = Response;

export type GetAllAllergiesData = {
    page?: number;
    pageSize?: number;
    patientUuid: string;
    sortBy?: string;
    sortDirection?: string;
};

export type GetAllAllergiesResponse = Response;

export type SaveDocumentData = {
    requestBody: DocumentRequest;
};

export type SaveDocumentResponse = Response;

export type GetDocumentByUuidData = {
    documentUuid: string;
};

export type GetDocumentByUuidResponse = Response;

export type DeleteDocumentByUuidData = {
    documentUuid: string;
};

export type DeleteDocumentByUuidResponse = Response;

export type GetAllDocuments1Data = {
    documentType?: string;
    fileName?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAllDocuments1Response = Response;

export type SaveContactDirectoryData = {
    requestBody: ContactDirectoryRequest;
};

export type SaveContactDirectoryResponse = Response;

export type GetContactDirectoryUuidData = {
    contactDirectoryUuid: string;
};

export type GetContactDirectoryUuidResponse = Response;

export type DeleteContactDirectoryByUuidData = {
    contactDirectoryUuid: string;
};

export type DeleteContactDirectoryByUuidResponse = Response;

export type GetAllContactDirectoryData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    referralType?: 'IMAGING' | 'SPECIALIST';
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAllContactDirectoryResponse = Response;

export type UploadImageAsMultipartData = {
    referenceType: 'LOCATION_PROFILE' | 'PROVIDER_PROFILE' | 'PATIENT_DOCUMENTS' | 'PATIENT_PROFILE' | 'LAB_ORDER' | 'INSURANCE';
    requestBody?: {
        file: (Blob | File);
    };
    userUuid?: string;
};

export type UploadImageAsMultipartResponse = Response;

export type UploadImageAsBase64Data = {
    base64: string;
    referenceType: 'LOCATION_PROFILE' | 'PROVIDER_PROFILE' | 'PATIENT_DOCUMENTS' | 'PATIENT_PROFILE' | 'LAB_ORDER' | 'INSURANCE';
    userUuid?: string;
};

export type UploadImageAsBase64Response = Response;

export type UploadDocumentAsMultipartData = {
    referenceType: 'LOCATION_PROFILE' | 'PROVIDER_PROFILE' | 'PATIENT_DOCUMENTS' | 'PATIENT_PROFILE' | 'LAB_ORDER' | 'INSURANCE';
    requestBody?: {
        file: (Blob | File);
    };
    userUuid?: string;
};

export type UploadDocumentAsMultipartResponse = Response;

export type UploadDocumentAsBase64Data = {
    base64: string;
    userUuid?: string;
};

export type UploadDocumentAsBase64Response = Response;

export type GetFileData = {
    key: string;
};

export type GetFileResponse = Response;

export type GetFile1Data = {
    key: string;
};

export type GetFile1Response = Response;

export type GetProcedureCodesData = {
    code?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetProcedureCodesResponse = Response;

export type GetAllDocumentsData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    studyName?: string;
};

export type GetAllDocumentsResponse = Response;

export type GetAuditHistoryByUuidData = {
    auditUuid: string;
    entityName: string;
};

export type GetAuditHistoryByUuidResponse = Response;

export type GetAllAuditHistoryData = {
    endDate?: string;
    entityNames: Array<(string)>;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    startDate?: string;
};

export type GetAllAuditHistoryResponse = Response;

export type $OpenApiTs = {
    '/api/v1/payment-transactions': {
        put: {
            req: UpdatePaymentTransactionData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        post: {
            req: CreatePaymentTransactionData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/v1/payment-transactions/{paymentTransactionUuid}': {
        get: {
            req: GetPaymentTransactionByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeletePaymentTransactionData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/v1/payment-transactions/all': {
        get: {
            req: GetAllPaymentTransactionsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/{userId}/archive-status/{status}': {
        put: {
            req: UpdateUserArchiveStatusData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/user': {
        put: {
            req: UpdateUserData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        post: {
            req: AddUserData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/user/{userId}/status/{status}': {
        put: {
            req: UpdateUserStatusData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/users': {
        get: {
            req: GetAllUsersData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/user/{userId}': {
        get: {
            req: GetUserData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/profile': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider': {
        put: {
            req: UpdateProviderData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        post: {
            req: AddProviderData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider/status': {
        patch: {
            req: UpdateProviderStatusData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider/{providerUuid}': {
        get: {
            req: GetProviderByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteProviderByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider/all': {
        get: {
            req: GetAllProvidersData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/plan': {
        get: {
            req: GetPlanAmountData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: UpdatePlanData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        post: {
            req: CreatePlanData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/plan/plan-details': {
        put: {
            req: UpdatePlanDetailsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/plan/{planUuid}': {
        get: {
            req: GetPlanByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeletePlanByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/plan/{planUuid}/plan-details': {
        get: {
            req: GetAllPlanData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/plan/check-my-plan': {
        get: {
            req: CheckMyPlanData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/plan/all': {
        get: {
            req: GetAllPlan1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient': {
        put: {
            req: UpdatePatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        post: {
            req: AddPatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/create-update': {
        put: {
            req: CreateUpdatePatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/{patientUuid}': {
        get: {
            req: GetPatientByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeletePatientByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/plan-details/{patientUuid}': {
        get: {
            req: GetPatientPlanDetailsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/overview/{patientUuid}': {
        get: {
            req: GetPatientOverviewData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/membership/{patientUuid}': {
        get: {
            req: GetPatientMemberShipData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/all': {
        get: {
            req: GetAllPatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/lead': {
        put: {
            req: UpdateLeadData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        post: {
            req: CreateLeadData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/lead/create-update': {
        put: {
            req: CreateUpdateLeadData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/lead/{leadUuid}': {
        get: {
            req: GetLeadByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteLeadByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/lead/all': {
        get: {
            req: GetAllLeadData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/vaccine/{uuid}': {
        get: {
            req: GetVaccineByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: UpdateVaccineData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteVaccineByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/vaccine': {
        post: {
            req: CreateVaccineData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/vaccine/all': {
        get: {
            req: GetAllVaccinesData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/referral/update/{referralByUuid}': {
        put: {
            req: UpdateReferralByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/referral/create': {
        post: {
            req: SaveReferralData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/referral/{referralByUuid}': {
        get: {
            req: GetReferralByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteReferralByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/referral/all': {
        get: {
            req: GetAllReferralsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/pharmacy/{uuid}': {
        get: {
            req: GetPharmacyByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: UpdatePharmacyData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeletePharmacyData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/pharmacy': {
        post: {
            req: AddPharmacyData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/pharmacy/all': {
        get: {
            req: GetAllPharmaciesData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/patient-vaccination/{uuid}': {
        get: {
            req: GetPatientVaccinationByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: UpdatePatientVaccinationData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeletePatientVaccinationData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/patient-vaccination': {
        post: {
            req: CreatePatientVaccinationData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/patient-vaccination/all': {
        get: {
            req: GetAllPatientVaccinationData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/patient-vaccination/all/vaccine-table': {
        get: {
            req: GetAllPatientVaccinationForVaccineTableData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/patient-flag/{uuid}': {
        get: {
            req: GetPatientFlagByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: UpdatePatientFlagData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeletePatientFlagData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/patient-flag': {
        post: {
            req: AddPatientFlagData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/patient-flag/all': {
        get: {
            req: GetAllPatientFlagsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/past-surgical-history/{uuid}': {
        get: {
            req: GetPastSurgicalHistoryByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: UpdatePastSurgicalHistoryData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeletePastSurgicalHistoryByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/past-surgical-history': {
        post: {
            req: AddPastSurgicalHistoryData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/past-surgical-history/all': {
        get: {
            req: GetAllPastSurgicalHistoryData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/past-medical-history/{uuid}': {
        get: {
            req: GetPastMedicalHistoryByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: UpdatePastMedicalHistoryData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeletePastMedicalHistoryByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/past-medical-history': {
        post: {
            req: AddPastMedicalHistoryData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/past-medical-history/all': {
        get: {
            req: GetAllPastMedicalHistoryData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/note/update/{noteByUuid}': {
        put: {
            req: UpdateNoteByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/note/create': {
        post: {
            req: SaveNoteData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/note/{noteByUuid}': {
        get: {
            req: GetNoteByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteNoteByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/note/all': {
        get: {
            req: GetAllNotesData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/medication/{medicationUuid}': {
        get: {
            req: GetMedicationByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: UpdateMedicationByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteMedicationByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/medication/create': {
        post: {
            req: SaveMedicationData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/medication/all': {
        get: {
            req: GetAllMedicationsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/location': {
        put: {
            req: UpdateLocationData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        post: {
            req: AddLocationData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/location/{locationUuid}': {
        get: {
            req: GetLocationByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteLocationByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/location/all': {
        get: {
            req: GetAllLocationData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/location-group': {
        put: {
            req: UpdateLocationGroupData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        post: {
            req: AddLocationGroupData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/location-group/{locationGroupUuid}': {
        get: {
            req: GetLocationGroupByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteLocationGroupByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/location-group/all': {
        get: {
            req: GetAllLocationGroupData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/link-pharmacy/set-default': {
        put: {
            req: SetDefaultPharmacyData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/link-pharmacy/link': {
        post: {
            req: LinkPharmacyData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/link-pharmacy/all': {
        get: {
            req: GetAllPharmaciesForPatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/invoice/{invoiceUuid}': {
        get: {
            req: GetInvoiceByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: UpdateInvoiceByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteInvoiceByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/invoice/create': {
        post: {
            req: SaveInvoiceData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/invoice/all': {
        get: {
            req: GetAllInvoicesData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/insurance': {
        put: {
            req: UpdateInsuranceData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        post: {
            req: CreateInsuranceData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/insurance/{insuranceUuid}': {
        get: {
            req: GetInsuranceByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteInsuranceByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/insurance/all': {
        get: {
            req: GetAllPatientInsuranceData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/imaging_result/{imagingResultByUuid}': {
        get: {
            req: GetImagingResultByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: UpdateImagingResultData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteImagingResultByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/imaging_result/create': {
        post: {
            req: SaveImagingResultData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/imaging_result/all': {
        get: {
            req: GetAllImagingResultsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/imaging_order/{imagingOrderByUuid}': {
        get: {
            req: GetImagingOrderByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: UpdateImagingOrderData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteImagingOrderByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/imaging_order/create': {
        post: {
            req: SaveImagingOrderData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/imaging_order/all': {
        get: {
            req: GetAllImagingOrderData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/icd-code/{uuid}': {
        get: {
            req: GetIcdCodeByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: UpdateIcdCodeData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteIcdCodeByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/icd-code': {
        post: {
            req: CreateIcdCodeData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/icd-code/all': {
        get: {
            req: GetAllIcdCodesData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/family-history/{uuid}': {
        get: {
            req: GetFamilyHistoryByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: UpdateFamilyHistoryData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteFamilyHistoryByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/family-history': {
        post: {
            req: AddFamilyHistoryData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/family-history/all': {
        get: {
            req: GetAllFamilyHistoryData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/drug-intolerance/{uuid}': {
        put: {
            req: UpdateDrugIntoleranceData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/drug-intolerance': {
        post: {
            req: AddDrugIntoleranceData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/drug-intolerance/{drugIntoleranceUuid}': {
        get: {
            req: GetDrugIntoleranceByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteDrugIntoleranceByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/drug-intolerance/all': {
        get: {
            req: GetAllDrugIntolerancesData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/document_type/update': {
        put: {
            req: UpdateDocumentTypeData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/document_type/create': {
        post: {
            req: SaveDocumentTypeData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/document_type/{documentTypeUuid}': {
        get: {
            req: GetDocumentTypeByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteDocumentTypeByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/document_type/all': {
        get: {
            req: GetAllDocumentTypesData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/diagnosis/{uuid}': {
        get: {
            req: GetDiagnosisByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: UpdateDiagnosisData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteDiagnosisData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/diagnosis': {
        post: {
            req: AddDiagnosisData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/diagnosis/resolved-diagnosis/{uuid}': {
        patch: {
            req: ResolvedDiagnosisData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/diagnosis/all': {
        get: {
            req: GetAllDiagnosesData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/allergy/{uuid}': {
        get: {
            req: GetAllergyByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: UpdateAllergyData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteAllergyByUuIdData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/allergy': {
        post: {
            req: AddAllergyData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/allergy/all': {
        get: {
            req: GetAllAllergiesData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/document/create': {
        post: {
            req: SaveDocumentData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/document/{documentUuid}': {
        get: {
            req: GetDocumentByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteDocumentByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/document/all': {
        get: {
            req: GetAllDocuments1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/contact_directory/create': {
        post: {
            req: SaveContactDirectoryData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/contact_directory/{contactDirectoryUuid}': {
        get: {
            req: GetContactDirectoryUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteContactDirectoryByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/contact_directory/all': {
        get: {
            req: GetAllContactDirectoryData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/aws/upload/image/multipart': {
        post: {
            req: UploadImageAsMultipartData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/aws/upload/image/base64': {
        post: {
            req: UploadImageAsBase64Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/aws/upload/document/multipart': {
        post: {
            req: UploadDocumentAsMultipartData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/aws/upload/document/base64': {
        post: {
            req: UploadDocumentAsBase64Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/aws/auth/pre-signed-url': {
        get: {
            req: GetFileData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/aws/pre-signed-url': {
        get: {
            req: GetFile1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/procedure_code/all': {
        get: {
            req: GetProcedureCodesData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/order_study/all': {
        get: {
            req: GetAllDocumentsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/audit_history/{entityName}/{auditUuid}': {
        get: {
            req: GetAuditHistoryByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/ehr/v1/audit_history/all': {
        get: {
            req: GetAllAuditHistoryData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
};