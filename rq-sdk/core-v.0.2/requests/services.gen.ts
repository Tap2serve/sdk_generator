// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { UpdatePaymentTransactionData, UpdatePaymentTransactionResponse, CreatePaymentTransactionData, CreatePaymentTransactionResponse, GetPaymentTransactionByUuidData, GetPaymentTransactionByUuidResponse, DeletePaymentTransactionData, DeletePaymentTransactionResponse, GetAllPaymentTransactionsData, GetAllPaymentTransactionsResponse, UpdateUserArchiveStatusData, UpdateUserArchiveStatusResponse, UpdateUserData, UpdateUserResponse, AddUserData, AddUserResponse, UpdateUserStatusData, UpdateUserStatusResponse, GetAllUsersData, GetAllUsersResponse, GetUserData, GetUserResponse, GetProfileResponse, UpdateProviderData, UpdateProviderResponse, AddProviderData, AddProviderResponse, UpdateProviderStatusData, UpdateProviderStatusResponse, GetProviderByUuidData, GetProviderByUuidResponse, DeleteProviderByUuidData, DeleteProviderByUuidResponse, GetAllProvidersData, GetAllProvidersResponse, GetPlanAmountData, GetPlanAmountResponse, UpdatePlanData, UpdatePlanResponse, CreatePlanData, CreatePlanResponse, UpdatePlanDetailsData, UpdatePlanDetailsResponse, GetPlanByUuidData, GetPlanByUuidResponse, DeletePlanByUuidData, DeletePlanByUuidResponse, GetAllPlanData, GetAllPlanResponse, CheckMyPlanData, CheckMyPlanResponse, GetAllPlan1Data, GetAllPlan1Response, UpdatePatientData, UpdatePatientResponse, AddPatientData, AddPatientResponse, CreateUpdatePatientData, CreateUpdatePatientResponse, GetPatientByUuidData, GetPatientByUuidResponse, DeletePatientByUuidData, DeletePatientByUuidResponse, GetPatientPlanDetailsData, GetPatientPlanDetailsResponse, GetPatientOverviewData, GetPatientOverviewResponse, GetPatientMemberShipData, GetPatientMemberShipResponse, GetAllPatientData, GetAllPatientResponse, UpdateLeadData, UpdateLeadResponse, CreateLeadData, CreateLeadResponse, CreateUpdateLeadData, CreateUpdateLeadResponse, GetLeadByUuidData, GetLeadByUuidResponse, DeleteLeadByUuidData, DeleteLeadByUuidResponse, GetAllLeadData, GetAllLeadResponse, GetVaccineByUuidData, GetVaccineByUuidResponse, UpdateVaccineData, UpdateVaccineResponse, DeleteVaccineByUuidData, DeleteVaccineByUuidResponse, CreateVaccineData, CreateVaccineResponse, GetAllVaccinesData, GetAllVaccinesResponse, UpdateReferralByUuidData, UpdateReferralByUuidResponse, SaveReferralData, SaveReferralResponse, GetReferralByUuidData, GetReferralByUuidResponse, DeleteReferralByUuidData, DeleteReferralByUuidResponse, GetAllReferralsData, GetAllReferralsResponse, GetPharmacyByUuidData, GetPharmacyByUuidResponse, UpdatePharmacyData, UpdatePharmacyResponse, DeletePharmacyData, DeletePharmacyResponse, AddPharmacyData, AddPharmacyResponse, GetAllPharmaciesData, GetAllPharmaciesResponse, GetPatientVaccinationByUuidData, GetPatientVaccinationByUuidResponse, UpdatePatientVaccinationData, UpdatePatientVaccinationResponse, DeletePatientVaccinationData, DeletePatientVaccinationResponse, CreatePatientVaccinationData, CreatePatientVaccinationResponse, GetAllPatientVaccinationData, GetAllPatientVaccinationResponse, GetAllPatientVaccinationForVaccineTableData, GetAllPatientVaccinationForVaccineTableResponse, GetPatientFlagByUuidData, GetPatientFlagByUuidResponse, UpdatePatientFlagData, UpdatePatientFlagResponse, DeletePatientFlagData, DeletePatientFlagResponse, AddPatientFlagData, AddPatientFlagResponse, GetAllPatientFlagsData, GetAllPatientFlagsResponse, GetPastSurgicalHistoryByUuidData, GetPastSurgicalHistoryByUuidResponse, UpdatePastSurgicalHistoryData, UpdatePastSurgicalHistoryResponse, DeletePastSurgicalHistoryByUuidData, DeletePastSurgicalHistoryByUuidResponse, AddPastSurgicalHistoryData, AddPastSurgicalHistoryResponse, GetAllPastSurgicalHistoryData, GetAllPastSurgicalHistoryResponse, GetPastMedicalHistoryByUuidData, GetPastMedicalHistoryByUuidResponse, UpdatePastMedicalHistoryData, UpdatePastMedicalHistoryResponse, DeletePastMedicalHistoryByUuidData, DeletePastMedicalHistoryByUuidResponse, AddPastMedicalHistoryData, AddPastMedicalHistoryResponse, GetAllPastMedicalHistoryData, GetAllPastMedicalHistoryResponse, UpdateNoteByUuidData, UpdateNoteByUuidResponse, SaveNoteData, SaveNoteResponse, GetNoteByUuidData, GetNoteByUuidResponse, DeleteNoteByUuidData, DeleteNoteByUuidResponse, GetAllNotesData, GetAllNotesResponse, GetMedicationByUuidData, GetMedicationByUuidResponse, UpdateMedicationByUuidData, UpdateMedicationByUuidResponse, DeleteMedicationByUuidData, DeleteMedicationByUuidResponse, SaveMedicationData, SaveMedicationResponse, GetAllMedicationsData, GetAllMedicationsResponse, UpdateLocationData, UpdateLocationResponse, AddLocationData, AddLocationResponse, GetLocationByUuidData, GetLocationByUuidResponse, DeleteLocationByUuidData, DeleteLocationByUuidResponse, GetAllLocationData, GetAllLocationResponse, UpdateLocationGroupData, UpdateLocationGroupResponse, AddLocationGroupData, AddLocationGroupResponse, GetLocationGroupByUuidData, GetLocationGroupByUuidResponse, DeleteLocationGroupByUuidData, DeleteLocationGroupByUuidResponse, GetAllLocationGroupData, GetAllLocationGroupResponse, SetDefaultPharmacyData, SetDefaultPharmacyResponse, LinkPharmacyData, LinkPharmacyResponse, GetAllPharmaciesForPatientData, GetAllPharmaciesForPatientResponse, GetInvoiceByUuidData, GetInvoiceByUuidResponse, UpdateInvoiceByUuidData, UpdateInvoiceByUuidResponse, DeleteInvoiceByUuidData, DeleteInvoiceByUuidResponse, SaveInvoiceData, SaveInvoiceResponse, GetAllInvoicesData, GetAllInvoicesResponse, UpdateInsuranceData, UpdateInsuranceResponse, CreateInsuranceData, CreateInsuranceResponse, GetInsuranceByUuidData, GetInsuranceByUuidResponse, DeleteInsuranceByUuidData, DeleteInsuranceByUuidResponse, GetAllPatientInsuranceData, GetAllPatientInsuranceResponse, GetImagingResultByUuidData, GetImagingResultByUuidResponse, UpdateImagingResultData, UpdateImagingResultResponse, DeleteImagingResultByUuidData, DeleteImagingResultByUuidResponse, SaveImagingResultData, SaveImagingResultResponse, GetAllImagingResultsData, GetAllImagingResultsResponse, GetImagingOrderByUuidData, GetImagingOrderByUuidResponse, UpdateImagingOrderData, UpdateImagingOrderResponse, DeleteImagingOrderByUuidData, DeleteImagingOrderByUuidResponse, SaveImagingOrderData, SaveImagingOrderResponse, GetAllImagingOrderData, GetAllImagingOrderResponse, GetIcdCodeByUuidData, GetIcdCodeByUuidResponse, UpdateIcdCodeData, UpdateIcdCodeResponse, DeleteIcdCodeByUuidData, DeleteIcdCodeByUuidResponse, CreateIcdCodeData, CreateIcdCodeResponse, GetAllIcdCodesData, GetAllIcdCodesResponse, GetFamilyHistoryByUuidData, GetFamilyHistoryByUuidResponse, UpdateFamilyHistoryData, UpdateFamilyHistoryResponse, DeleteFamilyHistoryByUuidData, DeleteFamilyHistoryByUuidResponse, AddFamilyHistoryData, AddFamilyHistoryResponse, GetAllFamilyHistoryData, GetAllFamilyHistoryResponse, UpdateDrugIntoleranceData, UpdateDrugIntoleranceResponse, AddDrugIntoleranceData, AddDrugIntoleranceResponse, GetDrugIntoleranceByUuidData, GetDrugIntoleranceByUuidResponse, DeleteDrugIntoleranceByUuidData, DeleteDrugIntoleranceByUuidResponse, GetAllDrugIntolerancesData, GetAllDrugIntolerancesResponse, UpdateDocumentTypeData, UpdateDocumentTypeResponse, SaveDocumentTypeData, SaveDocumentTypeResponse, GetDocumentTypeByUuidData, GetDocumentTypeByUuidResponse, DeleteDocumentTypeByUuidData, DeleteDocumentTypeByUuidResponse, GetAllDocumentTypesData, GetAllDocumentTypesResponse, GetDiagnosisByUuidData, GetDiagnosisByUuidResponse, UpdateDiagnosisData, UpdateDiagnosisResponse, DeleteDiagnosisData, DeleteDiagnosisResponse, AddDiagnosisData, AddDiagnosisResponse, ResolvedDiagnosisData, ResolvedDiagnosisResponse, GetAllDiagnosesData, GetAllDiagnosesResponse, GetAllergyByUuidData, GetAllergyByUuidResponse, UpdateAllergyData, UpdateAllergyResponse, DeleteAllergyByUuIdData, DeleteAllergyByUuIdResponse, AddAllergyData, AddAllergyResponse, GetAllAllergiesData, GetAllAllergiesResponse, SaveDocumentData, SaveDocumentResponse, GetDocumentByUuidData, GetDocumentByUuidResponse, DeleteDocumentByUuidData, DeleteDocumentByUuidResponse, GetAllDocuments1Data, GetAllDocuments1Response, SaveContactDirectoryData, SaveContactDirectoryResponse, GetContactDirectoryUuidData, GetContactDirectoryUuidResponse, DeleteContactDirectoryByUuidData, DeleteContactDirectoryByUuidResponse, GetAllContactDirectoryData, GetAllContactDirectoryResponse, UploadImageAsMultipartData, UploadImageAsMultipartResponse, UploadImageAsBase64Data, UploadImageAsBase64Response, UploadDocumentAsMultipartData, UploadDocumentAsMultipartResponse, UploadDocumentAsBase64Data, UploadDocumentAsBase64Response, GetFileData, GetFileResponse, GetFile1Data, GetFile1Response, GetProcedureCodesData, GetProcedureCodesResponse, GetAllDocumentsData, GetAllDocumentsResponse, GetAuditHistoryByUuidData, GetAuditHistoryByUuidResponse, GetAllAuditHistoryData, GetAllAuditHistoryResponse } from './types.gen';

export class PaymentTransactionControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updatePaymentTransaction(data: UpdatePaymentTransactionData): CancelablePromise<UpdatePaymentTransactionResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/payment-transactions',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static createPaymentTransaction(data: CreatePaymentTransactionData): CancelablePromise<CreatePaymentTransactionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/payment-transactions',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.paymentTransactionUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getPaymentTransactionByUuid(data: GetPaymentTransactionByUuidData): CancelablePromise<GetPaymentTransactionByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/payment-transactions/{paymentTransactionUuid}',
            path: {
                paymentTransactionUuid: data.paymentTransactionUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.paymentTransactionUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deletePaymentTransaction(data: DeletePaymentTransactionData): CancelablePromise<DeletePaymentTransactionResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/payment-transactions/{paymentTransactionUuid}',
            path: {
                paymentTransactionUuid: data.paymentTransactionUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @param data.searchString
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllPaymentTransactions(data: GetAllPaymentTransactionsData = {}): CancelablePromise<GetAllPaymentTransactionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/payment-transactions/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                searchString: data.searchString
            }
        });
    }
    
}

export class UserControllerService {
    /**
     * Archive/Unarchive User
     * Change User archive status to either archived or unarchived.
     * @param data The data for the request.
     * @param data.userId
     * @param data.status
     * @returns Response OK
     * @throws ApiError
     */
    public static updateUserArchiveStatus(data: UpdateUserArchiveStatusData): CancelablePromise<UpdateUserArchiveStatusResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/{userId}/archive-status/{status}',
            path: {
                userId: data.userId,
                status: data.status
            }
        });
    }
    
    /**
     * Update Staff Users
     * Edit Staff User with editable fields as firstName, lastName, phone, roleType, role.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateUser(data: UpdateUserData): CancelablePromise<UpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/user',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Add Staff User
     * Add a new Staff User into the system
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addUser(data: AddUserData): CancelablePromise<AddUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/user',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Enable/Disable User
     * Change user status to either active or inactive to restrict user from login
     * @param data The data for the request.
     * @param data.userId
     * @param data.status
     * @returns Response OK
     * @throws ApiError
     */
    public static updateUserStatus(data: UpdateUserStatusData): CancelablePromise<UpdateUserStatusResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/user/{userId}/status/{status}',
            path: {
                userId: data.userId,
                status: data.status
            }
        });
    }
    
    /**
     * List Staff Users
     * List staff users using Filter with Pagination and Sorting with filter options on status, archive and role and search functionality on firstName, lastName and email,
     * @param data The data for the request.
     * @param data.page
     * @param data.size
     * @param data.sortBy
     * @param data.sortDirection
     * @param data.status
     * @param data.archive
     * @param data.role
     * @param data.roleType
     * @param data.searchString
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllUsers(data: GetAllUsersData = {}): CancelablePromise<GetAllUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/users',
            query: {
                page: data.page,
                size: data.size,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                status: data.status,
                archive: data.archive,
                role: data.role,
                roleType: data.roleType,
                searchString: data.searchString
            }
        });
    }
    
    /**
     * Staff User
     * Get Staff User by userUuid
     * @param data The data for the request.
     * @param data.userId
     * @returns Response OK
     * @throws ApiError
     */
    public static getUser(data: GetUserData): CancelablePromise<GetUserResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/user/{userId}',
            path: {
                userId: data.userId
            }
        });
    }
    
    /**
     * User Profile
     * Get Logged-in User Profile
     * @returns Response OK
     * @throws ApiError
     */
    public static getProfile(): CancelablePromise<GetProfileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/profile'
        });
    }
    
}

export class ProviderControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateProvider(data: UpdateProviderData): CancelablePromise<UpdateProviderResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/provider',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addProvider(data: AddProviderData): CancelablePromise<AddProviderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/provider',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.status
     * @param data.providerUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static updateProviderStatus(data: UpdateProviderStatusData): CancelablePromise<UpdateProviderStatusResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/master/v1/provider/status',
            query: {
                status: data.status,
                providerUuid: data.providerUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getProviderByUuid(data: GetProviderByUuidData): CancelablePromise<GetProviderByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/provider/{providerUuid}',
            path: {
                providerUuid: data.providerUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteProviderByUuid(data: DeleteProviderByUuidData): CancelablePromise<DeleteProviderByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/provider/{providerUuid}',
            path: {
                providerUuid: data.providerUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @param data.longitude
     * @param data.latitude
     * @param data.patientAge
     * @param data.filterBy
     * @param data.filterValue
     * @param data.searchString
     * @param data.zipcode
     * @param data.status
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllProviders(data: GetAllProvidersData = {}): CancelablePromise<GetAllProvidersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/provider/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                longitude: data.longitude,
                latitude: data.latitude,
                patientAge: data.patientAge,
                filterBy: data.filterBy,
                filterValue: data.filterValue,
                searchString: data.searchString,
                zipcode: data.zipcode,
                status: data.status
            }
        });
    }
    
}

export class PlanControllerService {
    /**
     * @param data The data for the request.
     * @param data.primaryLeadUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getPlanAmount(data: GetPlanAmountData): CancelablePromise<GetPlanAmountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/plan',
            query: {
                primaryLeadUuid: data.primaryLeadUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updatePlan(data: UpdatePlanData): CancelablePromise<UpdatePlanResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/plan',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static createPlan(data: CreatePlanData): CancelablePromise<CreatePlanResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/plan',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updatePlanDetails(data: UpdatePlanDetailsData): CancelablePromise<UpdatePlanDetailsResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/plan/plan-details',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.planUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getPlanByUuid(data: GetPlanByUuidData): CancelablePromise<GetPlanByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/plan/{planUuid}',
            path: {
                planUuid: data.planUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.planUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deletePlanByUuid(data: DeletePlanByUuidData): CancelablePromise<DeletePlanByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/plan/{planUuid}',
            path: {
                planUuid: data.planUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.planUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllPlan(data: GetAllPlanData): CancelablePromise<GetAllPlanResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/plan/{planUuid}/plan-details',
            path: {
                planUuid: data.planUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.primaryLeadUuid
     * @param data.defaultBillingPeriod
     * @returns Response OK
     * @throws ApiError
     */
    public static checkMyPlan(data: CheckMyPlanData): CancelablePromise<CheckMyPlanResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/plan/check-my-plan',
            query: {
                primaryLeadUuid: data.primaryLeadUuid,
                defaultBillingPeriod: data.defaultBillingPeriod
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.search
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllPlan1(data: GetAllPlan1Data = {}): CancelablePromise<GetAllPlan1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/plan/all',
            query: {
                search: data.search
            }
        });
    }
    
}

export class PatientControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updatePatient(data: UpdatePatientData): CancelablePromise<UpdatePatientResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/patient',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addPatient(data: AddPatientData): CancelablePromise<AddPatientResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/patient',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static createUpdatePatient(data: CreateUpdatePatientData): CancelablePromise<CreateUpdatePatientResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/patient/create-update',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getPatientByUuid(data: GetPatientByUuidData): CancelablePromise<GetPatientByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient/{patientUuid}',
            path: {
                patientUuid: data.patientUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deletePatientByUuid(data: DeletePatientByUuidData): CancelablePromise<DeletePatientByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/patient/{patientUuid}',
            path: {
                patientUuid: data.patientUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getPatientPlanDetails(data: GetPatientPlanDetailsData): CancelablePromise<GetPatientPlanDetailsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient/plan-details/{patientUuid}',
            path: {
                patientUuid: data.patientUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getPatientOverview(data: GetPatientOverviewData): CancelablePromise<GetPatientOverviewResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient/overview/{patientUuid}',
            path: {
                patientUuid: data.patientUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getPatientMemberShip(data: GetPatientMemberShipData): CancelablePromise<GetPatientMemberShipResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient/membership/{patientUuid}',
            path: {
                patientUuid: data.patientUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @param data.searchString
     * @param data.startDate
     * @param data.endDate
     * @param data.employerUuids
     * @param data.status
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllPatient(data: GetAllPatientData = {}): CancelablePromise<GetAllPatientResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                searchString: data.searchString,
                startDate: data.startDate,
                endDate: data.endDate,
                employerUuids: data.employerUuids,
                status: data.status
            }
        });
    }
    
}

export class LeadControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateLead(data: UpdateLeadData): CancelablePromise<UpdateLeadResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/lead',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static createLead(data: CreateLeadData): CancelablePromise<CreateLeadResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/lead',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static createUpdateLead(data: CreateUpdateLeadData): CancelablePromise<CreateUpdateLeadResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/lead/create-update',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.leadUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getLeadByUuid(data: GetLeadByUuidData): CancelablePromise<GetLeadByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/lead/{leadUuid}',
            path: {
                leadUuid: data.leadUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.leadUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteLeadByUuid(data: DeleteLeadByUuidData): CancelablePromise<DeleteLeadByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/lead/{leadUuid}',
            path: {
                leadUuid: data.leadUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @param data.searchString
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllLead(data: GetAllLeadData = {}): CancelablePromise<GetAllLeadResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/lead/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                searchString: data.searchString
            }
        });
    }
    
}

export class VaccineControllerService {
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getVaccineByUuid(data: GetVaccineByUuidData): CancelablePromise<GetVaccineByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/vaccine/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateVaccine(data: UpdateVaccineData): CancelablePromise<UpdateVaccineResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/vaccine/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteVaccineByUuid(data: DeleteVaccineByUuidData): CancelablePromise<DeleteVaccineByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/vaccine/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static createVaccine(data: CreateVaccineData): CancelablePromise<CreateVaccineResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/vaccine',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.pageSize
     * @param data.type
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllVaccines(data: GetAllVaccinesData = {}): CancelablePromise<GetAllVaccinesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/vaccine/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                type: data.type
            }
        });
    }
    
}

export class ReferralControllerService {
    /**
     * @param data The data for the request.
     * @param data.referralByUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateReferralByUuid(data: UpdateReferralByUuidData): CancelablePromise<UpdateReferralByUuidResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/referral/update/{referralByUuid}',
            path: {
                referralByUuid: data.referralByUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveReferral(data: SaveReferralData): CancelablePromise<SaveReferralResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/referral/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.referralByUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getReferralByUuid(data: GetReferralByUuidData): CancelablePromise<GetReferralByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/referral/{referralByUuid}',
            path: {
                referralByUuid: data.referralByUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.referralByUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteReferralByUuid(data: DeleteReferralByUuidData): CancelablePromise<DeleteReferralByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/referral/{referralByUuid}',
            path: {
                referralByUuid: data.referralByUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.fax
     * @param data.phone
     * @param data.email
     * @param data.stat
     * @param data.referralType
     * @param data.createdStartDate
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllReferrals(data: GetAllReferralsData): CancelablePromise<GetAllReferralsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/referral/all',
            query: {
                patientUuid: data.patientUuid,
                fax: data.fax,
                phone: data.phone,
                email: data.email,
                stat: data.stat,
                referralType: data.referralType,
                createdStartDate: data.createdStartDate,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class PharmacyControllerService {
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getPharmacyByUuid(data: GetPharmacyByUuidData): CancelablePromise<GetPharmacyByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/pharmacy/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updatePharmacy(data: UpdatePharmacyData): CancelablePromise<UpdatePharmacyResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/pharmacy/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deletePharmacy(data: DeletePharmacyData): CancelablePromise<DeletePharmacyResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/pharmacy/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addPharmacy(data: AddPharmacyData): CancelablePromise<AddPharmacyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/pharmacy',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllPharmacies(data: GetAllPharmaciesData = {}): CancelablePromise<GetAllPharmaciesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/pharmacy/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection
            }
        });
    }
    
}

export class PatientVaccinationControllerService {
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getPatientVaccinationByUuid(data: GetPatientVaccinationByUuidData): CancelablePromise<GetPatientVaccinationByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/patient-vaccination/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updatePatientVaccination(data: UpdatePatientVaccinationData): CancelablePromise<UpdatePatientVaccinationResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/patient-vaccination/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deletePatientVaccination(data: DeletePatientVaccinationData): CancelablePromise<DeletePatientVaccinationResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/patient-vaccination/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static createPatientVaccination(data: CreatePatientVaccinationData): CancelablePromise<CreatePatientVaccinationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/patient-vaccination',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllPatientVaccination(data: GetAllPatientVaccinationData): CancelablePromise<GetAllPatientVaccinationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/patient-vaccination/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                patientUuid: data.patientUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllPatientVaccinationForVaccineTable(data: GetAllPatientVaccinationForVaccineTableData): CancelablePromise<GetAllPatientVaccinationForVaccineTableResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/patient-vaccination/all/vaccine-table',
            query: {
                patientUuid: data.patientUuid
            }
        });
    }
    
}

export class PatientFlagControllerService {
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getPatientFlagByUuid(data: GetPatientFlagByUuidData): CancelablePromise<GetPatientFlagByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/patient-flag/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updatePatientFlag(data: UpdatePatientFlagData): CancelablePromise<UpdatePatientFlagResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/patient-flag/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deletePatientFlag(data: DeletePatientFlagData): CancelablePromise<DeletePatientFlagResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/patient-flag/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addPatientFlag(data: AddPatientFlagData): CancelablePromise<AddPatientFlagResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/patient-flag',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllPatientFlags(data: GetAllPatientFlagsData): CancelablePromise<GetAllPatientFlagsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/patient-flag/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                patientUuid: data.patientUuid
            }
        });
    }
    
}

export class PastSurgicalHistoryControllerService {
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getPastSurgicalHistoryByUuid(data: GetPastSurgicalHistoryByUuidData): CancelablePromise<GetPastSurgicalHistoryByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/past-surgical-history/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updatePastSurgicalHistory(data: UpdatePastSurgicalHistoryData): CancelablePromise<UpdatePastSurgicalHistoryResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/past-surgical-history/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deletePastSurgicalHistoryByUuid(data: DeletePastSurgicalHistoryByUuidData): CancelablePromise<DeletePastSurgicalHistoryByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/past-surgical-history/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addPastSurgicalHistory(data: AddPastSurgicalHistoryData): CancelablePromise<AddPastSurgicalHistoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/past-surgical-history',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllPastSurgicalHistory(data: GetAllPastSurgicalHistoryData): CancelablePromise<GetAllPastSurgicalHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/past-surgical-history/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                patientUuid: data.patientUuid
            }
        });
    }
    
}

export class PastMedicalHistoryControllerService {
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getPastMedicalHistoryByUuid(data: GetPastMedicalHistoryByUuidData): CancelablePromise<GetPastMedicalHistoryByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/past-medical-history/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updatePastMedicalHistory(data: UpdatePastMedicalHistoryData): CancelablePromise<UpdatePastMedicalHistoryResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/past-medical-history/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deletePastMedicalHistoryByUuid(data: DeletePastMedicalHistoryByUuidData): CancelablePromise<DeletePastMedicalHistoryByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/past-medical-history/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addPastMedicalHistory(data: AddPastMedicalHistoryData): CancelablePromise<AddPastMedicalHistoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/past-medical-history',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllPastMedicalHistory(data: GetAllPastMedicalHistoryData): CancelablePromise<GetAllPastMedicalHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/past-medical-history/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                patientUuid: data.patientUuid
            }
        });
    }
    
}

export class NoteControllerService {
    /**
     * @param data The data for the request.
     * @param data.noteByUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateNoteByUuid(data: UpdateNoteByUuidData): CancelablePromise<UpdateNoteByUuidResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/note/update/{noteByUuid}',
            path: {
                noteByUuid: data.noteByUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveNote(data: SaveNoteData): CancelablePromise<SaveNoteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/note/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.noteByUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getNoteByUuid(data: GetNoteByUuidData): CancelablePromise<GetNoteByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/note/{noteByUuid}',
            path: {
                noteByUuid: data.noteByUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.noteByUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteNoteByUuid(data: DeleteNoteByUuidData): CancelablePromise<DeleteNoteByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/note/{noteByUuid}',
            path: {
                noteByUuid: data.noteByUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.documentNote
     * @param data.note
     * @param data.createdDate
     * @param data.modifiedDate
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllNotes(data: GetAllNotesData): CancelablePromise<GetAllNotesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/note/all',
            query: {
                patientUuid: data.patientUuid,
                documentNote: data.documentNote,
                note: data.note,
                createdDate: data.createdDate,
                modifiedDate: data.modifiedDate,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class MedicationControllerService {
    /**
     * @param data The data for the request.
     * @param data.medicationUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getMedicationByUuid(data: GetMedicationByUuidData): CancelablePromise<GetMedicationByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/medication/{medicationUuid}',
            path: {
                medicationUuid: data.medicationUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.medicationUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateMedicationByUuid(data: UpdateMedicationByUuidData): CancelablePromise<UpdateMedicationByUuidResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/medication/{medicationUuid}',
            path: {
                medicationUuid: data.medicationUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.medicationUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteMedicationByUuid(data: DeleteMedicationByUuidData): CancelablePromise<DeleteMedicationByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/medication/{medicationUuid}',
            path: {
                medicationUuid: data.medicationUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveMedication(data: SaveMedicationData): CancelablePromise<SaveMedicationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/medication/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.medicationStatus
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllMedications(data: GetAllMedicationsData): CancelablePromise<GetAllMedicationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/medication/all',
            query: {
                patientUuid: data.patientUuid,
                medicationStatus: data.medicationStatus,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class LocationControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateLocation(data: UpdateLocationData): CancelablePromise<UpdateLocationResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/location',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addLocation(data: AddLocationData): CancelablePromise<AddLocationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/location',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.locationUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getLocationByUuid(data: GetLocationByUuidData): CancelablePromise<GetLocationByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/location/{locationUuid}',
            path: {
                locationUuid: data.locationUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.locationUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteLocationByUuid(data: DeleteLocationByUuidData): CancelablePromise<DeleteLocationByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/location/{locationUuid}',
            path: {
                locationUuid: data.locationUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @param data.searchString
     * @param data.status
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllLocation(data: GetAllLocationData = {}): CancelablePromise<GetAllLocationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/location/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                searchString: data.searchString,
                status: data.status
            }
        });
    }
    
}

export class LocationGroupControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateLocationGroup(data: UpdateLocationGroupData): CancelablePromise<UpdateLocationGroupResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/location-group',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addLocationGroup(data: AddLocationGroupData): CancelablePromise<AddLocationGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/location-group',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.locationGroupUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getLocationGroupByUuid(data: GetLocationGroupByUuidData): CancelablePromise<GetLocationGroupByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/location-group/{locationGroupUuid}',
            path: {
                locationGroupUuid: data.locationGroupUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.locationGroupUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteLocationGroupByUuid(data: DeleteLocationGroupByUuidData): CancelablePromise<DeleteLocationGroupByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/location-group/{locationGroupUuid}',
            path: {
                locationGroupUuid: data.locationGroupUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @param data.searchString
     * @param data.status
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllLocationGroup(data: GetAllLocationGroupData = {}): CancelablePromise<GetAllLocationGroupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/location-group/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                searchString: data.searchString,
                status: data.status
            }
        });
    }
    
}

export class PatientLinkPharmacyControllerService {
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.pharmacyUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static setDefaultPharmacy(data: SetDefaultPharmacyData): CancelablePromise<SetDefaultPharmacyResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/link-pharmacy/set-default',
            query: {
                patientUuid: data.patientUuid,
                pharmacyUuid: data.pharmacyUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static linkPharmacy(data: LinkPharmacyData): CancelablePromise<LinkPharmacyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/link-pharmacy/link',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllPharmaciesForPatient(data: GetAllPharmaciesForPatientData): CancelablePromise<GetAllPharmaciesForPatientResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/link-pharmacy/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                patientUuid: data.patientUuid
            }
        });
    }
    
}

export class InvoiceControllerService {
    /**
     * @param data The data for the request.
     * @param data.invoiceUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getInvoiceByUuid(data: GetInvoiceByUuidData): CancelablePromise<GetInvoiceByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/invoice/{invoiceUuid}',
            path: {
                invoiceUuid: data.invoiceUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.invoiceUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateInvoiceByUuid(data: UpdateInvoiceByUuidData): CancelablePromise<UpdateInvoiceByUuidResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/invoice/{invoiceUuid}',
            path: {
                invoiceUuid: data.invoiceUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.invoiceUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteInvoiceByUuid(data: DeleteInvoiceByUuidData): CancelablePromise<DeleteInvoiceByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/invoice/{invoiceUuid}',
            path: {
                invoiceUuid: data.invoiceUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveInvoice(data: SaveInvoiceData): CancelablePromise<SaveInvoiceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/invoice/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.localDate
     * @param data.invoiceId
     * @param data.invoiceChargeType
     * @param data.invoiceStatus
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllInvoices(data: GetAllInvoicesData): CancelablePromise<GetAllInvoicesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/invoice/all',
            query: {
                patientUuid: data.patientUuid,
                localDate: data.localDate,
                invoiceId: data.invoiceId,
                invoiceChargeType: data.invoiceChargeType,
                invoiceStatus: data.invoiceStatus,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class InsuranceControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateInsurance(data: UpdateInsuranceData): CancelablePromise<UpdateInsuranceResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/insurance',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static createInsurance(data: CreateInsuranceData): CancelablePromise<CreateInsuranceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/insurance',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.insuranceUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getInsuranceByUuid(data: GetInsuranceByUuidData): CancelablePromise<GetInsuranceByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/insurance/{insuranceUuid}',
            path: {
                insuranceUuid: data.insuranceUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.insuranceUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteInsuranceByUuid(data: DeleteInsuranceByUuidData): CancelablePromise<DeleteInsuranceByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/insurance/{insuranceUuid}',
            path: {
                insuranceUuid: data.insuranceUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @param data.searchString
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllPatientInsurance(data: GetAllPatientInsuranceData): CancelablePromise<GetAllPatientInsuranceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/insurance/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                searchString: data.searchString,
                patientUuid: data.patientUuid
            }
        });
    }
    
}

export class ImagingResultControllerService {
    /**
     * @param data The data for the request.
     * @param data.imagingResultByUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getImagingResultByUuid(data: GetImagingResultByUuidData): CancelablePromise<GetImagingResultByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/imaging_result/{imagingResultByUuid}',
            path: {
                imagingResultByUuid: data.imagingResultByUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.imagingResultByUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateImagingResult(data: UpdateImagingResultData): CancelablePromise<UpdateImagingResultResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/imaging_result/{imagingResultByUuid}',
            path: {
                imagingResultByUuid: data.imagingResultByUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.imagingResultByUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteImagingResultByUuid(data: DeleteImagingResultByUuidData): CancelablePromise<DeleteImagingResultByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/imaging_result/{imagingResultByUuid}',
            path: {
                imagingResultByUuid: data.imagingResultByUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveImagingResult(data: SaveImagingResultData): CancelablePromise<SaveImagingResultResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/imaging_result/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllImagingResults(data: GetAllImagingResultsData): CancelablePromise<GetAllImagingResultsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/imaging_result/all',
            query: {
                patientUuid: data.patientUuid,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class ImagingOrderControllerService {
    /**
     * @param data The data for the request.
     * @param data.imagingOrderByUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getImagingOrderByUuid(data: GetImagingOrderByUuidData): CancelablePromise<GetImagingOrderByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/imaging_order/{imagingOrderByUuid}',
            path: {
                imagingOrderByUuid: data.imagingOrderByUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.imagingOrderByUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateImagingOrder(data: UpdateImagingOrderData): CancelablePromise<UpdateImagingOrderResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/imaging_order/{imagingOrderByUuid}',
            path: {
                imagingOrderByUuid: data.imagingOrderByUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.imagingOrderByUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteImagingOrderByUuid(data: DeleteImagingOrderByUuidData): CancelablePromise<DeleteImagingOrderByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/imaging_order/{imagingOrderByUuid}',
            path: {
                imagingOrderByUuid: data.imagingOrderByUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveImagingOrder(data: SaveImagingOrderData): CancelablePromise<SaveImagingOrderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/imaging_order/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllImagingOrder(data: GetAllImagingOrderData): CancelablePromise<GetAllImagingOrderResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/imaging_order/all',
            query: {
                patientUuid: data.patientUuid,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class IcdCodeControllerService {
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getIcdCodeByUuid(data: GetIcdCodeByUuidData): CancelablePromise<GetIcdCodeByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/icd-code/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateIcdCode(data: UpdateIcdCodeData): CancelablePromise<UpdateIcdCodeResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/icd-code/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteIcdCodeByUuid(data: DeleteIcdCodeByUuidData): CancelablePromise<DeleteIcdCodeByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/icd-code/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static createIcdCode(data: CreateIcdCodeData): CancelablePromise<CreateIcdCodeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/icd-code',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @param data.searchString
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllIcdCodes(data: GetAllIcdCodesData = {}): CancelablePromise<GetAllIcdCodesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/icd-code/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                searchString: data.searchString
            }
        });
    }
    
}

export class FamilyHistoryControllerService {
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getFamilyHistoryByUuid(data: GetFamilyHistoryByUuidData): CancelablePromise<GetFamilyHistoryByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/family-history/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateFamilyHistory(data: UpdateFamilyHistoryData): CancelablePromise<UpdateFamilyHistoryResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/family-history/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteFamilyHistoryByUuid(data: DeleteFamilyHistoryByUuidData): CancelablePromise<DeleteFamilyHistoryByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/family-history/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addFamilyHistory(data: AddFamilyHistoryData): CancelablePromise<AddFamilyHistoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/family-history',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllFamilyHistory(data: GetAllFamilyHistoryData): CancelablePromise<GetAllFamilyHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/family-history/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                patientUuid: data.patientUuid
            }
        });
    }
    
}

export class DrugIntoleranceControllerService {
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateDrugIntolerance(data: UpdateDrugIntoleranceData): CancelablePromise<UpdateDrugIntoleranceResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/drug-intolerance/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addDrugIntolerance(data: AddDrugIntoleranceData): CancelablePromise<AddDrugIntoleranceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/drug-intolerance',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.drugIntoleranceUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getDrugIntoleranceByUuid(data: GetDrugIntoleranceByUuidData): CancelablePromise<GetDrugIntoleranceByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/drug-intolerance/{drugIntoleranceUuid}',
            path: {
                drugIntoleranceUuid: data.drugIntoleranceUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.drugIntoleranceUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteDrugIntoleranceByUuid(data: DeleteDrugIntoleranceByUuidData): CancelablePromise<DeleteDrugIntoleranceByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/drug-intolerance/{drugIntoleranceUuid}',
            path: {
                drugIntoleranceUuid: data.drugIntoleranceUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllDrugIntolerances(data: GetAllDrugIntolerancesData): CancelablePromise<GetAllDrugIntolerancesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/drug-intolerance/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                patientUuid: data.patientUuid
            }
        });
    }
    
}

export class DocumentTypeControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateDocumentType(data: UpdateDocumentTypeData): CancelablePromise<UpdateDocumentTypeResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/document_type/update',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveDocumentType(data: SaveDocumentTypeData): CancelablePromise<SaveDocumentTypeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/document_type/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.documentTypeUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getDocumentTypeByUuid(data: GetDocumentTypeByUuidData): CancelablePromise<GetDocumentTypeByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/document_type/{documentTypeUuid}',
            path: {
                documentTypeUuid: data.documentTypeUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.documentTypeUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteDocumentTypeByUuid(data: DeleteDocumentTypeByUuidData): CancelablePromise<DeleteDocumentTypeByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/document_type/{documentTypeUuid}',
            path: {
                documentTypeUuid: data.documentTypeUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.documentType
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllDocumentTypes(data: GetAllDocumentTypesData = {}): CancelablePromise<GetAllDocumentTypesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/document_type/all',
            query: {
                documentType: data.documentType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class DiagnosisControllerService {
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getDiagnosisByUuid(data: GetDiagnosisByUuidData): CancelablePromise<GetDiagnosisByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/diagnosis/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateDiagnosis(data: UpdateDiagnosisData): CancelablePromise<UpdateDiagnosisResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/diagnosis/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteDiagnosis(data: DeleteDiagnosisData): CancelablePromise<DeleteDiagnosisResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/diagnosis/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addDiagnosis(data: AddDiagnosisData): CancelablePromise<AddDiagnosisResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/diagnosis',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static resolvedDiagnosis(data: ResolvedDiagnosisData): CancelablePromise<ResolvedDiagnosisResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/ehr/v1/diagnosis/resolved-diagnosis/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @param data.searchString
     * @param data.type
     * @param data.status
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllDiagnoses(data: GetAllDiagnosesData): CancelablePromise<GetAllDiagnosesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/diagnosis/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                searchString: data.searchString,
                type: data.type,
                status: data.status,
                patientUuid: data.patientUuid
            }
        });
    }
    
}

export class AllergyControllerService {
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllergyByUuid(data: GetAllergyByUuidData): CancelablePromise<GetAllergyByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/allergy/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateAllergy(data: UpdateAllergyData): CancelablePromise<UpdateAllergyResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/ehr/v1/allergy/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteAllergyByUuId(data: DeleteAllergyByUuIdData): CancelablePromise<DeleteAllergyByUuIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/allergy/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addAllergy(data: AddAllergyData): CancelablePromise<AddAllergyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/allergy',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.page
     * @param data.pageSize
     * @param data.sortBy
     * @param data.sortDirection
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllAllergies(data: GetAllAllergiesData): CancelablePromise<GetAllAllergiesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/allergy/all',
            query: {
                page: data.page,
                pageSize: data.pageSize,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                patientUuid: data.patientUuid
            }
        });
    }
    
}

export class DocumentControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveDocument(data: SaveDocumentData): CancelablePromise<SaveDocumentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/document/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.documentUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getDocumentByUuid(data: GetDocumentByUuidData): CancelablePromise<GetDocumentByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/document/{documentUuid}',
            path: {
                documentUuid: data.documentUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.documentUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteDocumentByUuid(data: DeleteDocumentByUuidData): CancelablePromise<DeleteDocumentByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/document/{documentUuid}',
            path: {
                documentUuid: data.documentUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUuid
     * @param data.fileName
     * @param data.documentType
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllDocuments1(data: GetAllDocuments1Data): CancelablePromise<GetAllDocuments1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/document/all',
            query: {
                patientUuid: data.patientUuid,
                fileName: data.fileName,
                documentType: data.documentType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class ContactDirectoryControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveContactDirectory(data: SaveContactDirectoryData): CancelablePromise<SaveContactDirectoryResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/contact_directory/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.contactDirectoryUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getContactDirectoryUuid(data: GetContactDirectoryUuidData): CancelablePromise<GetContactDirectoryUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/contact_directory/{contactDirectoryUuid}',
            path: {
                contactDirectoryUuid: data.contactDirectoryUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.contactDirectoryUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteContactDirectoryByUuid(data: DeleteContactDirectoryByUuidData): CancelablePromise<DeleteContactDirectoryByUuidResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/ehr/v1/contact_directory/{contactDirectoryUuid}',
            path: {
                contactDirectoryUuid: data.contactDirectoryUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.referralType
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllContactDirectory(data: GetAllContactDirectoryData = {}): CancelablePromise<GetAllContactDirectoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/contact_directory/all',
            query: {
                referralType: data.referralType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class AwsControllerService {
    /**
     * @param data The data for the request.
     * @param data.referenceType
     * @param data.userUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static uploadImageAsMultipart(data: UploadImageAsMultipartData): CancelablePromise<UploadImageAsMultipartResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/aws/upload/image/multipart',
            query: {
                referenceType: data.referenceType,
                userUuid: data.userUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.referenceType
     * @param data.base64
     * @param data.userUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static uploadImageAsBase64(data: UploadImageAsBase64Data): CancelablePromise<UploadImageAsBase64Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/aws/upload/image/base64',
            query: {
                userUuid: data.userUuid,
                referenceType: data.referenceType,
                base64: data.base64
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.referenceType
     * @param data.userUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static uploadDocumentAsMultipart(data: UploadDocumentAsMultipartData): CancelablePromise<UploadDocumentAsMultipartResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/aws/upload/document/multipart',
            query: {
                referenceType: data.referenceType,
                userUuid: data.userUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.base64
     * @param data.userUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static uploadDocumentAsBase64(data: UploadDocumentAsBase64Data): CancelablePromise<UploadDocumentAsBase64Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/ehr/v1/aws/upload/document/base64',
            query: {
                base64: data.base64,
                userUuid: data.userUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.key
     * @returns Response OK
     * @throws ApiError
     */
    public static getFile(data: GetFileData): CancelablePromise<GetFileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/aws/auth/pre-signed-url',
            query: {
                key: data.key
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.key
     * @returns Response OK
     * @throws ApiError
     */
    public static getFile1(data: GetFile1Data): CancelablePromise<GetFile1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/aws/pre-signed-url',
            query: {
                key: data.key
            }
        });
    }
    
}

export class ProcedureCodeControllerService {
    /**
     * @param data The data for the request.
     * @param data.code
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getProcedureCodes(data: GetProcedureCodesData = {}): CancelablePromise<GetProcedureCodesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/procedure_code/all',
            query: {
                code: data.code,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class OrderStudyControllerService {
    /**
     * @param data The data for the request.
     * @param data.studyName
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllDocuments(data: GetAllDocumentsData = {}): CancelablePromise<GetAllDocumentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/order_study/all',
            query: {
                studyName: data.studyName,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class AuditHistoryControllerService {
    /**
     * @param data The data for the request.
     * @param data.entityName
     * @param data.auditUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getAuditHistoryByUuid(data: GetAuditHistoryByUuidData): CancelablePromise<GetAuditHistoryByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/audit_history/{entityName}/{auditUuid}',
            path: {
                entityName: data.entityName,
                auditUuid: data.auditUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.entityNames
     * @param data.patientUuid
     * @param data.startDate
     * @param data.endDate
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllAuditHistory(data: GetAllAuditHistoryData): CancelablePromise<GetAllAuditHistoryResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/ehr/v1/audit_history/all',
            query: {
                entityNames: data.entityNames,
                startDate: data.startDate,
                endDate: data.endDate,
                patientUuid: data.patientUuid,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}