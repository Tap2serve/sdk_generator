// This file is auto-generated by @hey-api/openapi-ts

export const $PatientVital = {
    type: 'object',
    properties: {
        vitalId: {
            type: 'integer',
            format: 'int64'
        },
        vital: {
            type: 'string',
            enum: ['BLOOD_PRESSURE', 'BLOOD_PRESSURE_SYSTOLIC', 'BLOOD_PRESSURE_DIASTOLIC', 'BLOOD_GLUCOSE', 'HEART_RATE', 'BODY_TEMPERATURE', 'RESPIRATION_RATE', 'WEIGHT', 'OXYGEN_SATURATION', 'PULSE_RATE', 'BODY_MASS_INDEX', 'RESPIRATORY_VOLUME', 'HEIGHT', 'FORCED_EXPIRATORY_VOLUME', 'PEAK_EXPIRATORY', 'PERFUSION_INDEX', 'STEPS', 'PAINSCALE']
        },
        actualReadingOne: {
            type: 'number',
            format: 'double'
        },
        actualReadingTwo: {
            type: 'string'
        },
        actualReadingThree: {
            type: 'number',
            format: 'double'
        },
        patientUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        reviewStatus: {
            type: 'string',
            enum: ['REVIEWED', 'UNREVIEWED']
        },
        reviewNote: {
            type: 'string'
        },
        deviceReading: {
            type: 'boolean'
        },
        isAlert: {
            type: 'boolean'
        },
        previousActualReadingOne: {
            type: 'number',
            format: 'double'
        },
        previousActualReadingTwo: {
            type: 'string'
        },
        previousActualReadingThree: {
            type: 'number',
            format: 'double'
        }
    }
} as const;

export const $Response = {
    type: 'object',
    properties: {
        date: {
            type: 'string',
            format: 'date-time'
        },
        code: {
            type: 'string',
            enum: ['INTERNAL_ERROR', 'ACCESS_DENIED', 'USER_NOT_FOUND', 'NOTIFICATION_MARKED_AS_SEEN', 'USER_ALREADY_EXIST', 'BAD_REQUEST', 'NOT_FOUND', 'CREATED', 'SERVICE_UNAVAILABLE', 'UNAUTHORIZED', 'DB_ERROR', 'IAM_ERROR', 'AWS_ERROR', 'ENTITY', 'OK', 'UPDATED', 'UNSUPPORTED_MEDIA_TYPE', 'GONE', 'INVALID_TEMPLATE_TYPE', 'WEBHOOK_SUCCESSFUL']
        },
        message: {
            type: 'object'
        },
        data: {
            type: 'object'
        },
        errors: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        path: {
            type: 'string'
        },
        requestId: {
            type: 'string'
        },
        version: {
            type: 'string'
        }
    }
} as const;

export const $EscalateResolveRequest = {
    required: ['escalateStatus'],
    type: 'object',
    properties: {
        resolveEscalateNote: {
            type: 'string'
        },
        escalateStatus: {
            type: 'string',
            enum: ['CLOSED', 'OPEN']
        }
    }
} as const;

export const $TemplateRequest = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['SMS', 'EMAIL', 'Note']
        },
        description: {
            type: 'string'
        }
    }
} as const;

export const $ProviderCreateNewRequest = {
    required: ['countryCode', 'email', 'firstname', 'lastname', 'userName'],
    type: 'object',
    properties: {
        userName: {
            type: 'string'
        },
        firstname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        lastname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        email: {
            maxLength: 64,
            minLength: 5,
            pattern: '^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$',
            type: 'string'
        },
        dob: {
            type: 'string'
        },
        middlename: {
            type: 'string'
        },
        countryCode: {
            type: 'string'
        },
        phone: {
            type: 'string'
        },
        avatar: {
            type: 'string'
        },
        providerType: {
            type: 'string',
            enum: ['MD', 'RN', 'DO', 'LPN', 'APRN', 'NP', 'PA', 'PT', 'OT', 'PSYD', 'LCSW', 'FNP', 'RD', 'OTHER']
        },
        gender: {
            type: 'string',
            enum: ['MALE', 'FEMALE', 'OTHER']
        },
        specialitySet: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Speciality'
            }
        },
        language: {
            type: 'string',
            enum: ['ENGLISH', 'SPANISH', 'FRENCH', 'GERMAN', 'ARABIC', 'JAPANAESE', 'KOREAN', 'RUSSIAN']
        },
        npiNumber: {
            type: 'string'
        },
        yearOfExperience: {
            type: 'integer',
            format: 'int32'
        },
        providerLicenseEntity: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProviderLicenseEntity'
            }
        },
        bio: {
            type: 'string'
        },
        role: {
            type: 'string',
            enum: ['CARE_COORDINATORS', 'NURSE_PRACTITIONERS', 'PHYSICIAN_ASSISTANTS', 'PHARMACISTS', 'PHYSICIANS', 'MEDICAL_DOCTORS', 'PRACTICE_ADMIN', 'BILLING_ADMIN']
        }
    }
} as const;

export const $ProviderLicenseEntity = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        state: {
            type: 'string'
        },
        licenseNumber: {
            type: 'string'
        },
        expiryDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $Speciality = {
    required: ['id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $DeviceUpdateRequest = {
    required: ['deviceId', 'deviceName', 'serialId'],
    type: 'object',
    properties: {
        deviceName: {
            type: 'string'
        },
        serialId: {
            type: 'string'
        },
        deviceId: {
            type: 'string'
        },
        image: {
            type: 'string'
        },
        description: {
            type: 'string'
        }
    }
} as const;

export const $ProviderUpdateRequest = {
    required: ['countryCode', 'email', 'firstname', 'lastname', 'phone', 'userName'],
    type: 'object',
    properties: {
        userName: {
            type: 'string'
        },
        email: {
            maxLength: 64,
            minLength: 5,
            pattern: '^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$',
            type: 'string'
        },
        firstname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        lastname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        middlename: {
            type: 'string'
        },
        countryCode: {
            type: 'string'
        },
        phone: {
            maxLength: 10,
            minLength: 10,
            type: 'string'
        },
        providerType: {
            type: 'string',
            enum: ['MD', 'RN', 'DO', 'LPN', 'APRN', 'NP', 'PA', 'PT', 'OT', 'PSYD', 'LCSW', 'FNP', 'RD', 'OTHER']
        },
        gender: {
            type: 'string',
            enum: ['MALE', 'FEMALE', 'OTHER']
        },
        dob: {
            type: 'string'
        },
        specialitySet: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Speciality'
            }
        },
        language: {
            type: 'string',
            enum: ['ENGLISH', 'SPANISH', 'FRENCH', 'GERMAN', 'ARABIC', 'JAPANAESE', 'KOREAN', 'RUSSIAN']
        },
        npiNumber: {
            type: 'string'
        },
        yearOfExperience: {
            type: 'integer',
            format: 'int32'
        },
        providerLicenseEntity: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProviderLicenseEntity'
            }
        },
        bio: {
            type: 'string'
        },
        avatar: {
            type: 'string'
        },
        role: {
            type: 'string',
            enum: ['CARE_COORDINATORS', 'NURSE_PRACTITIONERS', 'PHYSICIAN_ASSISTANTS', 'PHARMACISTS', 'PHYSICIANS', 'MEDICAL_DOCTORS', 'PRACTICE_ADMIN', 'BILLING_ADMIN']
        }
    }
} as const;

export const $AddressEntity = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        line1: {
            type: 'string'
        },
        line2: {
            type: 'string'
        },
        city: {
            type: 'string'
        },
        state: {
            type: 'string'
        },
        country: {
            type: 'string'
        },
        zipcode: {
            type: 'string'
        },
        timeZone: {
            type: 'string',
            enum: ['EST', 'CT', 'MT', 'PT', 'AKT', 'HST', 'HAST', 'MST', 'IST']
        }
    }
} as const;

export const $ProviderGroupUpdateRequest = {
    required: ['name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        countryCode: {
            type: 'string'
        },
        phone: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        practiceAddress: {
            '$ref': '#/components/schemas/AddressEntity'
        },
        billingAddress: {
            '$ref': '#/components/schemas/AddressEntity'
        },
        specialities: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SpecialityEntity'
            }
        },
        costOfPortal: {
            type: 'number'
        },
        selfBilling: {
            type: 'boolean'
        },
        sameAsPrimaryAddress: {
            type: 'boolean'
        },
        bio: {
            type: 'string'
        },
        themeColor: {
            type: 'string'
        },
        logo: {
            type: 'string'
        },
        website: {
            type: 'string'
        }
    }
} as const;

export const $SpecialityEntity = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $AvatarUpdateRequest = {
    type: 'object',
    properties: {
        avatar: {
            type: 'string'
        },
        email: {
            maxLength: 64,
            minLength: 5,
            pattern: '^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$',
            type: 'string'
        }
    }
} as const;

export const $FamilyMemberEntity = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        familyMemberRelation: {
            type: 'string',
            enum: ['MOTHER', 'FATHER', 'SISTER', 'BROTHER', 'SPOUSE', 'OTHER']
        },
        phone: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        dob: {
            type: 'string',
            format: 'date'
        },
        avatar: {
            type: 'string'
        },
        address: {
            '$ref': '#/components/schemas/AddressEntity'
        },
        gender: {
            type: 'string',
            enum: ['MALE', 'FEMALE', 'OTHER']
        }
    }
} as const;

export const $InsuranceCreateRequest = {
    required: ['insuranceName', 'insuranceType'],
    type: 'object',
    properties: {
        insuranceType: {
            type: 'string',
            enum: ['PRIMARY', 'SECONDARY', 'TERTIARY']
        },
        insuranceName: {
            type: 'string'
        },
        relationshipToInsured: {
            type: 'string',
            enum: ['MOTHER', 'FATHER', 'SISTER', 'BROTHER', 'SPOUSE', 'OTHER', 'SELF']
        },
        holderName: {
            type: 'string'
        },
        insuranceEffectiveDate: {
            type: 'string',
            format: 'date'
        },
        policyNumber: {
            type: 'string'
        },
        employerOrSchoolName: {
            type: 'string'
        },
        insuranceNumber: {
            type: 'string'
        },
        insurancePlanName: {
            type: 'string'
        },
        insuranceGroupName: {
            type: 'string'
        },
        sameAsPrimaryAddress: {
            type: 'boolean'
        },
        addressEntity: {
            '$ref': '#/components/schemas/AddressEntity'
        },
        cardFrontSide: {
            type: 'string'
        },
        cardBackSide: {
            type: 'string'
        },
        insuranceGroupNumber: {
            type: 'string'
        },
        relationshipHolderName: {
            type: 'string'
        },
        frontImageType: {
            type: 'string'
        },
        backImageType: {
            type: 'string'
        },
        primary: {
            type: 'boolean'
        },
        expired: {
            type: 'boolean'
        }
    }
} as const;

export const $InsuranceUpdateRequest = {
    required: ['insuranceName', 'insuranceType', 'uuid'],
    type: 'object',
    properties: {
        insuranceType: {
            type: 'string',
            enum: ['PRIMARY', 'SECONDARY', 'TERTIARY']
        },
        insuranceName: {
            type: 'string'
        },
        relationshipToInsured: {
            type: 'string',
            enum: ['MOTHER', 'FATHER', 'SISTER', 'BROTHER', 'SPOUSE', 'OTHER', 'SELF']
        },
        holderName: {
            type: 'string'
        },
        insuranceEffectiveDate: {
            type: 'string',
            format: 'date'
        },
        policyNumber: {
            type: 'string'
        },
        employerOrSchoolName: {
            type: 'string'
        },
        insuranceNumber: {
            type: 'string'
        },
        insurancePlanName: {
            type: 'string'
        },
        insuranceGroupName: {
            type: 'string'
        },
        sameAsPrimaryAddress: {
            type: 'boolean'
        },
        addressEntity: {
            '$ref': '#/components/schemas/AddressEntity'
        },
        cardFrontSide: {
            type: 'string'
        },
        cardBackSide: {
            type: 'string'
        },
        insuranceGroupNumber: {
            type: 'string'
        },
        relationshipHolderName: {
            type: 'string'
        },
        frontImageType: {
            type: 'string'
        },
        backImageType: {
            type: 'string'
        },
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        primary: {
            type: 'boolean'
        },
        expired: {
            type: 'boolean'
        }
    }
} as const;

export const $PatientUpdateRequest = {
    required: ['countryCode', 'email', 'firstname', 'lastname', 'phone', 'userName', 'userUUid'],
    type: 'object',
    properties: {
        userName: {
            type: 'string'
        },
        renderingProvider: {
            type: 'string'
        },
        registrationDate: {
            type: 'string',
            format: 'date'
        },
        firstname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        lastname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        middlename: {
            type: 'string'
        },
        maritalStatus: {
            type: 'string',
            enum: ['SINGLE', 'MARRIED', 'DIVORCED', 'WIDOW']
        },
        ssn: {
            type: 'string'
        },
        mrn: {
            type: 'string'
        },
        email: {
            maxLength: 64,
            minLength: 5,
            pattern: '^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$',
            type: 'string'
        },
        countryCode: {
            type: 'string'
        },
        phone: {
            maxLength: 10,
            minLength: 10,
            type: 'string'
        },
        secondaryPhone: {
            maxLength: 10,
            minLength: 10,
            type: 'string'
        },
        dob: {
            type: 'string'
        },
        language: {
            type: 'string',
            enum: ['ENGLISH', 'SPANISH', 'FRENCH', 'GERMAN', 'ARABIC', 'JAPANAESE', 'KOREAN', 'RUSSIAN']
        },
        gender: {
            type: 'string',
            enum: ['MALE', 'FEMALE', 'OTHER']
        },
        avatar: {
            type: 'string'
        },
        addressEntity: {
            '$ref': '#/components/schemas/AddressEntity'
        },
        familyMemberEntitySet: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FamilyMemberEntity'
            }
        },
        consentToMessage: {
            type: 'boolean'
        },
        consentToCall: {
            type: 'boolean'
        },
        consentToEmail: {
            type: 'boolean'
        },
        hasInsurance: {
            type: 'boolean'
        },
        insuranceCreateRequestSet: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InsuranceCreateRequest'
            }
        },
        sendInvite: {
            type: 'boolean'
        },
        active: {
            type: 'boolean'
        },
        isSendConsentRPM: {
            type: 'boolean'
        },
        isSendConsentRTM: {
            type: 'boolean'
        },
        isSendConsentCCM: {
            type: 'boolean'
        },
        userUUid: {
            type: 'string',
            format: 'uuid'
        },
        insuranceUpdateRequestList: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InsuranceUpdateRequest'
            }
        },
        insuranceToDeleteUuidSet: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        }
    }
} as const;

export const $FamilyMemberRequest = {
    required: ['firstName', 'lastName'],
    type: 'object',
    properties: {
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        familyMemberRelation: {
            type: 'string',
            enum: ['MOTHER', 'FATHER', 'SISTER', 'BROTHER', 'SPOUSE', 'OTHER']
        },
        phone: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        dob: {
            type: 'string',
            format: 'date'
        },
        avatar: {
            type: 'string'
        },
        address: {
            '$ref': '#/components/schemas/AddressEntity'
        },
        gender: {
            type: 'string',
            enum: ['MALE', 'FEMALE', 'OTHER']
        }
    }
} as const;

export const $PatientSymptomRequest = {
    required: ['patientUserUuid'],
    type: 'object',
    properties: {
        patientUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        srNo: {
            type: 'string'
        },
        symptomName: {
            type: 'string'
        },
        note: {
            type: 'string'
        }
    }
} as const;

export const $PatientMedicationRequest = {
    required: ['patientUserUuid'],
    type: 'object',
    properties: {
        patientUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        srNo: {
            type: 'string'
        },
        medicationName: {
            type: 'string'
        },
        qty: {
            type: 'string'
        },
        dosageUnit: {
            type: 'string'
        },
        dosageDuration: {
            type: 'string'
        },
        sigNote: {
            type: 'string'
        },
        medicationDate: {
            type: 'string',
            format: 'date'
        },
        dosageStatus: {
            type: 'string',
            enum: ['ACTIVE', 'HISTORICAL']
        },
        note: {
            type: 'string'
        },
        forDays: {
            type: 'string'
        },
        forLifetime: {
            type: 'boolean'
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        duration: {
            type: 'string'
        },
        frequency: {
            type: 'string'
        },
        route: {
            type: 'string'
        }
    }
} as const;

export const $PatientConditionRequest = {
    required: ['icdId', 'patientUserUuid'],
    type: 'object',
    properties: {
        patientUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        srNo: {
            type: 'string'
        },
        conditionName: {
            type: 'string'
        },
        patientConditionStatus: {
            type: 'string',
            enum: ['ACTIVE', 'HISTORICAL']
        },
        patientConditionType: {
            type: 'string',
            enum: ['ACUTE', 'CHRONIC']
        },
        onSetDate: {
            type: 'string',
            format: 'date'
        },
        lastOccurrence: {
            type: 'string',
            format: 'date'
        },
        note: {
            type: 'string'
        },
        icdId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $PatientAllergyRequest = {
    required: ['patientUserUuid'],
    type: 'object',
    properties: {
        patientUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        srNo: {
            type: 'string'
        },
        allergyName: {
            type: 'string'
        },
        reaction: {
            type: 'string'
        },
        severity: {
            type: 'string',
            enum: ['MILD', 'MODERATE', 'SEVERE']
        },
        onSetDate: {
            type: 'string',
            format: 'date'
        },
        note: {
            type: 'string'
        }
    }
} as const;

export const $NotificationUpdateRequest = {
    type: 'object',
    properties: {
        notificationNamesType: {
            type: 'string',
            enum: ['ALERT_GENERATED', 'ESCALATION_RAISED', 'NEW_TASK_ASSIGNED', 'NEW_SMS_RECEIVED', 'NEW_APP_MESSAGE_RECEIVED', 'NEW_ENROLLMENT_ADDED', 'CARE_TEAM_ASSIGNED']
        },
        notificationId: {
            type: 'integer',
            format: 'int64'
        },
        text: {
            type: 'boolean'
        },
        email: {
            type: 'boolean'
        },
        pushNotification: {
            type: 'boolean'
        }
    }
} as const;

export const $LabResultRequest = {
    required: ['patientUserUuid'],
    type: 'object',
    properties: {
        patientUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        lab: {
            type: 'string'
        },
        value: {
            type: 'string'
        },
        record: {
            type: 'string',
            format: 'date'
        },
        abnormal: {
            type: 'string',
            enum: ['L_BELOW_STANDARD_REFERENCE_RANGE', 'H_ABOVE_STANDARD_REFERENCE_RANGE', 'LL_LOW_CRITICAL_LEVELS', 'HH_HIGH_CRITICAL_LEVELS', 'WNL_WITHIN_NORMAL_LIMITS', 'N_NORMAL']
        },
        note: {
            type: 'string'
        },
        fileKey: {
            type: 'string'
        },
        type: {
            type: 'string'
        }
    }
} as const;

export const $InsuranceMobileRequest = {
    required: ['insuranceType'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        insuranceType: {
            type: 'string',
            enum: ['PRIMARY', 'SECONDARY', 'TERTIARY']
        },
        holderName: {
            type: 'string'
        },
        policyNumber: {
            type: 'string'
        },
        insuranceNumber: {
            type: 'string'
        },
        insuranceGroupName: {
            type: 'string'
        },
        insuranceGroupNumber: {
            type: 'string'
        },
        relationshipToInsured: {
            type: 'string',
            enum: ['MOTHER', 'FATHER', 'SISTER', 'BROTHER', 'SPOUSE', 'OTHER', 'SELF']
        },
        insuranceEffectiveDate: {
            type: 'string',
            format: 'date'
        },
        cardFrontSide: {
            type: 'string'
        },
        cardBackSide: {
            type: 'string'
        },
        insuranceName: {
            type: 'string'
        },
        relationshipHolderName: {
            type: 'string'
        },
        frontImageType: {
            type: 'string'
        },
        backImageType: {
            type: 'string'
        },
        primary: {
            type: 'boolean'
        },
        expired: {
            type: 'boolean'
        }
    }
} as const;

export const $IcdCodeRequest = {
    required: ['code', 'name'],
    type: 'object',
    properties: {
        code: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['ICD_09', 'ICD_10', 'ICD_11']
        },
        description: {
            type: 'string'
        },
        isFavorite: {
            type: 'boolean'
        },
        name: {
            type: 'string'
        }
    }
} as const;

export const $EnrollmentCheckList = {
    type: 'object',
    properties: {
        deviceConfirmation: {
            type: 'boolean'
        },
        deviceConfirmationNote: {
            type: 'string'
        },
        appDownloadOrSetup: {
            type: 'boolean'
        },
        appDownloadOrSetupNote: {
            type: 'string'
        },
        consentDiscussed: {
            type: 'boolean'
        },
        consentDiscussedNote: {
            type: 'string'
        },
        consentSignedByPatientInTheApp: {
            type: 'boolean'
        },
        consentSignedByPatientInTheAppNote: {
            type: 'string'
        },
        disclaimersDiscussed: {
            type: 'boolean'
        },
        disclaimersDiscussedNote: {
            type: 'string'
        },
        monitoringDiscussed: {
            type: 'boolean'
        },
        monitoringDiscussedNote: {
            type: 'string'
        },
        monitoringRedFlagDiscussed: {
            type: 'boolean'
        },
        monitoringRedFlagDiscussedNote: {
            type: 'string'
        },
        twoWayInteractionDiscused: {
            type: 'boolean'
        },
        twoWayInteractionDiscusedNote: {
            type: 'string'
        },
        careCoOrdinatorAssigned: {
            type: 'boolean'
        },
        careCoOrdinatorAssignedNote: {
            type: 'string'
        },
        id: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $EnrollmentIcdMap = {
    type: 'object',
    properties: {
        code: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        icdId: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $EnrollmentRequest = {
    required: ['enrollmentServiceType'],
    type: 'object',
    properties: {
        patientUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        dob: {
            type: 'string'
        },
        phone: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        insuranceUuid: {
            type: 'string',
            format: 'uuid'
        },
        enrollmentServiceType: {
            type: 'string',
            enum: ['RPM', 'RTM', 'CCM']
        },
        providerUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        enrollmentIcdMapSet: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/EnrollmentIcdMap'
            }
        },
        source: {
            type: 'string',
            enum: ['APPLE_HEALTH', 'GOOGLE_FIT', 'IHEALTH_BLOOD_PRESSURE', 'IHEALTH_BLOOD_GLUCOSE', 'IHEALTH']
        },
        careManagerUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        planEntitySet: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Plan'
            }
        },
        enrollmentChecklist: {
            '$ref': '#/components/schemas/EnrollmentCheckList'
        },
        familyMemberEntitySet: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FamilyMemberEntity'
            }
        },
        secondaryCareManagerSet: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        patientDocumentMappingRequest: {
            '$ref': '#/components/schemas/PatientDocumentMappingRequest'
        },
        deviceset: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        sendConsent: {
            type: 'boolean'
        }
    }
} as const;

export const $PatientDocumentMappingRequest = {
    required: ['documentUuidSet', 'patientUserUuidSet'],
    type: 'object',
    properties: {
        documentUuidSet: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        patientUserUuidSet: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        }
    }
} as const;

export const $Plan = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        vital: {
            type: 'string',
            enum: ['BLOOD_PRESSURE', 'BLOOD_PRESSURE_SYSTOLIC', 'BLOOD_PRESSURE_DIASTOLIC', 'BLOOD_GLUCOSE', 'HEART_RATE', 'BODY_TEMPERATURE', 'RESPIRATION_RATE', 'WEIGHT', 'OXYGEN_SATURATION', 'PULSE_RATE', 'BODY_MASS_INDEX', 'RESPIRATORY_VOLUME', 'HEIGHT', 'FORCED_EXPIRATORY_VOLUME', 'PEAK_EXPIRATORY', 'PERFUSION_INDEX', 'STEPS', 'PAINSCALE']
        },
        checkInFrequency: {
            type: 'string',
            enum: ['HOURLY', 'DAILY', 'WEEKLY', 'MONTHLY']
        },
        checkInInterval: {
            type: 'integer',
            format: 'int32'
        },
        minValue: {
            type: 'integer',
            format: 'int32'
        },
        maxValue: {
            type: 'integer',
            format: 'int32'
        },
        notificationMedium: {
            type: 'string',
            enum: ['CALL', 'SMS']
        },
        notifyToUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        assignedTo: {
            '$ref': '#/components/schemas/Provider'
        }
    }
} as const;

export const $Provider = {
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        userName: {
            type: 'string'
        },
        firstname: {
            type: 'string'
        },
        lastname: {
            type: 'string'
        },
        middlename: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        countryCode: {
            type: 'string'
        },
        phone: {
            type: 'string'
        },
        gender: {
            type: 'string',
            enum: ['MALE', 'FEMALE', 'OTHER']
        },
        dob: {
            type: 'string'
        },
        language: {
            type: 'string',
            enum: ['ENGLISH', 'SPANISH', 'FRENCH', 'GERMAN', 'ARABIC', 'JAPANAESE', 'KOREAN', 'RUSSIAN']
        },
        category: {
            type: 'string',
            enum: ['ADMIN', 'SUPER_ADMIN', 'PROVIDER', 'PATIENT', 'STAFF']
        },
        emailVerified: {
            type: 'boolean'
        },
        phoneVerified: {
            type: 'boolean'
        },
        iamId: {
            type: 'string'
        },
        avatar: {
            type: 'string'
        },
        providerType: {
            type: 'string',
            enum: ['MD', 'RN', 'DO', 'LPN', 'APRN', 'NP', 'PA', 'PT', 'OT', 'PSYD', 'LCSW', 'FNP', 'RD', 'OTHER']
        },
        specialitySet: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SpecialityEntity'
            }
        },
        npiNumber: {
            type: 'string'
        },
        yearOfExperience: {
            type: 'integer',
            format: 'int32'
        },
        providerLicenseSet: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProviderLicenseEntity'
            }
        },
        bio: {
            type: 'string'
        },
        active: {
            type: 'boolean'
        },
        deleted: {
            type: 'boolean'
        },
        lastLogin: {
            type: 'string',
            format: 'date-time'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        createdBy: {
            type: 'string'
        },
        modifiedBy: {
            type: 'string'
        },
        role: {
            type: 'string',
            enum: ['CARE_COORDINATORS', 'NURSE_PRACTITIONERS', 'PHYSICIAN_ASSISTANTS', 'PHARMACISTS', 'PHYSICIANS', 'MEDICAL_DOCTORS', 'PRACTICE_ADMIN', 'BILLING_ADMIN']
        },
        isCareCoordinator: {
            type: 'boolean'
        }
    }
} as const;

export const $AdminUserUpdateRequest = {
    required: ['countryCode', 'email', 'firstname', 'lastname', 'userName'],
    type: 'object',
    properties: {
        userName: {
            type: 'string'
        },
        email: {
            maxLength: 64,
            minLength: 5,
            pattern: '^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$',
            type: 'string'
        },
        firstname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        lastname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        countryCode: {
            type: 'string'
        },
        phone: {
            maxLength: 10,
            minLength: 10,
            type: 'string'
        },
        roleUUID: {
            type: 'string',
            format: 'uuid'
        },
        avatar: {
            type: 'string'
        }
    }
} as const;

export const $UpdateCheckboxesInteraction = {
    type: 'object',
    properties: {
        patientUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        reachOutWeek1: {
            type: 'boolean'
        },
        reachOutWeek2: {
            type: 'boolean'
        },
        reachOutWeek3: {
            type: 'boolean'
        },
        reachOutWeek4: {
            type: 'boolean'
        },
        updateEhrChart: {
            type: 'boolean'
        },
        challenge: {
            type: 'boolean'
        },
        bingo: {
            type: 'boolean'
        },
        exerciseProgram: {
            type: 'boolean'
        },
        mealPlan: {
            type: 'boolean'
        },
        followUpChallenge: {
            type: 'boolean'
        },
        followUpBingo: {
            type: 'boolean'
        },
        followUpExerciseProgram: {
            type: 'boolean'
        },
        followUpMealPlan: {
            type: 'boolean'
        },
        patientSummary: {
            type: 'boolean'
        },
        wonChallenge: {
            type: 'boolean'
        },
        wonBingo: {
            type: 'boolean'
        },
        enrollmentServiceType: {
            type: 'string',
            enum: ['RPM', 'RTM', 'CCM']
        }
    }
} as const;

export const $MonitoringDataUpdateRequest = {
    type: 'object',
    properties: {
        isResolve: {
            type: 'boolean'
        },
        resolveNote: {
            type: 'string'
        },
        isEscalate: {
            type: 'boolean'
        },
        escalateNote: {
            type: 'string'
        },
        escalateProviderUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        escalateDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $PatientWorkListRequest = {
    type: 'object',
    properties: {
        isIntroductionOrTemplate: {
            type: 'boolean'
        },
        isConsent: {
            type: 'boolean'
        },
        isEducation: {
            type: 'boolean'
        }
    }
} as const;

export const $EscalateRequest = {
    type: 'object',
    properties: {
        escalateNote: {
            type: 'string'
        },
        escalatePatientUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        escalateProviderUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        escalateDate: {
            type: 'string',
            format: 'date'
        },
        escalateStatus: {
            type: 'string',
            enum: ['CLOSED', 'OPEN']
        },
        enrollmentServiceType: {
            type: 'string',
            enum: ['RPM', 'RTM', 'CCM']
        }
    }
} as const;

export const $MonitoringDataRequest = {
    type: 'object',
    properties: {
        vital: {
            type: 'string',
            enum: ['BLOOD_PRESSURE', 'BLOOD_PRESSURE_SYSTOLIC', 'BLOOD_PRESSURE_DIASTOLIC', 'BLOOD_GLUCOSE', 'HEART_RATE', 'BODY_TEMPERATURE', 'RESPIRATION_RATE', 'WEIGHT', 'OXYGEN_SATURATION', 'PULSE_RATE', 'BODY_MASS_INDEX', 'RESPIRATORY_VOLUME', 'HEIGHT', 'FORCED_EXPIRATORY_VOLUME', 'PEAK_EXPIRATORY', 'PERFUSION_INDEX', 'STEPS', 'PAINSCALE']
        },
        actualReadingOne: {
            type: 'number',
            format: 'double'
        },
        actualReadingTwo: {
            type: 'number',
            format: 'double'
        },
        actualReadingThree: {
            type: 'number',
            format: 'double'
        },
        patientUserUuid: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const $LocalTime = {
    type: 'object',
    properties: {
        hour: {
            type: 'integer',
            format: 'int32'
        },
        minute: {
            type: 'integer',
            format: 'int32'
        },
        second: {
            type: 'integer',
            format: 'int32'
        },
        nano: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $TimeLogRequest = {
    type: 'object',
    properties: {
        providerUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        patientUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        activity: {
            type: 'string'
        },
        logNote: {
            type: 'string'
        },
        logAt: {
            type: 'string',
            format: 'date-time'
        },
        duration: {
            '$ref': '#/components/schemas/LocalTime'
        },
        enrollmentServiceType: {
            type: 'string',
            enum: ['RPM', 'RTM', 'CCM']
        }
    }
} as const;

export const $DeviceCreateRequest = {
    required: ['deviceName'],
    type: 'object',
    properties: {
        deviceName: {
            type: 'string'
        },
        serialId: {
            type: 'string'
        },
        deviceId: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        image: {
            type: 'string'
        },
        venderName: {
            type: 'string',
            enum: ['APPLE_HEALTH', 'GOOGLE_FIT', 'IHEALTH_BLOOD_PRESSURE', 'IHEALTH_BLOOD_GLUCOSE', 'IHEALTH']
        },
        assign: {
            type: 'boolean'
        }
    }
} as const;

export const $ProviderCreateRequest = {
    required: ['countryCode', 'email', 'firstname', 'lastname', 'userName'],
    type: 'object',
    properties: {
        userName: {
            type: 'string'
        },
        email: {
            maxLength: 64,
            minLength: 5,
            pattern: '^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$',
            type: 'string'
        },
        firstname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        lastname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        middlename: {
            type: 'string'
        },
        countryCode: {
            type: 'string'
        },
        phone: {
            type: 'string'
        },
        avatar: {
            type: 'string'
        },
        providerType: {
            type: 'string',
            enum: ['MD', 'RN', 'DO', 'LPN', 'APRN', 'NP', 'PA', 'PT', 'OT', 'PSYD', 'LCSW', 'FNP', 'RD', 'OTHER']
        },
        gender: {
            type: 'string',
            enum: ['MALE', 'FEMALE', 'OTHER']
        },
        dob: {
            type: 'string'
        },
        specialitySet: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Speciality'
            }
        },
        language: {
            type: 'string',
            enum: ['ENGLISH', 'SPANISH', 'FRENCH', 'GERMAN', 'ARABIC', 'JAPANAESE', 'KOREAN', 'RUSSIAN']
        },
        npiNumber: {
            type: 'string'
        },
        yearOfExperience: {
            type: 'integer',
            format: 'int32'
        },
        providerLicenseEntity: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProviderLicenseEntity'
            }
        },
        bio: {
            type: 'string'
        },
        role: {
            type: 'string',
            enum: ['CARE_COORDINATORS', 'NURSE_PRACTITIONERS', 'PHYSICIAN_ASSISTANTS', 'PHARMACISTS', 'PHYSICIANS', 'MEDICAL_DOCTORS', 'PRACTICE_ADMIN', 'BILLING_ADMIN']
        }
    }
} as const;

export const $ImportRequest = {
    required: ['fileKey', 'title', 'type'],
    type: 'object',
    properties: {
        title: {
            type: 'string'
        },
        fileKey: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['PATIENT', 'ICD']
        }
    }
} as const;

export const $ProviderGroupCreateRequest = {
    required: ['name', 'whiteLabel'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        countryCode: {
            type: 'string'
        },
        phone: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        practiceAddress: {
            '$ref': '#/components/schemas/AddressEntity'
        },
        billingAddress: {
            '$ref': '#/components/schemas/AddressEntity'
        },
        specialities: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SpecialityEntity'
            }
        },
        costOfPortal: {
            type: 'number'
        },
        selfBilling: {
            type: 'boolean'
        },
        sameAsPrimaryAddress: {
            type: 'boolean'
        },
        logo: {
            type: 'string'
        },
        bio: {
            type: 'string'
        },
        whiteLabel: {
            pattern: '^[a-zA-Z]+[a-zA-Z0-9]*$',
            type: 'string'
        },
        themeColor: {
            type: 'string'
        },
        website: {
            type: 'string'
        }
    }
} as const;

export const $SendSMSRequest = {
    type: 'object',
    properties: {
        patientUserUuid: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        conversation: {
            type: 'string'
        },
        initialMessage: {
            type: 'string'
        },
        noData: {
            type: 'boolean'
        }
    }
} as const;

export const $Media = {
    type: 'object',
    properties: {
        mediaUrl: {
            type: 'string'
        },
        contentType: {
            type: 'string'
        }
    }
} as const;

export const $SendMessagesRequest = {
    type: 'object',
    properties: {
        patientUserUuid: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        enrollmentServiceType: {
            type: 'string',
            enum: ['RPM', 'RTM', 'CCM']
        },
        twilioType: {
            type: 'string',
            enum: ['TEMPLATE', 'CONSENT']
        },
        conversation: {
            type: 'string'
        },
        media: {
            '$ref': '#/components/schemas/Media'
        },
        initialMessage: {
            type: 'string'
        },
        noData: {
            type: 'boolean'
        }
    }
} as const;

export const $PatientCreateRequest = {
    required: ['countryCode', 'email', 'firstname', 'lastname', 'phone', 'userName'],
    type: 'object',
    properties: {
        userName: {
            type: 'string'
        },
        renderingProvider: {
            type: 'string'
        },
        registrationDate: {
            type: 'string',
            format: 'date'
        },
        firstname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        lastname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        middlename: {
            type: 'string'
        },
        maritalStatus: {
            type: 'string',
            enum: ['SINGLE', 'MARRIED', 'DIVORCED', 'WIDOW']
        },
        ssn: {
            type: 'string'
        },
        mrn: {
            type: 'string'
        },
        email: {
            maxLength: 64,
            minLength: 5,
            pattern: '^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$',
            type: 'string'
        },
        countryCode: {
            type: 'string'
        },
        phone: {
            maxLength: 10,
            minLength: 10,
            type: 'string'
        },
        secondaryPhone: {
            maxLength: 10,
            minLength: 10,
            type: 'string'
        },
        dob: {
            type: 'string'
        },
        language: {
            type: 'string',
            enum: ['ENGLISH', 'SPANISH', 'FRENCH', 'GERMAN', 'ARABIC', 'JAPANAESE', 'KOREAN', 'RUSSIAN']
        },
        gender: {
            type: 'string',
            enum: ['MALE', 'FEMALE', 'OTHER']
        },
        avatar: {
            type: 'string'
        },
        addressEntity: {
            '$ref': '#/components/schemas/AddressEntity'
        },
        familyMemberEntitySet: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/FamilyMemberEntity'
            }
        },
        consentToMessage: {
            type: 'boolean'
        },
        consentToCall: {
            type: 'boolean'
        },
        consentToEmail: {
            type: 'boolean'
        },
        hasInsurance: {
            type: 'boolean'
        },
        insuranceCreateRequestSet: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InsuranceCreateRequest'
            }
        },
        sendInvite: {
            type: 'boolean'
        },
        active: {
            type: 'boolean'
        },
        isSendConsentRPM: {
            type: 'boolean'
        },
        isSendConsentRTM: {
            type: 'boolean'
        },
        isSendConsentCCM: {
            type: 'boolean'
        }
    }
} as const;

export const $MessageRequest = {
    required: ['message', 'patientUserUuid'],
    type: 'object',
    properties: {
        patientUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        message: {
            type: 'string'
        },
        enrollmentServiceType: {
            type: 'string',
            enum: ['RPM', 'RTM', 'CCM']
        }
    }
} as const;

export const $CareTeamRequest = {
    type: 'object',
    properties: {
        careManagerUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        isCareManager: {
            type: 'boolean'
        },
        provider: {
            type: 'string',
            format: 'uuid'
        },
        note: {
            type: 'string'
        },
        serviceType: {
            type: 'string',
            enum: ['RPM', 'RTM', 'CCM']
        }
    }
} as const;

export const $CreateInsuranceList = {
    type: 'object',
    properties: {
        patientUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        insuranceMobileRequest: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/InsuranceMobileRequest'
            }
        }
    }
} as const;

export const $ImportRequestIcd = {
    required: ['fileKey', 'title', 'type'],
    type: 'object',
    properties: {
        title: {
            type: 'string'
        },
        fileKey: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['PATIENT', 'ICD']
        }
    }
} as const;

export const $GlobalNoteRequest = {
    required: ['description', 'patientUserUuid'],
    type: 'object',
    properties: {
        patientUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        description: {
            type: 'string'
        }
    }
} as const;

export const $UserSignatureRequest = {
    required: ['isSigned', 'signature'],
    type: 'object',
    properties: {
        signature: {
            type: 'string'
        },
        isSigned: {
            type: 'boolean'
        }
    }
} as const;

export const $DocumentRequest = {
    required: ['documentType', 'fileKey', 'fileName'],
    type: 'object',
    properties: {
        documentType: {
            type: 'string',
            enum: ['CONSENT', 'EDUCATION', 'CHALLENGES', 'GENERAL', 'REPORT', 'HOME_EXERCISE']
        },
        fileName: {
            type: 'string'
        },
        fileKey: {
            type: 'string'
        },
        fileType: {
            type: 'string'
        },
        specialities: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Speciality'
            }
        },
        shareWithAllPatient: {
            type: 'boolean'
        },
        patientUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        patientPrivate: {
            type: 'boolean'
        },
        reason: {
            type: 'string'
        },
        isSharedToPatient: {
            type: 'boolean'
        }
    }
} as const;

export const $MonitoringBillingUpdateRequest = {
    type: 'object',
    properties: {
        claimNumber: {
            type: 'string'
        },
        claimStatus: {
            type: 'string'
        },
        paidDate: {
            type: 'string',
            format: 'date'
        },
        paidStatus: {
            type: 'string',
            enum: ['PAID', 'UNPAID', 'PARTIALLY']
        },
        claimDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $InteractionBillingUpdateRequest = {
    type: 'object',
    properties: {
        claimNumber: {
            type: 'string'
        },
        claimStatus: {
            type: 'string'
        },
        paidDate: {
            type: 'string',
            format: 'date'
        },
        paidStatus: {
            type: 'string',
            enum: ['PAID', 'UNPAID', 'PARTIALLY']
        },
        claimDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $EnrollmentBillingUpdateRequest = {
    type: 'object',
    properties: {
        claimNumber: {
            type: 'string'
        },
        claimStatus: {
            type: 'string'
        },
        paidDate: {
            type: 'string',
            format: 'date'
        },
        paidStatus: {
            type: 'string',
            enum: ['PAID', 'UNPAID', 'PARTIALLY']
        },
        claimDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const $SetPasswordRequest = {
    required: ['newPassword', 'userUuid'],
    type: 'object',
    properties: {
        newPassword: {
            type: 'string'
        },
        linkUuid: {
            type: 'string',
            format: 'uuid'
        },
        userUuid: {
            type: 'string',
            format: 'uuid'
        },
        whitelabel: {
            type: 'string'
        },
        category: {
            type: 'string',
            enum: ['ADMIN', 'SUPER_ADMIN', 'PROVIDER', 'PATIENT', 'STAFF']
        }
    }
} as const;

export const $AuthRequest = {
    required: ['password', 'userName'],
    type: 'object',
    properties: {
        userName: {
            type: 'string'
        },
        password: {
            type: 'string'
        },
        whitelabel: {
            type: 'string'
        }
    }
} as const;

export const $ForgotPasswordRequest = {
    required: ['username'],
    type: 'object',
    properties: {
        username: {
            type: 'string'
        },
        whitelabel: {
            type: 'string'
        }
    }
} as const;

export const $CreateAdminUserRequest = {
    required: ['countryCode', 'email', 'firstname', 'lastname', 'phone', 'userName'],
    type: 'object',
    properties: {
        userName: {
            type: 'string'
        },
        email: {
            maxLength: 64,
            minLength: 5,
            pattern: '^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$',
            type: 'string'
        },
        firstname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        lastname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        middlename: {
            type: 'string'
        },
        countryCode: {
            type: 'string'
        },
        phone: {
            maxLength: 10,
            minLength: 10,
            type: 'string'
        },
        avatar: {
            type: 'string'
        }
    }
} as const;

export const $ActivityRequest = {
    required: ['activity'],
    type: 'object',
    properties: {
        providerUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        activity: {
            type: 'string'
        }
    }
} as const;

export const $CareManager = {
    type: 'object',
    properties: {
        primaryCareManager: {
            '$ref': '#/components/schemas/ProviderEntity'
        },
        secondaryCareManager: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProviderEntity'
            }
        },
        providers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProviderEntity'
            }
        },
        secondary: {
            type: 'boolean'
        }
    }
} as const;

export const $PageCareManager = {
    type: 'object',
    properties: {
        totalElements: {
            type: 'integer',
            format: 'int64'
        },
        totalPages: {
            type: 'integer',
            format: 'int32'
        },
        size: {
            type: 'integer',
            format: 'int32'
        },
        content: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CareManager'
            }
        },
        number: {
            type: 'integer',
            format: 'int32'
        },
        sort: {
            '$ref': '#/components/schemas/SortObject'
        },
        numberOfElements: {
            type: 'integer',
            format: 'int32'
        },
        pageable: {
            '$ref': '#/components/schemas/PageableObject'
        },
        first: {
            type: 'boolean'
        },
        last: {
            type: 'boolean'
        },
        empty: {
            type: 'boolean'
        }
    }
} as const;

export const $PageableObject = {
    type: 'object',
    properties: {
        offset: {
            type: 'integer',
            format: 'int64'
        },
        sort: {
            '$ref': '#/components/schemas/SortObject'
        },
        paged: {
            type: 'boolean'
        },
        unpaged: {
            type: 'boolean'
        },
        pageNumber: {
            type: 'integer',
            format: 'int32'
        },
        pageSize: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const $ProviderEntity = {
    type: 'object',
    properties: {
        createdBy: {
            type: 'string'
        },
        modifiedBy: {
            type: 'string'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        userEntity: {
            '$ref': '#/components/schemas/UserEntity'
        },
        providerType: {
            type: 'string',
            enum: ['MD', 'RN', 'DO', 'LPN', 'APRN', 'NP', 'PA', 'PT', 'OT', 'PSYD', 'LCSW', 'FNP', 'RD', 'OTHER']
        },
        specialities: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SpecialityEntity'
            }
        },
        npiNumber: {
            type: 'string'
        },
        yearOfExperience: {
            type: 'integer',
            format: 'int32'
        },
        providerLicenseEntity: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProviderLicenseEntity'
            }
        },
        bio: {
            type: 'string'
        },
        role: {
            type: 'string',
            enum: ['CARE_COORDINATORS', 'NURSE_PRACTITIONERS', 'PHYSICIAN_ASSISTANTS', 'PHARMACISTS', 'PHYSICIANS', 'MEDICAL_DOCTORS', 'PRACTICE_ADMIN', 'BILLING_ADMIN']
        }
    }
} as const;

export const $SortObject = {
    type: 'object',
    properties: {
        empty: {
            type: 'boolean'
        },
        sorted: {
            type: 'boolean'
        },
        unsorted: {
            type: 'boolean'
        }
    }
} as const;

export const $UserEntity = {
    type: 'object',
    properties: {
        createdBy: {
            type: 'string'
        },
        modifiedBy: {
            type: 'string'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        id: {
            type: 'integer',
            format: 'int64'
        },
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        userName: {
            type: 'string'
        },
        iamId: {
            type: 'string'
        },
        firstname: {
            type: 'string'
        },
        lastname: {
            type: 'string'
        },
        middlename: {
            type: 'string'
        },
        maritalStatus: {
            type: 'string',
            enum: ['SINGLE', 'MARRIED', 'DIVORCED', 'WIDOW']
        },
        ssn: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        countryCode: {
            type: 'string'
        },
        phone: {
            type: 'string'
        },
        secondaryPhone: {
            type: 'string'
        },
        dob: {
            type: 'string'
        },
        language: {
            type: 'string',
            enum: ['ENGLISH', 'SPANISH', 'FRENCH', 'GERMAN', 'ARABIC', 'JAPANAESE', 'KOREAN', 'RUSSIAN']
        },
        category: {
            type: 'string',
            enum: ['ADMIN', 'SUPER_ADMIN', 'PROVIDER', 'PATIENT', 'STAFF']
        },
        gender: {
            type: 'string',
            enum: ['MALE', 'FEMALE', 'OTHER']
        },
        avatar: {
            type: 'string'
        },
        fax: {
            type: 'string'
        },
        lastLogin: {
            type: 'string',
            format: 'date-time'
        },
        active: {
            type: 'boolean'
        },
        deleted: {
            type: 'boolean'
        },
        emailVerified: {
            type: 'boolean'
        },
        phoneVerified: {
            type: 'boolean'
        }
    }
} as const;

export const $DocumentDTO = {
    type: 'object',
    properties: {
        formName: {
            type: 'string'
        },
        signDate: {
            type: 'string',
            format: 'date-time'
        },
        signatureKey: {
            type: 'string'
        },
        signatureUrl: {
            type: 'string'
        },
        signKey: {
            type: 'string'
        }
    }
} as const;

export const $PageDocumentDTO = {
    type: 'object',
    properties: {
        totalElements: {
            type: 'integer',
            format: 'int64'
        },
        totalPages: {
            type: 'integer',
            format: 'int32'
        },
        size: {
            type: 'integer',
            format: 'int32'
        },
        content: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DocumentDTO'
            }
        },
        number: {
            type: 'integer',
            format: 'int32'
        },
        sort: {
            '$ref': '#/components/schemas/SortObject'
        },
        numberOfElements: {
            type: 'integer',
            format: 'int32'
        },
        pageable: {
            '$ref': '#/components/schemas/PageableObject'
        },
        first: {
            type: 'boolean'
        },
        last: {
            type: 'boolean'
        },
        empty: {
            type: 'boolean'
        }
    }
} as const;

export const $Link = {
    type: 'object',
    properties: {
        href: {
            type: 'string'
        },
        templated: {
            type: 'boolean'
        }
    }
} as const;

export const $EnrollmentTerminateRequest = {
    required: ['terminateStatus'],
    type: 'object',
    properties: {
        terminateNote: {
            type: 'string'
        },
        terminateStatus: {
            type: 'string',
            enum: ['ALIVE', 'DECEASED']
        },
        terminateByUuid: {
            type: 'string',
            format: 'uuid'
        },
        terminateTime: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $SendSMSPatient = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        phone: {
            type: 'string'
        },
        patientUserUuid: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const $SendSMSProvider = {
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        category: {
            type: 'string'
        },
        phone: {
            type: 'string'
        },
        providerUserUuid: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const $SendSMSTwilio = {
    type: 'object',
    properties: {
        sendSMSPatientSet: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SendSMSPatient'
            }
        },
        sendSMSProvider: {
            '$ref': '#/components/schemas/SendSMSProvider'
        },
        description: {
            type: 'string'
        }
    }
} as const;

export const $UpdateUserTwilioRequest = {
    type: 'object',
    properties: {
        userUuid: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        avatar: {
            type: 'string'
        },
        email: {
            type: 'string'
        }
    }
} as const;

export const $SendAppMessagesPatient = {
    type: 'object',
    properties: {
        patientName: {
            type: 'string'
        },
        patientUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        enrollmentServiceType: {
            type: 'string',
            enum: ['RPM', 'RTM', 'CCM']
        }
    }
} as const;

export const $SendAppMessagesTwilio = {
    type: 'object',
    properties: {
        sendAppMessagePatients: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SendAppMessagesPatient'
            }
        },
        providerName: {
            type: 'string'
        },
        providerUserUuid: {
            type: 'string',
            format: 'uuid'
        },
        message: {
            type: 'string'
        },
        media: {
            '$ref': '#/components/schemas/Media'
        }
    }
} as const;

export const $CreateUserTwilioRequest = {
    type: 'object',
    properties: {
        userUuid: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        avatar: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        primaryCareManager: {
            type: 'boolean'
        }
    }
} as const;

export const $AddUpdateParticipantToTwilioRequest = {
    type: 'object',
    properties: {
        userUuid: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        avatar: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        primaryCareManager: {
            type: 'boolean'
        }
    }
} as const;

export const $AddUpdateParticipantWithServiceRequest = {
    type: 'object',
    properties: {
        enrollmentServiceType: {
            type: 'string',
            enum: ['RPM', 'RTM', 'CCM']
        },
        addUpdateParticipantToTwilioRequestList: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AddUpdateParticipantToTwilioRequest'
            }
        }
    }
} as const;

export const $UserRequest = {
    required: ['category', 'countryCode', 'email', 'firstname', 'lastname', 'phone', 'userName'],
    type: 'object',
    properties: {
        userName: {
            type: 'string'
        },
        email: {
            maxLength: 64,
            minLength: 5,
            pattern: '^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$',
            type: 'string'
        },
        firstname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        lastname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        middlename: {
            type: 'string'
        },
        countryCode: {
            type: 'string'
        },
        phone: {
            maxLength: 10,
            minLength: 10,
            type: 'string'
        },
        gender: {
            type: 'string'
        },
        dob: {
            type: 'string'
        },
        fax: {
            type: 'string'
        },
        tenantGroup: {
            type: 'string'
        },
        category: {
            type: 'string',
            enum: ['ADMIN', 'SUPER_ADMIN', 'PROVIDER', 'PATIENT', 'STAFF']
        },
        externalLink: {
            type: 'string'
        },
        avatar: {
            type: 'string'
        },
        bio: {
            type: 'string'
        },
        providerLicenseEntity: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProviderLicenseEntity'
            }
        }
    }
} as const;

export const $User = {
    required: ['countryCode', 'email', 'firstname', 'lastname', 'phone'],
    type: 'object',
    properties: {
        uuid: {
            type: 'string',
            format: 'uuid'
        },
        userName: {
            type: 'string'
        },
        firstname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        lastname: {
            maxLength: 32,
            minLength: 2,
            pattern: '[a-zA-Z][a-zA-Z ]+',
            type: 'string'
        },
        middlename: {
            type: 'string'
        },
        email: {
            maxLength: 64,
            minLength: 5,
            pattern: '^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$',
            type: 'string'
        },
        countryCode: {
            type: 'string'
        },
        phone: {
            maxLength: 10,
            minLength: 10,
            type: 'string'
        },
        secondaryPhone: {
            maxLength: 10,
            minLength: 10,
            type: 'string'
        },
        gender: {
            type: 'string',
            enum: ['MALE', 'FEMALE', 'OTHER']
        },
        language: {
            type: 'string',
            enum: ['ENGLISH', 'SPANISH', 'FRENCH', 'GERMAN', 'ARABIC', 'JAPANAESE', 'KOREAN', 'RUSSIAN']
        },
        fax: {
            type: 'string'
        },
        category: {
            type: 'string',
            enum: ['ADMIN', 'SUPER_ADMIN', 'PROVIDER', 'PATIENT', 'STAFF']
        },
        emailVerified: {
            type: 'boolean'
        },
        phoneVerified: {
            type: 'boolean'
        },
        iamId: {
            type: 'string'
        },
        avatar: {
            type: 'string'
        },
        website: {
            type: 'string'
        },
        isSameAsPracticeAddress: {
            type: 'boolean'
        },
        tenantGroup: {
            type: 'string'
        },
        active: {
            type: 'boolean'
        },
        deleted: {
            type: 'boolean'
        },
        lastLogin: {
            type: 'string',
            format: 'date-time'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        createdBy: {
            type: 'string'
        },
        modifiedBy: {
            type: 'string'
        }
    }
} as const;

export const $AwsImageRequest = {
    required: ['category', 'objectData', 'referenceType'],
    type: 'object',
    properties: {
        providerGroupUuid: {
            type: 'string',
            format: 'uuid'
        },
        objectData: {
            type: 'string'
        },
        category: {
            type: 'string',
            enum: ['ADMIN', 'SUPER_ADMIN', 'PROVIDER_GROUP', 'IMPORT_DATA']
        },
        referenceType: {
            type: 'string',
            enum: ['PROVIDER_PROFILE', 'ADMIN_PROFILE', 'PATIENT_INSURANCE_DOCUMENTS', 'IMPORT_DATA', 'PROFILE', 'LOGO', 'PATIENT', 'PROVIDER', 'DOCUMENT']
        },
        existingKey: {
            type: 'string'
        },
        contentType: {
            type: 'string'
        }
    }
} as const;

export const $TwilioAuthTokenResponse = {
    type: 'object',
    properties: {
        authToken: {
            type: 'string'
        },
        errorMessage: {
            type: 'string'
        }
    }
} as const;