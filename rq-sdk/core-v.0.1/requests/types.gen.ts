// This file is auto-generated by @hey-api/openapi-ts

export type PatientVital = {
    vitalId?: number;
    vital?: 'BLOOD_PRESSURE' | 'BLOOD_PRESSURE_SYSTOLIC' | 'BLOOD_PRESSURE_DIASTOLIC' | 'BLOOD_GLUCOSE' | 'HEART_RATE' | 'BODY_TEMPERATURE' | 'RESPIRATION_RATE' | 'WEIGHT' | 'OXYGEN_SATURATION' | 'PULSE_RATE' | 'BODY_MASS_INDEX' | 'RESPIRATORY_VOLUME' | 'HEIGHT' | 'FORCED_EXPIRATORY_VOLUME' | 'PEAK_EXPIRATORY' | 'PERFUSION_INDEX' | 'STEPS' | 'PAINSCALE';
    actualReadingOne?: number;
    actualReadingTwo?: string;
    actualReadingThree?: number;
    patientUserUuid?: string;
    createdAt?: string;
    reviewStatus?: 'REVIEWED' | 'UNREVIEWED';
    reviewNote?: string;
    deviceReading?: boolean;
    isAlert?: boolean;
    previousActualReadingOne?: number;
    previousActualReadingTwo?: string;
    previousActualReadingThree?: number;
};

export type vital = 'BLOOD_PRESSURE' | 'BLOOD_PRESSURE_SYSTOLIC' | 'BLOOD_PRESSURE_DIASTOLIC' | 'BLOOD_GLUCOSE' | 'HEART_RATE' | 'BODY_TEMPERATURE' | 'RESPIRATION_RATE' | 'WEIGHT' | 'OXYGEN_SATURATION' | 'PULSE_RATE' | 'BODY_MASS_INDEX' | 'RESPIRATORY_VOLUME' | 'HEIGHT' | 'FORCED_EXPIRATORY_VOLUME' | 'PEAK_EXPIRATORY' | 'PERFUSION_INDEX' | 'STEPS' | 'PAINSCALE';

export type reviewStatus = 'REVIEWED' | 'UNREVIEWED';

export type Response = {
    date?: string;
    code?: 'INTERNAL_ERROR' | 'ACCESS_DENIED' | 'USER_NOT_FOUND' | 'NOTIFICATION_MARKED_AS_SEEN' | 'USER_ALREADY_EXIST' | 'BAD_REQUEST' | 'NOT_FOUND' | 'CREATED' | 'SERVICE_UNAVAILABLE' | 'UNAUTHORIZED' | 'DB_ERROR' | 'IAM_ERROR' | 'AWS_ERROR' | 'ENTITY' | 'OK' | 'UPDATED' | 'UNSUPPORTED_MEDIA_TYPE' | 'GONE' | 'INVALID_TEMPLATE_TYPE' | 'WEBHOOK_SUCCESSFUL';
    message?: {
        [key: string]: unknown;
    };
    data?: {
        [key: string]: unknown;
    };
    errors?: {
        [key: string]: (string);
    };
    path?: string;
    requestId?: string;
    version?: string;
};

export type code = 'INTERNAL_ERROR' | 'ACCESS_DENIED' | 'USER_NOT_FOUND' | 'NOTIFICATION_MARKED_AS_SEEN' | 'USER_ALREADY_EXIST' | 'BAD_REQUEST' | 'NOT_FOUND' | 'CREATED' | 'SERVICE_UNAVAILABLE' | 'UNAUTHORIZED' | 'DB_ERROR' | 'IAM_ERROR' | 'AWS_ERROR' | 'ENTITY' | 'OK' | 'UPDATED' | 'UNSUPPORTED_MEDIA_TYPE' | 'GONE' | 'INVALID_TEMPLATE_TYPE' | 'WEBHOOK_SUCCESSFUL';

export type EscalateResolveRequest = {
    resolveEscalateNote?: string;
    escalateStatus: 'CLOSED' | 'OPEN';
};

export type escalateStatus = 'CLOSED' | 'OPEN';

export type TemplateRequest = {
    name: string;
    type?: 'SMS' | 'EMAIL' | 'Note';
    description?: string;
};

export type type = 'SMS' | 'EMAIL' | 'Note';

export type ProviderCreateNewRequest = {
    userName: string;
    firstname: string;
    lastname: string;
    email: string;
    dob?: string;
    middlename?: string;
    countryCode: string;
    phone?: string;
    avatar?: string;
    providerType?: 'MD' | 'RN' | 'DO' | 'LPN' | 'APRN' | 'NP' | 'PA' | 'PT' | 'OT' | 'PSYD' | 'LCSW' | 'FNP' | 'RD' | 'OTHER';
    gender?: 'MALE' | 'FEMALE' | 'OTHER';
    specialitySet?: Array<Speciality>;
    language?: 'ENGLISH' | 'SPANISH' | 'FRENCH' | 'GERMAN' | 'ARABIC' | 'JAPANAESE' | 'KOREAN' | 'RUSSIAN';
    npiNumber?: string;
    yearOfExperience?: number;
    providerLicenseEntity?: Array<ProviderLicenseEntity>;
    bio?: string;
    role?: 'CARE_COORDINATORS' | 'NURSE_PRACTITIONERS' | 'PHYSICIAN_ASSISTANTS' | 'PHARMACISTS' | 'PHYSICIANS' | 'MEDICAL_DOCTORS' | 'PRACTICE_ADMIN' | 'BILLING_ADMIN';
};

export type providerType = 'MD' | 'RN' | 'DO' | 'LPN' | 'APRN' | 'NP' | 'PA' | 'PT' | 'OT' | 'PSYD' | 'LCSW' | 'FNP' | 'RD' | 'OTHER';

export type gender = 'MALE' | 'FEMALE' | 'OTHER';

export type language = 'ENGLISH' | 'SPANISH' | 'FRENCH' | 'GERMAN' | 'ARABIC' | 'JAPANAESE' | 'KOREAN' | 'RUSSIAN';

export type role = 'CARE_COORDINATORS' | 'NURSE_PRACTITIONERS' | 'PHYSICIAN_ASSISTANTS' | 'PHARMACISTS' | 'PHYSICIANS' | 'MEDICAL_DOCTORS' | 'PRACTICE_ADMIN' | 'BILLING_ADMIN';

export type ProviderLicenseEntity = {
    id?: number;
    state?: string;
    licenseNumber?: string;
    expiryDate?: string;
};

export type Speciality = {
    id: number;
    name: string;
};

export type DeviceUpdateRequest = {
    deviceName: string;
    serialId: string;
    deviceId: string;
    image?: string;
    description?: string;
};

export type ProviderUpdateRequest = {
    userName: string;
    email: string;
    firstname: string;
    lastname: string;
    middlename?: string;
    countryCode: string;
    phone: string;
    providerType?: 'MD' | 'RN' | 'DO' | 'LPN' | 'APRN' | 'NP' | 'PA' | 'PT' | 'OT' | 'PSYD' | 'LCSW' | 'FNP' | 'RD' | 'OTHER';
    gender?: 'MALE' | 'FEMALE' | 'OTHER';
    dob?: string;
    specialitySet?: Array<Speciality>;
    language?: 'ENGLISH' | 'SPANISH' | 'FRENCH' | 'GERMAN' | 'ARABIC' | 'JAPANAESE' | 'KOREAN' | 'RUSSIAN';
    npiNumber?: string;
    yearOfExperience?: number;
    providerLicenseEntity?: Array<ProviderLicenseEntity>;
    bio?: string;
    avatar?: string;
    role?: 'CARE_COORDINATORS' | 'NURSE_PRACTITIONERS' | 'PHYSICIAN_ASSISTANTS' | 'PHARMACISTS' | 'PHYSICIANS' | 'MEDICAL_DOCTORS' | 'PRACTICE_ADMIN' | 'BILLING_ADMIN';
};

export type AddressEntity = {
    id?: number;
    line1?: string;
    line2?: string;
    city?: string;
    state?: string;
    country?: string;
    zipcode?: string;
    timeZone?: 'EST' | 'CT' | 'MT' | 'PT' | 'AKT' | 'HST' | 'HAST' | 'MST' | 'IST';
};

export type timeZone = 'EST' | 'CT' | 'MT' | 'PT' | 'AKT' | 'HST' | 'HAST' | 'MST' | 'IST';

export type ProviderGroupUpdateRequest = {
    name: string;
    countryCode?: string;
    phone?: string;
    email?: string;
    practiceAddress?: AddressEntity;
    billingAddress?: AddressEntity;
    specialities?: Array<SpecialityEntity>;
    costOfPortal?: number;
    selfBilling?: boolean;
    sameAsPrimaryAddress?: boolean;
    bio?: string;
    themeColor?: string;
    logo?: string;
    website?: string;
};

export type SpecialityEntity = {
    id?: number;
    name?: string;
};

export type AvatarUpdateRequest = {
    avatar?: string;
    email?: string;
};

export type FamilyMemberEntity = {
    id?: number;
    firstName?: string;
    lastName?: string;
    familyMemberRelation?: 'MOTHER' | 'FATHER' | 'SISTER' | 'BROTHER' | 'SPOUSE' | 'OTHER';
    phone?: string;
    email?: string;
    dob?: string;
    avatar?: string;
    address?: AddressEntity;
    gender?: 'MALE' | 'FEMALE' | 'OTHER';
};

export type familyMemberRelation = 'MOTHER' | 'FATHER' | 'SISTER' | 'BROTHER' | 'SPOUSE' | 'OTHER';

export type InsuranceCreateRequest = {
    insuranceType: 'PRIMARY' | 'SECONDARY' | 'TERTIARY';
    insuranceName: string;
    relationshipToInsured?: 'MOTHER' | 'FATHER' | 'SISTER' | 'BROTHER' | 'SPOUSE' | 'OTHER' | 'SELF';
    holderName?: string;
    insuranceEffectiveDate?: string;
    policyNumber?: string;
    employerOrSchoolName?: string;
    insuranceNumber?: string;
    insurancePlanName?: string;
    insuranceGroupName?: string;
    sameAsPrimaryAddress?: boolean;
    addressEntity?: AddressEntity;
    cardFrontSide?: string;
    cardBackSide?: string;
    insuranceGroupNumber?: string;
    relationshipHolderName?: string;
    frontImageType?: string;
    backImageType?: string;
    primary?: boolean;
    expired?: boolean;
};

export type insuranceType = 'PRIMARY' | 'SECONDARY' | 'TERTIARY';

export type relationshipToInsured = 'MOTHER' | 'FATHER' | 'SISTER' | 'BROTHER' | 'SPOUSE' | 'OTHER' | 'SELF';

export type InsuranceUpdateRequest = {
    insuranceType: 'PRIMARY' | 'SECONDARY' | 'TERTIARY';
    insuranceName: string;
    relationshipToInsured?: 'MOTHER' | 'FATHER' | 'SISTER' | 'BROTHER' | 'SPOUSE' | 'OTHER' | 'SELF';
    holderName?: string;
    insuranceEffectiveDate?: string;
    policyNumber?: string;
    employerOrSchoolName?: string;
    insuranceNumber?: string;
    insurancePlanName?: string;
    insuranceGroupName?: string;
    sameAsPrimaryAddress?: boolean;
    addressEntity?: AddressEntity;
    cardFrontSide?: string;
    cardBackSide?: string;
    insuranceGroupNumber?: string;
    relationshipHolderName?: string;
    frontImageType?: string;
    backImageType?: string;
    uuid: string;
    primary?: boolean;
    expired?: boolean;
};

export type PatientUpdateRequest = {
    userName: string;
    renderingProvider?: string;
    registrationDate?: string;
    firstname: string;
    lastname: string;
    middlename?: string;
    maritalStatus?: 'SINGLE' | 'MARRIED' | 'DIVORCED' | 'WIDOW';
    ssn?: string;
    mrn?: string;
    email: string;
    countryCode: string;
    phone: string;
    secondaryPhone?: string;
    dob?: string;
    language?: 'ENGLISH' | 'SPANISH' | 'FRENCH' | 'GERMAN' | 'ARABIC' | 'JAPANAESE' | 'KOREAN' | 'RUSSIAN';
    gender?: 'MALE' | 'FEMALE' | 'OTHER';
    avatar?: string;
    addressEntity?: AddressEntity;
    familyMemberEntitySet?: Array<FamilyMemberEntity>;
    consentToMessage?: boolean;
    consentToCall?: boolean;
    consentToEmail?: boolean;
    hasInsurance?: boolean;
    insuranceCreateRequestSet?: Array<InsuranceCreateRequest>;
    sendInvite?: boolean;
    active?: boolean;
    isSendConsentRPM?: boolean;
    isSendConsentRTM?: boolean;
    isSendConsentCCM?: boolean;
    userUUid: string;
    insuranceUpdateRequestList?: Array<InsuranceUpdateRequest>;
    insuranceToDeleteUuidSet?: Array<(string)>;
};

export type maritalStatus = 'SINGLE' | 'MARRIED' | 'DIVORCED' | 'WIDOW';

export type FamilyMemberRequest = {
    firstName: string;
    lastName: string;
    familyMemberRelation?: 'MOTHER' | 'FATHER' | 'SISTER' | 'BROTHER' | 'SPOUSE' | 'OTHER';
    phone?: string;
    email?: string;
    dob?: string;
    avatar?: string;
    address?: AddressEntity;
    gender?: 'MALE' | 'FEMALE' | 'OTHER';
};

export type PatientSymptomRequest = {
    patientUserUuid: string;
    srNo?: string;
    symptomName?: string;
    note?: string;
};

export type PatientMedicationRequest = {
    patientUserUuid: string;
    srNo?: string;
    medicationName?: string;
    qty?: string;
    dosageUnit?: string;
    dosageDuration?: string;
    sigNote?: string;
    medicationDate?: string;
    dosageStatus?: 'ACTIVE' | 'HISTORICAL';
    note?: string;
    forDays?: string;
    forLifetime?: boolean;
    endDate?: string;
    duration?: string;
    frequency?: string;
    route?: string;
};

export type dosageStatus = 'ACTIVE' | 'HISTORICAL';

export type PatientConditionRequest = {
    patientUserUuid: string;
    srNo?: string;
    conditionName?: string;
    patientConditionStatus?: 'ACTIVE' | 'HISTORICAL';
    patientConditionType?: 'ACUTE' | 'CHRONIC';
    onSetDate?: string;
    lastOccurrence?: string;
    note?: string;
    icdId: number;
};

export type patientConditionStatus = 'ACTIVE' | 'HISTORICAL';

export type patientConditionType = 'ACUTE' | 'CHRONIC';

export type PatientAllergyRequest = {
    patientUserUuid: string;
    srNo?: string;
    allergyName?: string;
    reaction?: string;
    severity?: 'MILD' | 'MODERATE' | 'SEVERE';
    onSetDate?: string;
    note?: string;
};

export type severity = 'MILD' | 'MODERATE' | 'SEVERE';

export type NotificationUpdateRequest = {
    notificationNamesType?: 'ALERT_GENERATED' | 'ESCALATION_RAISED' | 'NEW_TASK_ASSIGNED' | 'NEW_SMS_RECEIVED' | 'NEW_APP_MESSAGE_RECEIVED' | 'NEW_ENROLLMENT_ADDED' | 'CARE_TEAM_ASSIGNED';
    notificationId?: number;
    text?: boolean;
    email?: boolean;
    pushNotification?: boolean;
};

export type notificationNamesType = 'ALERT_GENERATED' | 'ESCALATION_RAISED' | 'NEW_TASK_ASSIGNED' | 'NEW_SMS_RECEIVED' | 'NEW_APP_MESSAGE_RECEIVED' | 'NEW_ENROLLMENT_ADDED' | 'CARE_TEAM_ASSIGNED';

export type LabResultRequest = {
    patientUserUuid: string;
    lab?: string;
    value?: string;
    record?: string;
    abnormal?: 'L_BELOW_STANDARD_REFERENCE_RANGE' | 'H_ABOVE_STANDARD_REFERENCE_RANGE' | 'LL_LOW_CRITICAL_LEVELS' | 'HH_HIGH_CRITICAL_LEVELS' | 'WNL_WITHIN_NORMAL_LIMITS' | 'N_NORMAL';
    note?: string;
    fileKey?: string;
    type?: string;
};

export type abnormal = 'L_BELOW_STANDARD_REFERENCE_RANGE' | 'H_ABOVE_STANDARD_REFERENCE_RANGE' | 'LL_LOW_CRITICAL_LEVELS' | 'HH_HIGH_CRITICAL_LEVELS' | 'WNL_WITHIN_NORMAL_LIMITS' | 'N_NORMAL';

export type InsuranceMobileRequest = {
    uuid?: string;
    insuranceType: 'PRIMARY' | 'SECONDARY' | 'TERTIARY';
    holderName?: string;
    policyNumber?: string;
    insuranceNumber?: string;
    insuranceGroupName?: string;
    insuranceGroupNumber?: string;
    relationshipToInsured?: 'MOTHER' | 'FATHER' | 'SISTER' | 'BROTHER' | 'SPOUSE' | 'OTHER' | 'SELF';
    insuranceEffectiveDate?: string;
    cardFrontSide?: string;
    cardBackSide?: string;
    insuranceName?: string;
    relationshipHolderName?: string;
    frontImageType?: string;
    backImageType?: string;
    primary?: boolean;
    expired?: boolean;
};

export type IcdCodeRequest = {
    code: string;
    type?: 'ICD_09' | 'ICD_10' | 'ICD_11';
    description?: string;
    isFavorite?: boolean;
    name: string;
};

export type type2 = 'ICD_09' | 'ICD_10' | 'ICD_11';

export type EnrollmentCheckList = {
    deviceConfirmation?: boolean;
    deviceConfirmationNote?: string;
    appDownloadOrSetup?: boolean;
    appDownloadOrSetupNote?: string;
    consentDiscussed?: boolean;
    consentDiscussedNote?: string;
    consentSignedByPatientInTheApp?: boolean;
    consentSignedByPatientInTheAppNote?: string;
    disclaimersDiscussed?: boolean;
    disclaimersDiscussedNote?: string;
    monitoringDiscussed?: boolean;
    monitoringDiscussedNote?: string;
    monitoringRedFlagDiscussed?: boolean;
    monitoringRedFlagDiscussedNote?: string;
    twoWayInteractionDiscused?: boolean;
    twoWayInteractionDiscusedNote?: string;
    careCoOrdinatorAssigned?: boolean;
    careCoOrdinatorAssignedNote?: string;
    id?: number;
};

export type EnrollmentIcdMap = {
    code?: string;
    description?: string;
    icdId?: number;
};

export type EnrollmentRequest = {
    patientUserUuid?: string;
    dob?: string;
    phone?: string;
    email?: string;
    insuranceUuid?: string;
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    providerUserUuid?: string;
    enrollmentIcdMapSet?: Array<EnrollmentIcdMap>;
    source?: 'APPLE_HEALTH' | 'GOOGLE_FIT' | 'IHEALTH_BLOOD_PRESSURE' | 'IHEALTH_BLOOD_GLUCOSE' | 'IHEALTH';
    careManagerUserUuid?: string;
    planEntitySet?: Array<Plan>;
    enrollmentChecklist?: EnrollmentCheckList;
    familyMemberEntitySet?: Array<FamilyMemberEntity>;
    secondaryCareManagerSet?: Array<(string)>;
    patientDocumentMappingRequest?: PatientDocumentMappingRequest;
    deviceset?: Array<(string)>;
    sendConsent?: boolean;
};

export type enrollmentServiceType = 'RPM' | 'RTM' | 'CCM';

export type source = 'APPLE_HEALTH' | 'GOOGLE_FIT' | 'IHEALTH_BLOOD_PRESSURE' | 'IHEALTH_BLOOD_GLUCOSE' | 'IHEALTH';

export type PatientDocumentMappingRequest = {
    documentUuidSet: Array<(string)>;
    patientUserUuidSet: Array<(string)>;
};

export type Plan = {
    id?: number;
    vital?: 'BLOOD_PRESSURE' | 'BLOOD_PRESSURE_SYSTOLIC' | 'BLOOD_PRESSURE_DIASTOLIC' | 'BLOOD_GLUCOSE' | 'HEART_RATE' | 'BODY_TEMPERATURE' | 'RESPIRATION_RATE' | 'WEIGHT' | 'OXYGEN_SATURATION' | 'PULSE_RATE' | 'BODY_MASS_INDEX' | 'RESPIRATORY_VOLUME' | 'HEIGHT' | 'FORCED_EXPIRATORY_VOLUME' | 'PEAK_EXPIRATORY' | 'PERFUSION_INDEX' | 'STEPS' | 'PAINSCALE';
    checkInFrequency?: 'HOURLY' | 'DAILY' | 'WEEKLY' | 'MONTHLY';
    checkInInterval?: number;
    minValue?: number;
    maxValue?: number;
    notificationMedium?: 'CALL' | 'SMS';
    notifyToUserUuid?: string;
    assignedTo?: Provider;
};

export type checkInFrequency = 'HOURLY' | 'DAILY' | 'WEEKLY' | 'MONTHLY';

export type notificationMedium = 'CALL' | 'SMS';

export type Provider = {
    uuid?: string;
    userName?: string;
    firstname?: string;
    lastname?: string;
    middlename?: string;
    email?: string;
    countryCode?: string;
    phone?: string;
    gender?: 'MALE' | 'FEMALE' | 'OTHER';
    dob?: string;
    language?: 'ENGLISH' | 'SPANISH' | 'FRENCH' | 'GERMAN' | 'ARABIC' | 'JAPANAESE' | 'KOREAN' | 'RUSSIAN';
    category?: 'ADMIN' | 'SUPER_ADMIN' | 'PROVIDER' | 'PATIENT' | 'STAFF';
    emailVerified?: boolean;
    phoneVerified?: boolean;
    iamId?: string;
    avatar?: string;
    providerType?: 'MD' | 'RN' | 'DO' | 'LPN' | 'APRN' | 'NP' | 'PA' | 'PT' | 'OT' | 'PSYD' | 'LCSW' | 'FNP' | 'RD' | 'OTHER';
    specialitySet?: Array<SpecialityEntity>;
    npiNumber?: string;
    yearOfExperience?: number;
    providerLicenseSet?: Array<ProviderLicenseEntity>;
    bio?: string;
    active?: boolean;
    deleted?: boolean;
    lastLogin?: string;
    createdAt?: string;
    updatedAt?: string;
    createdBy?: string;
    modifiedBy?: string;
    role?: 'CARE_COORDINATORS' | 'NURSE_PRACTITIONERS' | 'PHYSICIAN_ASSISTANTS' | 'PHARMACISTS' | 'PHYSICIANS' | 'MEDICAL_DOCTORS' | 'PRACTICE_ADMIN' | 'BILLING_ADMIN';
    isCareCoordinator?: boolean;
};

export type category = 'ADMIN' | 'SUPER_ADMIN' | 'PROVIDER' | 'PATIENT' | 'STAFF';

export type AdminUserUpdateRequest = {
    userName: string;
    email: string;
    firstname: string;
    lastname: string;
    countryCode: string;
    phone?: string;
    roleUUID?: string;
    avatar?: string;
};

export type UpdateCheckboxesInteraction = {
    patientUserUuid?: string;
    reachOutWeek1?: boolean;
    reachOutWeek2?: boolean;
    reachOutWeek3?: boolean;
    reachOutWeek4?: boolean;
    updateEhrChart?: boolean;
    challenge?: boolean;
    bingo?: boolean;
    exerciseProgram?: boolean;
    mealPlan?: boolean;
    followUpChallenge?: boolean;
    followUpBingo?: boolean;
    followUpExerciseProgram?: boolean;
    followUpMealPlan?: boolean;
    patientSummary?: boolean;
    wonChallenge?: boolean;
    wonBingo?: boolean;
    enrollmentServiceType?: 'RPM' | 'RTM' | 'CCM';
};

export type MonitoringDataUpdateRequest = {
    isResolve?: boolean;
    resolveNote?: string;
    isEscalate?: boolean;
    escalateNote?: string;
    escalateProviderUserUuid?: string;
    escalateDate?: string;
};

export type PatientWorkListRequest = {
    isIntroductionOrTemplate?: boolean;
    isConsent?: boolean;
    isEducation?: boolean;
};

export type EscalateRequest = {
    escalateNote?: string;
    escalatePatientUserUuid?: string;
    escalateProviderUserUuid?: string;
    escalateDate?: string;
    escalateStatus?: 'CLOSED' | 'OPEN';
    enrollmentServiceType?: 'RPM' | 'RTM' | 'CCM';
};

export type MonitoringDataRequest = {
    vital?: 'BLOOD_PRESSURE' | 'BLOOD_PRESSURE_SYSTOLIC' | 'BLOOD_PRESSURE_DIASTOLIC' | 'BLOOD_GLUCOSE' | 'HEART_RATE' | 'BODY_TEMPERATURE' | 'RESPIRATION_RATE' | 'WEIGHT' | 'OXYGEN_SATURATION' | 'PULSE_RATE' | 'BODY_MASS_INDEX' | 'RESPIRATORY_VOLUME' | 'HEIGHT' | 'FORCED_EXPIRATORY_VOLUME' | 'PEAK_EXPIRATORY' | 'PERFUSION_INDEX' | 'STEPS' | 'PAINSCALE';
    actualReadingOne?: number;
    actualReadingTwo?: number;
    actualReadingThree?: number;
    patientUserUuid?: string;
};

export type LocalTime = {
    hour?: number;
    minute?: number;
    second?: number;
    nano?: number;
};

export type TimeLogRequest = {
    providerUserUuid?: string;
    patientUserUuid?: string;
    activity?: string;
    logNote?: string;
    logAt?: string;
    duration?: LocalTime;
    enrollmentServiceType?: 'RPM' | 'RTM' | 'CCM';
};

export type DeviceCreateRequest = {
    deviceName: string;
    serialId?: string;
    deviceId?: string;
    description?: string;
    image?: string;
    venderName?: 'APPLE_HEALTH' | 'GOOGLE_FIT' | 'IHEALTH_BLOOD_PRESSURE' | 'IHEALTH_BLOOD_GLUCOSE' | 'IHEALTH';
    assign?: boolean;
};

export type venderName = 'APPLE_HEALTH' | 'GOOGLE_FIT' | 'IHEALTH_BLOOD_PRESSURE' | 'IHEALTH_BLOOD_GLUCOSE' | 'IHEALTH';

export type ProviderCreateRequest = {
    userName: string;
    email: string;
    firstname: string;
    lastname: string;
    middlename?: string;
    countryCode: string;
    phone?: string;
    avatar?: string;
    providerType?: 'MD' | 'RN' | 'DO' | 'LPN' | 'APRN' | 'NP' | 'PA' | 'PT' | 'OT' | 'PSYD' | 'LCSW' | 'FNP' | 'RD' | 'OTHER';
    gender?: 'MALE' | 'FEMALE' | 'OTHER';
    dob?: string;
    specialitySet?: Array<Speciality>;
    language?: 'ENGLISH' | 'SPANISH' | 'FRENCH' | 'GERMAN' | 'ARABIC' | 'JAPANAESE' | 'KOREAN' | 'RUSSIAN';
    npiNumber?: string;
    yearOfExperience?: number;
    providerLicenseEntity?: Array<ProviderLicenseEntity>;
    bio?: string;
    role?: 'CARE_COORDINATORS' | 'NURSE_PRACTITIONERS' | 'PHYSICIAN_ASSISTANTS' | 'PHARMACISTS' | 'PHYSICIANS' | 'MEDICAL_DOCTORS' | 'PRACTICE_ADMIN' | 'BILLING_ADMIN';
};

export type ImportRequest = {
    title: string;
    fileKey: string;
    type: 'PATIENT' | 'ICD';
};

export type type3 = 'PATIENT' | 'ICD';

export type ProviderGroupCreateRequest = {
    name: string;
    countryCode?: string;
    phone?: string;
    email?: string;
    practiceAddress?: AddressEntity;
    billingAddress?: AddressEntity;
    specialities?: Array<SpecialityEntity>;
    costOfPortal?: number;
    selfBilling?: boolean;
    sameAsPrimaryAddress?: boolean;
    logo?: string;
    bio?: string;
    whiteLabel: string;
    themeColor?: string;
    website?: string;
};

export type SendSMSRequest = {
    patientUserUuid?: Array<(string)>;
    conversation?: string;
    initialMessage?: string;
    noData?: boolean;
};

export type Media = {
    mediaUrl?: string;
    contentType?: string;
};

export type SendMessagesRequest = {
    patientUserUuid?: Array<(string)>;
    enrollmentServiceType?: 'RPM' | 'RTM' | 'CCM';
    twilioType?: 'TEMPLATE' | 'CONSENT';
    conversation?: string;
    media?: Media;
    initialMessage?: string;
    noData?: boolean;
};

export type twilioType = 'TEMPLATE' | 'CONSENT';

export type PatientCreateRequest = {
    userName: string;
    renderingProvider?: string;
    registrationDate?: string;
    firstname: string;
    lastname: string;
    middlename?: string;
    maritalStatus?: 'SINGLE' | 'MARRIED' | 'DIVORCED' | 'WIDOW';
    ssn?: string;
    mrn?: string;
    email: string;
    countryCode: string;
    phone: string;
    secondaryPhone?: string;
    dob?: string;
    language?: 'ENGLISH' | 'SPANISH' | 'FRENCH' | 'GERMAN' | 'ARABIC' | 'JAPANAESE' | 'KOREAN' | 'RUSSIAN';
    gender?: 'MALE' | 'FEMALE' | 'OTHER';
    avatar?: string;
    addressEntity?: AddressEntity;
    familyMemberEntitySet?: Array<FamilyMemberEntity>;
    consentToMessage?: boolean;
    consentToCall?: boolean;
    consentToEmail?: boolean;
    hasInsurance?: boolean;
    insuranceCreateRequestSet?: Array<InsuranceCreateRequest>;
    sendInvite?: boolean;
    active?: boolean;
    isSendConsentRPM?: boolean;
    isSendConsentRTM?: boolean;
    isSendConsentCCM?: boolean;
};

export type MessageRequest = {
    patientUserUuid: string;
    message: string;
    enrollmentServiceType?: 'RPM' | 'RTM' | 'CCM';
};

export type CareTeamRequest = {
    careManagerUserUuid?: string;
    isCareManager?: boolean;
    provider?: string;
    note?: string;
    serviceType?: 'RPM' | 'RTM' | 'CCM';
};

export type serviceType = 'RPM' | 'RTM' | 'CCM';

export type CreateInsuranceList = {
    patientUserUuid?: string;
    insuranceMobileRequest?: Array<InsuranceMobileRequest>;
};

export type ImportRequestIcd = {
    title: string;
    fileKey: string;
    type: 'PATIENT' | 'ICD';
};

export type GlobalNoteRequest = {
    patientUserUuid: string;
    description: string;
};

export type UserSignatureRequest = {
    signature: string;
    isSigned: boolean;
};

export type DocumentRequest = {
    documentType: 'CONSENT' | 'EDUCATION' | 'CHALLENGES' | 'GENERAL' | 'REPORT' | 'HOME_EXERCISE';
    fileName: string;
    fileKey: string;
    fileType?: string;
    specialities?: Array<Speciality>;
    shareWithAllPatient?: boolean;
    patientUserUuid?: string;
    patientPrivate?: boolean;
    reason?: string;
    isSharedToPatient?: boolean;
};

export type documentType = 'CONSENT' | 'EDUCATION' | 'CHALLENGES' | 'GENERAL' | 'REPORT' | 'HOME_EXERCISE';

export type MonitoringBillingUpdateRequest = {
    claimNumber?: string;
    claimStatus?: string;
    paidDate?: string;
    paidStatus?: 'PAID' | 'UNPAID' | 'PARTIALLY';
    claimDate?: string;
};

export type paidStatus = 'PAID' | 'UNPAID' | 'PARTIALLY';

export type InteractionBillingUpdateRequest = {
    claimNumber?: string;
    claimStatus?: string;
    paidDate?: string;
    paidStatus?: 'PAID' | 'UNPAID' | 'PARTIALLY';
    claimDate?: string;
};

export type EnrollmentBillingUpdateRequest = {
    claimNumber?: string;
    claimStatus?: string;
    paidDate?: string;
    paidStatus?: 'PAID' | 'UNPAID' | 'PARTIALLY';
    claimDate?: string;
};

export type SetPasswordRequest = {
    newPassword: string;
    linkUuid?: string;
    userUuid: string;
    whitelabel?: string;
    category?: 'ADMIN' | 'SUPER_ADMIN' | 'PROVIDER' | 'PATIENT' | 'STAFF';
};

export type AuthRequest = {
    userName: string;
    password: string;
    whitelabel?: string;
};

export type ForgotPasswordRequest = {
    username: string;
    whitelabel?: string;
};

export type CreateAdminUserRequest = {
    userName: string;
    email: string;
    firstname: string;
    lastname: string;
    middlename?: string;
    countryCode: string;
    phone: string;
    avatar?: string;
};

export type ActivityRequest = {
    providerUserUuid?: string;
    activity: string;
};

export type CareManager = {
    primaryCareManager?: ProviderEntity;
    secondaryCareManager?: Array<ProviderEntity>;
    providers?: Array<ProviderEntity>;
    secondary?: boolean;
};

export type PageCareManager = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: Array<CareManager>;
    number?: number;
    sort?: SortObject;
    numberOfElements?: number;
    pageable?: PageableObject;
    first?: boolean;
    last?: boolean;
    empty?: boolean;
};

export type PageableObject = {
    offset?: number;
    sort?: SortObject;
    paged?: boolean;
    unpaged?: boolean;
    pageNumber?: number;
    pageSize?: number;
};

export type ProviderEntity = {
    createdBy?: string;
    modifiedBy?: string;
    createdAt?: string;
    updatedAt?: string;
    id?: number;
    userEntity?: UserEntity;
    providerType?: 'MD' | 'RN' | 'DO' | 'LPN' | 'APRN' | 'NP' | 'PA' | 'PT' | 'OT' | 'PSYD' | 'LCSW' | 'FNP' | 'RD' | 'OTHER';
    specialities?: Array<SpecialityEntity>;
    npiNumber?: string;
    yearOfExperience?: number;
    providerLicenseEntity?: Array<ProviderLicenseEntity>;
    bio?: string;
    role?: 'CARE_COORDINATORS' | 'NURSE_PRACTITIONERS' | 'PHYSICIAN_ASSISTANTS' | 'PHARMACISTS' | 'PHYSICIANS' | 'MEDICAL_DOCTORS' | 'PRACTICE_ADMIN' | 'BILLING_ADMIN';
};

export type SortObject = {
    empty?: boolean;
    sorted?: boolean;
    unsorted?: boolean;
};

export type UserEntity = {
    createdBy?: string;
    modifiedBy?: string;
    createdAt?: string;
    updatedAt?: string;
    id?: number;
    uuid?: string;
    userName?: string;
    iamId?: string;
    firstname?: string;
    lastname?: string;
    middlename?: string;
    maritalStatus?: 'SINGLE' | 'MARRIED' | 'DIVORCED' | 'WIDOW';
    ssn?: string;
    email?: string;
    countryCode?: string;
    phone?: string;
    secondaryPhone?: string;
    dob?: string;
    language?: 'ENGLISH' | 'SPANISH' | 'FRENCH' | 'GERMAN' | 'ARABIC' | 'JAPANAESE' | 'KOREAN' | 'RUSSIAN';
    category?: 'ADMIN' | 'SUPER_ADMIN' | 'PROVIDER' | 'PATIENT' | 'STAFF';
    gender?: 'MALE' | 'FEMALE' | 'OTHER';
    avatar?: string;
    fax?: string;
    lastLogin?: string;
    active?: boolean;
    deleted?: boolean;
    emailVerified?: boolean;
    phoneVerified?: boolean;
};

export type DocumentDTO = {
    formName?: string;
    signDate?: string;
    signatureKey?: string;
    signatureUrl?: string;
    signKey?: string;
};

export type PageDocumentDTO = {
    totalElements?: number;
    totalPages?: number;
    size?: number;
    content?: Array<DocumentDTO>;
    number?: number;
    sort?: SortObject;
    numberOfElements?: number;
    pageable?: PageableObject;
    first?: boolean;
    last?: boolean;
    empty?: boolean;
};

export type Link = {
    href?: string;
    templated?: boolean;
};

export type EnrollmentTerminateRequest = {
    terminateNote?: string;
    terminateStatus: 'ALIVE' | 'DECEASED';
    terminateByUuid?: string;
    terminateTime?: string;
};

export type terminateStatus = 'ALIVE' | 'DECEASED';

export type SendSMSPatient = {
    name?: string;
    phone?: string;
    patientUserUuid?: string;
};

export type SendSMSProvider = {
    name?: string;
    category?: string;
    phone?: string;
    providerUserUuid?: string;
};

export type SendSMSTwilio = {
    sendSMSPatientSet?: Array<SendSMSPatient>;
    sendSMSProvider?: SendSMSProvider;
    description?: string;
};

export type UpdateUserTwilioRequest = {
    userUuid?: string;
    name?: string;
    avatar?: string;
    email?: string;
};

export type SendAppMessagesPatient = {
    patientName?: string;
    patientUserUuid?: string;
    enrollmentServiceType?: 'RPM' | 'RTM' | 'CCM';
};

export type SendAppMessagesTwilio = {
    sendAppMessagePatients?: Array<SendAppMessagesPatient>;
    providerName?: string;
    providerUserUuid?: string;
    message?: string;
    media?: Media;
};

export type CreateUserTwilioRequest = {
    userUuid?: string;
    name?: string;
    avatar?: string;
    email?: string;
    primaryCareManager?: boolean;
};

export type AddUpdateParticipantToTwilioRequest = {
    userUuid?: string;
    name?: string;
    avatar?: string;
    email?: string;
    primaryCareManager?: boolean;
};

export type AddUpdateParticipantWithServiceRequest = {
    enrollmentServiceType?: 'RPM' | 'RTM' | 'CCM';
    addUpdateParticipantToTwilioRequestList?: Array<AddUpdateParticipantToTwilioRequest>;
};

export type UserRequest = {
    userName: string;
    email: string;
    firstname: string;
    lastname: string;
    middlename?: string;
    countryCode: string;
    phone: string;
    gender?: string;
    dob?: string;
    fax?: string;
    tenantGroup?: string;
    category: 'ADMIN' | 'SUPER_ADMIN' | 'PROVIDER' | 'PATIENT' | 'STAFF';
    externalLink?: string;
    avatar?: string;
    bio?: string;
    providerLicenseEntity?: Array<ProviderLicenseEntity>;
};

export type User = {
    uuid?: string;
    userName?: string;
    firstname: string;
    lastname: string;
    middlename?: string;
    email: string;
    countryCode: string;
    phone: string;
    secondaryPhone?: string;
    gender?: 'MALE' | 'FEMALE' | 'OTHER';
    language?: 'ENGLISH' | 'SPANISH' | 'FRENCH' | 'GERMAN' | 'ARABIC' | 'JAPANAESE' | 'KOREAN' | 'RUSSIAN';
    fax?: string;
    category?: 'ADMIN' | 'SUPER_ADMIN' | 'PROVIDER' | 'PATIENT' | 'STAFF';
    emailVerified?: boolean;
    phoneVerified?: boolean;
    iamId?: string;
    avatar?: string;
    website?: string;
    isSameAsPracticeAddress?: boolean;
    tenantGroup?: string;
    active?: boolean;
    deleted?: boolean;
    lastLogin?: string;
    createdAt?: string;
    updatedAt?: string;
    createdBy?: string;
    modifiedBy?: string;
};

export type AwsImageRequest = {
    providerGroupUuid?: string;
    objectData: string;
    category: 'ADMIN' | 'SUPER_ADMIN' | 'PROVIDER_GROUP' | 'IMPORT_DATA';
    referenceType: 'PROVIDER_PROFILE' | 'ADMIN_PROFILE' | 'PATIENT_INSURANCE_DOCUMENTS' | 'IMPORT_DATA' | 'PROFILE' | 'LOGO' | 'PATIENT' | 'PROVIDER' | 'DOCUMENT';
    existingKey?: string;
    contentType?: string;
};

export type category2 = 'ADMIN' | 'SUPER_ADMIN' | 'PROVIDER_GROUP' | 'IMPORT_DATA';

export type referenceType = 'PROVIDER_PROFILE' | 'ADMIN_PROFILE' | 'PATIENT_INSURANCE_DOCUMENTS' | 'IMPORT_DATA' | 'PROFILE' | 'LOGO' | 'PATIENT' | 'PROVIDER' | 'DOCUMENT';

export type TwilioAuthTokenResponse = {
    authToken?: string;
    errorMessage?: string;
};

export type UpdateVitalsData = {
    requestBody: PatientVital;
};

export type UpdateVitalsResponse = Response;

export type ResolveEscalateData = {
    id: number;
    requestBody: EscalateResolveRequest;
};

export type ResolveEscalateResponse = Response;

export type UpdateReviewedWithStatusForNoDataData = {
    patientUserUuid: string;
};

export type UpdateReviewedWithStatusForNoDataResponse = Response;

export type UpdateReviewedWithStatusForDataData = {
    monitoringDataId?: number;
    patientUserUuid: string;
    reviewedNote: string;
};

export type UpdateReviewedWithStatusForDataResponse = Response;

export type UpdateReviewedWithStatusForAlertData = {
    monitoringDataId?: number;
    patientUserUuid: string;
    resolvedNote: string;
};

export type UpdateReviewedWithStatusForAlertResponse = Response;

export type UpdateCheckboxesInteractionData = {
    requestBody: UpdateCheckboxesInteraction;
};

export type UpdateCheckboxesInteractionResponse = Response;

export type UpdateAlertConfigData = {
    planId: number;
    requestBody: Plan;
};

export type UpdateAlertConfigResponse = Response;

export type ReviewVitalListData = {
    reviewedNote: string;
    vitalIdList: Array<(number)>;
};

export type ReviewVitalListResponse = Response;

export type ResolveMonitoringAlertsData = {
    id: number;
    requestBody: MonitoringDataUpdateRequest;
};

export type ResolveMonitoringAlertsResponse = Response;

export type UpdatePatientConsentCheckboxData = {
    patientUserUuid: string;
    requestBody: PatientWorkListRequest;
};

export type UpdatePatientConsentCheckboxResponse = Response;

export type OnBoardingPatientAddVitalsData = {
    patientUserUuid: string;
    requestBody: Array<PatientVital>;
};

export type OnBoardingPatientAddVitalsResponse = Response;

export type AddEscalationData = {
    alertIds?: Array<(number)>;
    requestBody: EscalateRequest;
};

export type AddEscalationResponse = Response;

export type EscalateMonitoringAlertsData = {
    id: number;
    requestBody: MonitoringDataUpdateRequest;
};

export type EscalateMonitoringAlertsResponse = Response;

export type AddEscalation1Data = {
    escalateId: number;
    resolveNote: string;
    status?: 'CLOSED' | 'OPEN';
};

export type AddEscalation1Response = Response;

export type CreateMonitoringRecordData = {
    newReading?: boolean;
    requestBody: MonitoringDataRequest;
};

export type CreateMonitoringRecordResponse = Response;

export type AddVitalsData = {
    deviceReading?: boolean;
    patientUserUuid: string;
    requestBody: Array<PatientVital>;
    syncVitalDate?: string;
};

export type AddVitalsResponse = Response;

export type GetWeekWiseInteractionData = {
    careName?: string;
    dob?: string;
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    fullName?: string;
    interactionWeek: 'WEEK1' | 'WEEK2' | 'WEEK3' | 'WEEK4';
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetWeekWiseInteractionResponse = Response;

export type GetByVitalsData = {
    endDate?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    startDate?: string;
    vital: 'BLOOD_PRESSURE' | 'BLOOD_PRESSURE_SYSTOLIC' | 'BLOOD_PRESSURE_DIASTOLIC' | 'BLOOD_GLUCOSE' | 'HEART_RATE' | 'BODY_TEMPERATURE' | 'RESPIRATION_RATE' | 'WEIGHT' | 'OXYGEN_SATURATION' | 'PULSE_RATE' | 'BODY_MASS_INDEX' | 'RESPIRATORY_VOLUME' | 'HEIGHT' | 'FORCED_EXPIRATORY_VOLUME' | 'PEAK_EXPIRATORY' | 'PERFUSION_INDEX' | 'STEPS' | 'PAINSCALE';
};

export type GetByVitalsResponse = Response;

export type ProgressBarPatient360Data = {
    endDate: string;
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    patientUserUuid: string;
    startDate: string;
};

export type ProgressBarPatient360Response = Response;

export type GetOfReadingDataMonotoringDataData = {
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    isAlert: boolean;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetOfReadingDataMonotoringDataResponse = Response;

export type GetNoDataMonitoringData = {
    careName?: string;
    dob?: string;
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    fullName?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetNoDataMonitoringResponse = Response;

export type GetNewPatientData = {
    dob?: string;
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    fullName?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetNewPatientResponse = Response;

export type GetMonitoringDataByIdData = {
    id: number;
};

export type GetMonitoringDataByIdResponse = Response;

export type GetVitalsData = {
    endDate?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    startDate?: string;
    timeZone: string;
    unit?: 'MMHG' | 'FAHRENHEIT' | 'BPM' | 'KG_PER_M2' | 'PERCENTAGE' | 'METERS' | 'LBS' | 'ML' | 'L_PER_MIN' | 'LITERS' | 'DEGREE_CELSIUS' | 'KILOGRAMS';
    vitals?: 'BLOOD_PRESSURE' | 'BLOOD_PRESSURE_SYSTOLIC' | 'BLOOD_PRESSURE_DIASTOLIC' | 'BLOOD_GLUCOSE' | 'HEART_RATE' | 'BODY_TEMPERATURE' | 'RESPIRATION_RATE' | 'WEIGHT' | 'OXYGEN_SATURATION' | 'PULSE_RATE' | 'BODY_MASS_INDEX' | 'RESPIRATORY_VOLUME' | 'HEIGHT' | 'FORCED_EXPIRATORY_VOLUME' | 'PEAK_EXPIRATORY' | 'PERFUSION_INDEX' | 'STEPS' | 'PAINSCALE';
};

export type GetVitalsResponse = Response;

export type GetReviewedNoteData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetReviewedNoteResponse = Response;

export type GetResolvedNoteData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetResolvedNoteResponse = Response;

export type GetLatestVitalsData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    timeZone: string;
};

export type GetLatestVitalsResponse = Response;

export type GetEscalateData = {
    endDate?: string;
    escalateStatus?: 'CLOSED' | 'OPEN';
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    search?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    startDate?: string;
};

export type GetEscalateResponse = Response;

export type GetEscalate1Data = {
    endDate?: string;
    escalateStatus?: 'CLOSED' | 'OPEN';
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    search?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    startDate?: string;
};

export type GetEscalate1Response = Response;

export type GetDistinctVitalRecordsData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetDistinctVitalRecordsResponse = Response;

export type MedicalHistoryAlertData = {
    endDate?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    search?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    startDate?: string;
};

export type MedicalHistoryAlertResponse = Response;

export type GetAlertConfigData = {
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    patientUserUuid: string;
    vital: 'BLOOD_PRESSURE' | 'BLOOD_PRESSURE_SYSTOLIC' | 'BLOOD_PRESSURE_DIASTOLIC' | 'BLOOD_GLUCOSE' | 'HEART_RATE' | 'BODY_TEMPERATURE' | 'RESPIRATION_RATE' | 'WEIGHT' | 'OXYGEN_SATURATION' | 'PULSE_RATE' | 'BODY_MASS_INDEX' | 'RESPIRATORY_VOLUME' | 'HEIGHT' | 'FORCED_EXPIRATORY_VOLUME' | 'PEAK_EXPIRATORY' | 'PERFUSION_INDEX' | 'STEPS' | 'PAINSCALE';
};

export type GetAlertConfigResponse = Response;

export type GetEscalationData = {
    id: number;
};

export type GetEscalationResponse = Response;

export type GetDataMonitoringData = {
    careName?: string;
    dob?: string;
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    fullName?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetDataMonitoringResponse = Response;

export type GetCountInMonitoringSectionData = {
    enrollmentServiceType?: 'RPM' | 'RTM' | 'CCM';
};

export type GetCountInMonitoringSectionResponse = Response;

export type GetCountInInteractionSectionResponse = Response;

export type GetCountInEnrollmentSectionResponse = Response;

export type GetClosedEnrollmentData = {
    careName?: string;
    dob?: string;
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    fullName?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetClosedEnrollmentResponse = Response;

export type GetAllMonitoringDataData = {
    endDate?: string;
    escalateStatus?: 'CLOSED' | 'OPEN';
    isAlert?: boolean;
    isEscalate?: boolean;
    isResolve?: boolean;
    myAlert?: boolean;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    search?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    startDate?: string;
};

export type GetAllMonitoringDataResponse = Response;

export type GetAlertsMonitoringData = {
    careName?: string;
    dob?: string;
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    fullName?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAlertsMonitoringResponse = Response;

export type GetActiveEnrollmentData = {
    careName?: string;
    dob?: string;
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    fullName?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetActiveEnrollmentResponse = Response;

export type DeleteVitalsData = {
    vitalId: number;
};

export type DeleteVitalsResponse = Response;

export type UpdateTemplateData = {
    id: number;
    requestBody: TemplateRequest;
};

export type UpdateTemplateResponse = Response;

export type CreateTemplateData = {
    requestBody: TemplateRequest;
};

export type CreateTemplateResponse = Response;

export type GetTemplateByIdData = {
    id: number;
};

export type GetTemplateByIdResponse = Response;

export type GetAllData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchString?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAllResponse = Response;

export type DeleteTemplateData = {
    id: number;
};

export type DeleteTemplateResponse = Response;

export type GetProviderData = {
    providerGroupUuid: string;
    providerUuid: string;
};

export type GetProviderResponse = Response;

export type GetAllProviderData = {
    providerGroupUuid: string;
    providerUuid: string;
    requestBody: ProviderCreateNewRequest;
};

export type GetAllProviderResponse = Response;

export type DeleteProviderData = {
    providerGroupUuid: string;
    providerUuid: string;
};

export type DeleteProviderResponse = Response;

export type UpdateProviderStatusData = {
    providerGroupUuid: string;
    providerUuid: string;
    status: boolean;
};

export type UpdateProviderStatusResponse = Response;

export type SaveProviderData = {
    providerGroupUuid: string;
    requestBody: ProviderCreateNewRequest;
};

export type SaveProviderResponse = Response;

export type ResentInviteData = {
    providerGroupUuid: string;
    providerUuid: string;
};

export type ResentInviteResponse = Response;

export type GetAllProvider1Data = {
    exclude?: boolean;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    providerGroupUuid: string;
    searchBy?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    status?: boolean;
};

export type GetAllProvider1Response = Response;

export type UpdateStatusData = {
    providerGroupUuid: string;
    status: boolean;
    uuid: string;
};

export type UpdateStatusResponse = Response;

export type UpdateDeviceData = {
    providerGroupUuid: string;
    requestBody: DeviceUpdateRequest;
    uuid: string;
};

export type UpdateDeviceResponse = Response;

export type SaveDeviceData = {
    providerGroupUuid: string;
    requestBody: DeviceCreateRequest;
};

export type SaveDeviceResponse = Response;

export type FetchDeviceData = {
    providerGroupUuid: string;
    uuid: string;
};

export type FetchDeviceResponse = Response;

export type UpdateStatus3Data = {
    providerGroupUuid: string;
    uuid: string;
};

export type UpdateStatus3Response = Response;

export type FetchDevicesData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    providerGroupUuid: string;
    searchString?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    status?: boolean;
};

export type FetchDevicesResponse = Response;

export type UpdateProviderData = {
    requestBody: ProviderUpdateRequest;
    uuid: string;
};

export type UpdateProviderResponse = Response;

export type UpdateProviderNewData = {
    requestBody: ProviderCreateNewRequest;
    uuid: string;
};

export type UpdateProviderNewResponse = Response;

export type UpdateProviderStatus1Data = {
    status: boolean;
    uuid: string;
};

export type UpdateProviderStatus1Response = Response;

export type SaveProvider1Data = {
    requestBody: ProviderCreateRequest;
};

export type SaveProvider1Response = Response;

export type SaveProviderNewData = {
    requestBody: ProviderCreateNewRequest;
};

export type SaveProviderNewResponse = Response;

export type ResendInviteData = {
    uuid: string;
};

export type ResendInviteResponse = Response;

export type AddParticipantData = {
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    patientUserUuid: string;
};

export type AddParticipantResponse = Response;

export type GetProvider1Data = {
    providerUuid: string;
};

export type GetProvider1Response = Response;

export type GetProvider2Response = Response;

export type GetCareManagersData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetCareManagersResponse = PageCareManager;

export type GetProvidersByPatientUuidData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetProvidersByPatientUuidResponse = Response;

export type GetProviderByUuidData = {
    providerUserUuid: string;
};

export type GetProviderByUuidResponse = Response;

export type GetAllProvider3Data = {
    exclude?: boolean;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    role?: string;
    searchBy?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    status?: boolean;
};

export type GetAllProvider3Response = Response;

export type DeleteProvider1Data = {
    uuid: string;
};

export type DeleteProvider1Response = Response;

export type SyncDatabaseSchemaData = {
    uuid: string;
};

export type SyncDatabaseSchemaResponse = Response;

export type GetProviderGroupData = {
    uuid: string;
};

export type GetProviderGroupResponse = Response;

export type UpdateProviderGroupData = {
    requestBody: ProviderGroupUpdateRequest;
    uuid: string;
};

export type UpdateProviderGroupResponse = Response;

export type UpdateStatus1Data = {
    status: boolean;
    uuid: string;
};

export type UpdateStatus1Response = Response;

export type UpdateLastLoginData = {
    userUuid: string;
};

export type UpdateLastLoginResponse = Response;

export type SyncDatabaseSchemasResponse = Response;

export type CreateProviderGroupData = {
    requestBody: ProviderGroupCreateRequest;
};

export type CreateProviderGroupResponse = Response;

export type CreateDefaultDocumentResponse = Response;

export type GetUserCommonDetailsByUsernameData = {
    username: string;
};

export type GetUserCommonDetailsByUsernameResponse = Response;

export type GetUserCommonDetailsByUserUuidData = {
    userUuid: string;
};

export type GetUserCommonDetailsByUserUuidResponse = Response;

export type GetProviderGroupDetailsByTenantGroupData = {
    tenantGroup: string;
};

export type GetProviderGroupDetailsByTenantGroupResponse = Response;

export type GetAllProviderGroupsData = {
    active?: boolean;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchString?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    state?: string;
};

export type GetAllProviderGroupsResponse = Response;

export type UpdateProfileAvatarData = {
    patientUserUuid: string;
    requestBody: AvatarUpdateRequest;
};

export type UpdateProfileAvatarResponse = Response;

export type UpdatePatientData = {
    requestBody: PatientUpdateRequest;
};

export type UpdatePatientResponse = Response;

export type UpdatePatientStatusData = {
    status: boolean;
    uuid: string;
};

export type UpdatePatientStatusResponse = Response;

export type UpdateFamilyDetailsData = {
    familyMemberId: number;
    patientUserUuid: string;
    requestBody: FamilyMemberRequest;
};

export type UpdateFamilyDetailsResponse = Response;

export type SetTemporaryPasswordFieldForPatientData = {
    userUuid: string;
};

export type SetTemporaryPasswordFieldForPatientResponse = Response;

export type SendSmsData = {
    requestBody: SendSMSRequest;
};

export type SendSmsResponse = Response;

export type SendMessagesData = {
    requestBody: SendMessagesRequest;
};

export type SendMessagesResponse = Response;

export type SavePatientData = {
    requestBody: PatientCreateRequest;
};

export type SavePatientResponse = Response;

export type SendMessageProviderData = {
    requestBody: MessageRequest;
};

export type SendMessageProviderResponse = Response;

export type AddCareTeamData = {
    patientUserUuid: string;
    requestBody: CareTeamRequest;
};

export type AddCareTeamResponse = Response;

export type GetPatientByUuidData = {
    uuid: string;
};

export type GetPatientByUuidResponse = Response;

export type DeletePatientData = {
    uuid: string;
};

export type DeletePatientResponse = Response;

export type SearchPatientProviderData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    search?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type SearchPatientProviderResponse = Response;

export type GetProfileData = {
    mobileType?: 'IOS' | 'ANDROID';
};

export type GetProfileResponse = Response;

export type GetAvatarData = {
    patientUserUuid: string;
};

export type GetAvatarResponse = Response;

export type GetSmsWithProviderEntityData = {
    activity: 'ENROLLMENT' | 'NEW_READING_ADDED' | 'ALERT_GENERATE' | 'ALERT_RESOLVED' | 'APP_MESSAGE' | 'SMS_MESSAGE' | 'RECEIVED_NOTIFICATION' | 'TIME_LOGGED' | 'VITALS_REVIEWED' | 'NOTE_ADDED' | 'ESCALATE' | 'VITALS_CONFIG_UPDATE';
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchString?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetSmsWithProviderEntityResponse = Response;

export type GetErrorForFileData = {
    key: string;
};

export type GetErrorForFileResponse = Response;

export type GetFamilyMembersData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetFamilyMembersResponse = Response;

export type GetAllPatientData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchBy?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    status?: boolean;
};

export type GetAllPatientResponse = Response;

export type GetAllCareTeamData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchBy?: string;
    serviceType?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    userUuid: string;
};

export type GetAllCareTeamResponse = Response;

export type GetManagersData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetManagersResponse = Response;

export type DeleteCareTeamData = {
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    id: number;
    patientUserUuid: string;
};

export type DeleteCareTeamResponse = Response;

export type UpdateSymptomData = {
    id: number;
    requestBody: PatientSymptomRequest;
};

export type UpdateSymptomResponse = Response;

export type AddPatientSymptomData = {
    requestBody: PatientSymptomRequest;
};

export type AddPatientSymptomResponse = Response;

export type GetAllByPatientData = {
    userUuid: string;
};

export type GetAllByPatientResponse = Response;

export type DeletePatientSymptomData = {
    id: number;
};

export type DeletePatientSymptomResponse = Response;

export type UpdateMedicationData = {
    id: number;
    requestBody: PatientMedicationRequest;
};

export type UpdateMedicationResponse = Response;

export type AddMedicationData = {
    requestBody: PatientMedicationRequest;
};

export type AddMedicationResponse = Response;

export type ChangeStatusResponse = Response;

export type GetAllMedicationsByPatientData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchBy?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    userUuid: string;
};

export type GetAllMedicationsByPatientResponse = Response;

export type GetMedicationsByPatientData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchString?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    status?: string;
    userUuid: string;
};

export type GetMedicationsByPatientResponse = Response;

export type GetAllMedicationsData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchBy?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAllMedicationsResponse = Response;

export type DeleteMedicationData = {
    id: number;
};

export type DeleteMedicationResponse = Response;

export type UpdatePatientConditionData = {
    id: number;
    requestBody: PatientConditionRequest;
};

export type UpdatePatientConditionResponse = Response;

export type AddPatientConditionData = {
    requestBody: PatientConditionRequest;
};

export type AddPatientConditionResponse = Response;

export type GetAllPatientConditionsData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchString?: string;
    serviceType?: 'RPM' | 'RTM' | 'CCM';
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    userUuid: string;
};

export type GetAllPatientConditionsResponse = Response;

export type DeletePatientConditionData = {
    id: number;
};

export type DeletePatientConditionResponse = Response;

export type UpdatePatientAllergyData = {
    id: number;
    requestBody: PatientAllergyRequest;
};

export type UpdatePatientAllergyResponse = Response;

export type AddPatientAllergyData = {
    requestBody: PatientAllergyRequest;
};

export type AddPatientAllergyResponse = Response;

export type GetAllAllergyData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchString?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    userUuid: string;
};

export type GetAllAllergyResponse = Response;

export type DeletePatientAllergyByIdData = {
    id: number;
};

export type DeletePatientAllergyByIdResponse = Response;

export type PutNotificationsResponse = Response;

export type NotificationUpdateData = {
    notificationuuid: string;
};

export type NotificationUpdateResponse = Response;

export type GetAllNotificationsData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    type?: string;
};

export type GetAllNotificationsResponse = Response;

export type GetCountNotificationResponse = Response;

export type UpdateNotificationsData = {
    requestBody: Array<NotificationUpdateRequest>;
};

export type UpdateNotificationsResponse = Response;

export type GetAllNotificationData = {
    search?: string;
};

export type GetAllNotificationResponse = Response;

export type PutNotifications1Response = Response;

export type NotificationUpdate1Data = {
    notificationuuid: string;
};

export type NotificationUpdate1Response = Response;

export type GetAllNotifications1Data = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    type?: string;
};

export type GetAllNotifications1Response = Response;

export type GetCountNotification1Response = Response;

export type UpdateLabResultData = {
    id: number;
    requestBody: LabResultRequest;
};

export type UpdateLabResultResponse = Response;

export type CreateLabResultData = {
    requestBody: LabResultRequest;
};

export type CreateLabResultResponse = Response;

export type GetByIdData = {
    id: number;
};

export type GetByIdResponse = Response;

export type GetAllPatientLabResultData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchString?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    userUuid: string;
};

export type GetAllPatientLabResultResponse = Response;

export type DeleteLabResultData = {
    id: number;
};

export type DeleteLabResultResponse = Response;

export type UpdateInsuranceMobileData = {
    patientUserUuid: string;
    requestBody: InsuranceMobileRequest;
};

export type UpdateInsuranceMobileResponse = Response;

export type SaveInsurancesMobileData = {
    patientUserUuid: string;
    requestBody: CreateInsuranceList;
};

export type SaveInsurancesMobileResponse = Response;

export type AddInsuranceData = {
    patientUserUuid: string;
    requestBody: InsuranceMobileRequest;
};

export type AddInsuranceResponse = Response;

export type GetAllInsuranceMobileData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAllInsuranceMobileResponse = Response;

export type DeleteInsuranceMobileResponse = Response;

export type UpdateIcdCodeData = {
    id: number;
    requestBody: IcdCodeRequest;
};

export type UpdateIcdCodeResponse = Response;

export type MakeIcdCodeFavoriteData = {
    id: number;
    isFavorite: boolean;
};

export type MakeIcdCodeFavoriteResponse = Response;

export type CreateIcdCodeData = {
    requestBody: IcdCodeRequest;
};

export type CreateIcdCodeResponse = Response;

export type GetIcdCodeByIdData = {
    id: number;
};

export type GetIcdCodeByIdResponse = Response;

export type GetAll1Data = {
    isFavorite?: boolean;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchString?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAll1Response = Response;

export type DeleteTemplate1Data = {
    id: number;
};

export type DeleteTemplate1Response = Response;

export type UpdateEnrollmentData = {
    reEnrollment?: boolean;
    requestBody: EnrollmentRequest;
    uuid: string;
};

export type UpdateEnrollmentResponse = Response;

export type ReEnrollmentData = {
    uuid: string;
};

export type ReEnrollmentResponse = Response;

export type CreateEnrollmentData = {
    requestBody: EnrollmentRequest;
};

export type CreateEnrollmentResponse = Response;

export type GetVitalsOfPatientData = {
    patientUserUuid: string;
};

export type GetVitalsOfPatientResponse = Response;

export type GetEnrollmentByIdData = {
    uuid: string;
};

export type GetEnrollmentByIdResponse = Response;

export type GetEnrollmentOfPatientData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetEnrollmentOfPatientResponse = Response;

export type GetAllEnrollmentData = {
    endDate?: string;
    enrollmentServiceType?: 'RPM' | 'RTM' | 'CCM';
    enrollmentStatusType?: 'NEW' | 'ACTIVE' | 'CLOSED';
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    startDate?: string;
};

export type GetAllEnrollmentResponse = Response;

export type DeleteEnrollmentData = {
    requestBody: EnrollmentTerminateRequest;
    uuid: string;
};

export type DeleteEnrollmentResponse = Response;

export type UpdateArchiveData = {
    archive: boolean;
    documentUuid: string;
};

export type UpdateArchiveResponse = Response;

export type GetSignatureData = {
    documentUuid: string;
    patientUserUuid: string;
};

export type GetSignatureResponse = Response;

export type CreateSignatureData = {
    documentUuid: string;
    patientUserUuid: string;
    requestBody: UserSignatureRequest;
};

export type CreateSignatureResponse = Response;

export type MapDocumentsToPatientsData = {
    requestBody: PatientDocumentMappingRequest;
};

export type MapDocumentsToPatientsResponse = Response;

export type CreateDocumentData = {
    requestBody: DocumentRequest;
};

export type CreateDocumentResponse = Response;

export type GetSignedDocumentsData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetSignedDocumentsResponse = PageDocumentDTO;

export type GetPatientMappedDocumentsData = {
    archive?: boolean;
    documentType?: Array<('CONSENT' | 'EDUCATION' | 'CHALLENGES' | 'GENERAL' | 'REPORT' | 'HOME_EXERCISE')>;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    searchString?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetPatientMappedDocumentsResponse = Response;

export type GetDocumentsData = {
    archive?: boolean;
    documentType?: Array<('CONSENT' | 'EDUCATION' | 'CHALLENGES' | 'GENERAL' | 'REPORT' | 'HOME_EXERCISE')>;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchString?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetDocumentsResponse = Response;

export type DeleteDocumentData = {
    documentUuid: string;
};

export type DeleteDocumentResponse = Response;

export type UpdateStatus2Data = {
    status: boolean;
    uuid: string;
};

export type UpdateStatus2Response = Response;

export type UpdateDevice1Data = {
    requestBody: DeviceUpdateRequest;
    uuid: string;
};

export type UpdateDevice1Response = Response;

export type UnAssignDeviceData = {
    assign: boolean;
    deviceUuid: string;
    providerGroupUuid?: string;
};

export type UnAssignDeviceResponse = Response;

export type SaveDevice1Data = {
    patientUserUuid: string;
    requestBody: DeviceCreateRequest;
};

export type SaveDevice1Response = Response;

export type FetchDeviceByPatientData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    search?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type FetchDeviceByPatientResponse = Response;

export type FetchDevice1Data = {
    uuid: string;
};

export type FetchDevice1Response = Response;

export type UpdateStatus4Data = {
    uuid: string;
};

export type UpdateStatus4Response = Response;

export type FetchDevices1Data = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchString?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    status?: boolean;
};

export type FetchDevices1Response = Response;

export type FetchAllDevicesNameData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type FetchAllDevicesNameResponse = Response;

export type UpdateUserData = {
    requestBody: AdminUserUpdateRequest;
    uuid: string;
};

export type UpdateUserResponse = Response;

export type ManageUserData = {
    isActive: boolean;
    uuid: string;
};

export type ManageUserResponse = Response;

export type SaveAdminUserData = {
    requestBody: CreateAdminUserRequest;
};

export type SaveAdminUserResponse = Response;

export type ResendInvitationData = {
    uuid: string;
};

export type ResendInvitationResponse = Response;

export type GetProfile1Data = {
    userUuid?: string;
};

export type GetProfile1Response = Response;

export type GetUsersData = {
    active?: boolean;
    exclude?: boolean;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchBy?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    sortBy?: string;
    sortDirection?: 'ASC' | 'DESC';
};

export type GetUsersResponse = Response;

export type RemoveUserData = {
    uuid: string;
};

export type RemoveUserResponse = Response;

export type SetInteractionForNewMonthResponse = Response;

export type AddTimeLogsData = {
    requestBody: Array<TimeLogRequest>;
    timezone: string;
};

export type AddTimeLogsResponse = Response;

export type AddTimeLogData = {
    note?: boolean;
    requestBody: TimeLogRequest;
    timezone: string;
};

export type AddTimeLogResponse = Response;

export type GetTimeLogByPatientUserUuidAndEnrollmentServiceTypeData = {
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    patientUserUuid: string;
    specificMonth?: string;
};

export type GetTimeLogByPatientUserUuidAndEnrollmentServiceTypeResponse = Response;

export type GetMonthWiseTimeLogData = {
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetMonthWiseTimeLogResponse = Response;

export type GetManualEntriesData = {
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetManualEntriesResponse = Response;

export type GetTimeLineData = {
    activity?: Array<('ENROLLMENT' | 'NEW_READING_ADDED' | 'ALERT_GENERATE' | 'ALERT_RESOLVED' | 'APP_MESSAGE' | 'SMS_MESSAGE' | 'RECEIVED_NOTIFICATION' | 'TIME_LOGGED' | 'VITALS_REVIEWED' | 'NOTE_ADDED' | 'ESCALATE' | 'VITALS_CONFIG_UPDATE')>;
    endDate?: string;
    enrollmentServiceType: 'RPM' | 'RTM' | 'CCM';
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    startDate?: string;
    timeZone: string;
};

export type GetTimeLineResponse = Response;

export type ImportsData = {
    providerGroupUuid: string;
    requestBody: ImportRequest;
};

export type ImportsResponse = Response;

export type GetPatientAuditFilesData = {
    file?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    providerGroupUuid: string;
    searchString?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    status?: 'IN_PROGRESS' | 'COMPLETED_WITH_ERROR' | 'COMPLETED' | 'FAILED';
};

export type GetPatientAuditFilesResponse = Response;

export type GetPatientAuditFileRecordsData = {
    audiFileId: number;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    providerGroupUuid: string;
    searchString?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    status?: 'SUCCESS' | 'FAILED';
};

export type GetPatientAuditFileRecordsResponse = Response;

export type SetWeekToNewWeekResponse = Response;

export type SetWeek1ForNewMonthResponse = Response;

export type SetDaysResponse = Response;

export type Imports1Data = {
    requestBody: ImportRequest;
};

export type Imports1Response = Response;

export type ImportsIcdData = {
    requestBody: ImportRequestIcd;
};

export type ImportsIcdResponse = Response;

export type GetPatientAuditFiles1Data = {
    file?: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchString?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    status?: 'IN_PROGRESS' | 'COMPLETED_WITH_ERROR' | 'COMPLETED' | 'FAILED';
};

export type GetPatientAuditFiles1Response = Response;

export type GetPatientAuditFileRecords1Data = {
    audiFileId: number;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchString?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    status?: 'SUCCESS' | 'FAILED';
};

export type GetPatientAuditFileRecords1Response = Response;

export type GetTemplateInCsvData = {
    templateType: 'PATIENT';
};

export type GetTemplateInCsvResponse = (Blob | File);

export type AddGlobalNoteData = {
    requestBody: GlobalNoteRequest;
};

export type AddGlobalNoteResponse = Response;

export type GetGlobalNotesByPatientUuidData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientUserUuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetGlobalNotesByPatientUuidResponse = Response;

export type SetMonitoringForNewMonthResponse = Response;

export type SetInteractionForNewMonth1Response = Response;

export type SetEnrollmentForNewMonthResponse = Response;

export type UpdateMonitoringBillingByUuidData = {
    requestBody: MonitoringBillingUpdateRequest;
    uuid: string;
};

export type UpdateMonitoringBillingByUuidResponse = Response;

export type UpdateInteractionBillingByUuidData = {
    requestBody: InteractionBillingUpdateRequest;
    uuid: string;
};

export type UpdateInteractionBillingByUuidResponse = Response;

export type UpdateEnrollmentBillingByUuidData = {
    requestBody: EnrollmentBillingUpdateRequest;
    uuid: string;
};

export type UpdateEnrollmentBillingByUuidResponse = Response;

export type Patient360AllBillingData = {
    localDate: string;
    patientUserUuid: string;
    service: 'RPM' | 'RTM' | 'CCM';
};

export type Patient360AllBillingResponse = Response;

export type GetMonitoringBillingByUuidData = {
    uuid: string;
};

export type GetMonitoringBillingByUuidResponse = Response;

export type GetMonitoringBillingCountData = {
    localDate: string;
};

export type GetMonitoringBillingCountResponse = Response;

export type GetAllBillingForMonitoringData = {
    claimStatus?: string;
    localDate: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientName?: string;
    providerName?: string;
    service: 'RPM' | 'RTM' | 'CCM';
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAllBillingForMonitoringResponse = Response;

export type GetInteractionBillingByUuidData = {
    localDate: string;
    uuid: string;
};

export type GetInteractionBillingByUuidResponse = Response;

export type GetInteractionBillingCountData = {
    localDate: string;
};

export type GetInteractionBillingCountResponse = Response;

export type GetAllBillingForInteractionData = {
    claimStatus?: string;
    localDate: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientName?: string;
    providerName?: string;
    service: 'RPM' | 'RTM' | 'CCM';
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAllBillingForInteractionResponse = Response;

export type GetEnrollmentBillingByUuidData = {
    uuid: string;
};

export type GetEnrollmentBillingByUuidResponse = Response;

export type GetEnrollmentBillingCountData = {
    localDate: string;
};

export type GetEnrollmentBillingCountResponse = Response;

export type GetAllBillingForEnrollmentData = {
    claimStatus?: string;
    localDate: string;
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    patientName?: string;
    providerName?: string;
    service: 'RPM' | 'RTM' | 'CCM';
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAllBillingForEnrollmentResponse = Response;

export type SetPasswordData = {
    requestBody: SetPasswordRequest;
};

export type SetPasswordResponse = Response;

export type SetPasswordCsvPatientData = {
    requestBody: SetPasswordRequest;
};

export type SetPasswordCsvPatientResponse = Response;

export type GetAccessTokenData = {
    requestBody: AuthRequest;
};

export type GetAccessTokenResponse = Response;

export type ForgotPasswordRequestData = {
    requestBody: ForgotPasswordRequest;
};

export type ForgotPasswordRequestResponse = Response;

export type CheckUrlEndPointResponse = Response;

export type UpdatePasswordData = {
    newPassword: string;
    oldPassword: string;
};

export type UpdatePasswordResponse = Response;

export type GetAccessTokenFromRefreshTokenData = {
    refreshToken: string;
};

export type GetAccessTokenFromRefreshTokenResponse = Response;

export type SaveActivityData = {
    requestBody: ActivityRequest;
};

export type SaveActivityResponse = Response;

export type AllActivityData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    providerUseruuid: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type AllActivityResponse = Response;

export type GetAllSpecialitiesData = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    searchString?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
};

export type GetAllSpecialitiesResponse = Response;

export type GetAllProvider2Data = {
    /**
     * Zero-based page index (0..N)
     */
    page?: number;
    providerGroupUuid: string;
    searchBy?: string;
    /**
     * The size of the page to be returned
     */
    size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<(string)>;
    status?: boolean;
};

export type GetAllProvider2Response = Response;

export type GeneratePasswordData = {
    count?: number;
};

export type GeneratePasswordResponse = Response;

export type SendSms1Data = {
    requestBody: SendSMSTwilio;
};

export type SendSms1Response = Response;

export type UpdateUserToTwilioData = {
    requestBody: UpdateUserTwilioRequest;
};

export type UpdateUserToTwilioResponse = Response;

export type SendMessages1Data = {
    requestBody: SendAppMessagesTwilio;
};

export type SendMessages1Response = Response;

export type RegisterUserToTwilioData = {
    requestBody: CreateUserTwilioRequest;
};

export type RegisterUserToTwilioResponse = Response;

export type DeleteCareTeamFromTwilioData = {
    requestBody: AddUpdateParticipantWithServiceRequest;
};

export type DeleteCareTeamFromTwilioResponse = Response;

export type AddUpdateParticipantToTwilioData = {
    requestBody: AddUpdateParticipantWithServiceRequest;
};

export type AddUpdateParticipantToTwilioResponse = Response;

export type AddCareTeamToTwilioData = {
    requestBody: AddUpdateParticipantWithServiceRequest;
};

export type AddCareTeamToTwilioResponse = Response;

export type GetAuthTokenData = {
    identity: string;
};

export type GetAuthTokenResponse = TwilioAuthTokenResponse;

export type SendAlertData = {
    message: string;
};

export type SendAlertResponse = Response;

export type CreateNameRecordsData = {
    nameRecord: string;
};

export type CreateNameRecordsResponse = Response;

export type BuildAndGetPortalUrlData = {
    attachProtocol: boolean;
    nameRecord?: string;
};

export type BuildAndGetPortalUrlResponse = Response;

export type IsNameRecordPresentData = {
    nameRecord: string;
};

export type IsNameRecordPresentResponse = Response;

export type SendInvitationEmailData = {
    category: 'ADMIN' | 'SUPER_ADMIN' | 'PROVIDER' | 'PATIENT' | 'STAFF';
    requestBody: UserRequest;
    userUuid: string;
};

export type SendInvitationEmailResponse = Response;

export type ForgotPasswordRequest1Data = {
    requestBody: User;
};

export type ForgotPasswordRequest1Response = Response;

export type UpdateMultipartData = {
    objectRequestCategory: 'ADMIN' | 'SUPER_ADMIN' | 'PROVIDER_GROUP' | 'IMPORT_DATA';
    providerGroupUuid?: string;
    referenceType: 'PROVIDER_PROFILE' | 'ADMIN_PROFILE' | 'PATIENT_INSURANCE_DOCUMENTS' | 'IMPORT_DATA' | 'PROFILE' | 'LOGO' | 'PATIENT' | 'PROVIDER' | 'DOCUMENT';
    requestBody?: {
        file: (Blob | File);
    };
};

export type UpdateMultipartResponse = Response;

export type UpdateMultipartBase64Data = {
    requestBody: AwsImageRequest;
};

export type UpdateMultipartBase64Response = Response;

export type GetFileData = {
    key: string;
};

export type GetFileResponse = Response;

export type GetFile1Data = {
    key: string;
};

export type GetFile1Response = Response;

export type $OpenApiTs = {
    '/api/master/v1/work-list/update-vitals': {
        put: {
            req: UpdateVitalsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/resolve-escalate/id/{id}': {
        put: {
            req: ResolveEscalateData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/update/reviewed-with-status-noData/{patientUserUuid}': {
        post: {
            req: UpdateReviewedWithStatusForNoDataData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/update/reviewed-with-status-data/{patientUserUuid}': {
        post: {
            req: UpdateReviewedWithStatusForDataData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/update/reviewed-with-status-alert/{patientUserUuid}': {
        post: {
            req: UpdateReviewedWithStatusForAlertData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/update-checkboxes': {
        post: {
            req: UpdateCheckboxesInteractionData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/update-alert-config/{planId}': {
        post: {
            req: UpdateAlertConfigData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/reviewVitalList': {
        post: {
            req: ReviewVitalListData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/resolve/id/{id}': {
        post: {
            req: ResolveMonitoringAlertsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/patient-checkbox/{patientUserUuid}': {
        post: {
            req: UpdatePatientConsentCheckboxData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/onboarding-patient/add-vitals/{patientUserUuid}': {
        post: {
            req: OnBoardingPatientAddVitalsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/escalate': {
        post: {
            req: AddEscalationData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/escalate/id/{id}': {
        post: {
            req: EscalateMonitoringAlertsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/escalate-resolve': {
        post: {
            req: AddEscalation1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/create-record': {
        post: {
            req: CreateMonitoringRecordData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/add-vitals/{patientUserUuid}': {
        post: {
            req: AddVitalsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/week-interaction': {
        get: {
            req: GetWeekWiseInteractionData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/vitals/{patientUserUuid}': {
        get: {
            req: GetByVitalsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/progress-bar-patient360/{patientUserUuid}': {
        get: {
            req: ProgressBarPatient360Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/ofReading-monitoring/{patientUserUuid}': {
        get: {
            req: GetOfReadingDataMonotoringDataData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/noData-monitoring': {
        get: {
            req: GetNoDataMonitoringData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/new/patient': {
        get: {
            req: GetNewPatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/id/{id}': {
        get: {
            req: GetMonitoringDataByIdData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/get-vitals/{patientUserUuid}': {
        get: {
            req: GetVitalsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/get-reviewed-note/{patientUserUuid}': {
        get: {
            req: GetReviewedNoteData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/get-resolved-note/{patientUserUuid}': {
        get: {
            req: GetResolvedNoteData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/get-latest-vitals/{patientUserUuid}': {
        get: {
            req: GetLatestVitalsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/get-escalate': {
        get: {
            req: GetEscalateData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/get-escalate-by-patient/{patientUserUuid}': {
        get: {
            req: GetEscalate1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/get-distinct-vital/{patientUserUuid}': {
        get: {
            req: GetDistinctVitalRecordsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/get-alert-medical-history/patientUserUuid/{patientUserUuid}': {
        get: {
            req: MedicalHistoryAlertData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/get-alert-config/{patientUserUuid}': {
        get: {
            req: GetAlertConfigData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/escalate-resolve-note/escalate-id/{id}': {
        get: {
            req: GetEscalationData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/data-monitoring': {
        get: {
            req: GetDataMonitoringData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/count/monitoring': {
        get: {
            req: GetCountInMonitoringSectionData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/count/interaction': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/count/enrollment': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/closed-enrollment': {
        get: {
            req: GetClosedEnrollmentData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/all/monitoring-records': {
        get: {
            req: GetAllMonitoringDataData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/alerts-monitoring': {
        get: {
            req: GetAlertsMonitoringData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/active-enrollment': {
        get: {
            req: GetActiveEnrollmentData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/work-list/delete-vitals/{vitalId}': {
        delete: {
            req: DeleteVitalsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/template/update/id/{id}': {
        put: {
            req: UpdateTemplateData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/template/create': {
        post: {
            req: CreateTemplateData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/template/id/{id}': {
        get: {
            req: GetTemplateByIdData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/template/all': {
        get: {
            req: GetAllData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/template/delete/id/{id}': {
        delete: {
            req: DeleteTemplateData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/redirect/provider-group/provider/provider-group-uuid/{providerGroupUuid}/provider-uuid/{providerUuid}': {
        get: {
            req: GetProviderData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: GetAllProviderData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeleteProviderData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/redirect/provider-group/provider/provider-group-uuid/{providerGroupUuid}/provider-uuid/{providerUuid}/status': {
        put: {
            req: UpdateProviderStatusData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/redirect/provider-group/provider/save/provider-group-uuid/{providerGroupUuid}': {
        post: {
            req: SaveProviderData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/redirect/provider-group/provider/resend/invite/provider-group-uuid/{providerGroupUuid}/provider-uuid/{providerUuid}': {
        post: {
            req: ResentInviteData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/redirect/provider-group/provider/all/provider-group-uuid/{providerGroupUuid}': {
        get: {
            req: GetAllProvider1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/redirect/provider-group/device/provider-group-uuid/{providerGroupUuid}/uuid/{uuid}/status': {
        put: {
            req: UpdateStatusData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/redirect/provider-group/device/provider-group-uuid/{providerGroupUuid}/update/uuid/{uuid}': {
        put: {
            req: UpdateDeviceData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/redirect/provider-group/device/save/provider-group-uuid/{providerGroupUuid}': {
        post: {
            req: SaveDeviceData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/redirect/provider-group/device/provider-group-uuid/{providerGroupUuid}/uuid/{uuid}': {
        get: {
            req: FetchDeviceData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: UpdateStatus3Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/redirect/provider-group/device/provider-group-uuid/{providerGroupUuid}/all': {
        get: {
            req: FetchDevicesData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider/update/uuid/{uuid}': {
        put: {
            req: UpdateProviderData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider/update-new/uuid/{uuid}': {
        put: {
            req: UpdateProviderNewData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider/status/uuid/{uuid}': {
        put: {
            req: UpdateProviderStatus1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider/save': {
        post: {
            req: SaveProvider1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider/save-new': {
        post: {
            req: SaveProviderNewData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider/resend/invite/uuid/{uuid}': {
        post: {
            req: ResendInviteData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider/add-participant': {
        post: {
            req: AddParticipantData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider/provider-uuid/{providerUuid}': {
        get: {
            req: GetProvider1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider/login-provider': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider/care-managers/patientUserUuid/{patientUserUuid}': {
        get: {
            req: GetCareManagersData;
            res: {
                /**
                 * OK
                 */
                200: PageCareManager;
            };
        };
    };
    '/api/master/v1/provider/by-patient/{patientUserUuid}': {
        get: {
            req: GetProvidersByPatientUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider/auth/provider-uuid/{providerUserUuid}': {
        get: {
            req: GetProviderByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider/all': {
        get: {
            req: GetAllProvider3Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider/uuid/{uuid}': {
        delete: {
            req: DeleteProvider1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider-group/{uuid}/sync': {
        put: {
            req: SyncDatabaseSchemaData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider-group/uuid/{uuid}': {
        get: {
            req: GetProviderGroupData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        put: {
            req: UpdateProviderGroupData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider-group/uuid/{uuid}/status': {
        put: {
            req: UpdateStatus1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider-group/user/last-login/user-uuid/{userUuid}': {
        put: {
            req: UpdateLastLoginData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider-group/sync-all-provider-group': {
        put: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider-group/create': {
        post: {
            req: CreateProviderGroupData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider-group/create-default-document': {
        post: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider-group/user/common-user-details/username/{username}': {
        get: {
            req: GetUserCommonDetailsByUsernameData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider-group/user/common-user-details/user-uuid/{userUuid}': {
        get: {
            req: GetUserCommonDetailsByUserUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider-group/by/tenant-group': {
        get: {
            req: GetProviderGroupDetailsByTenantGroupData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider-group/all': {
        get: {
            req: GetAllProviderGroupsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/updateprofile/{patientUserUuid}': {
        put: {
            req: UpdateProfileAvatarData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/update': {
        put: {
            req: UpdatePatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/update/status/uuid/{uuid}': {
        put: {
            req: UpdatePatientStatusData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/family/{patientUserUuid}/{familyMemberId}': {
        put: {
            req: UpdateFamilyDetailsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/temporary-password/{userUuid}': {
        post: {
            req: SetTemporaryPasswordFieldForPatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/send/sms': {
        post: {
            req: SendSmsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/send/message': {
        post: {
            req: SendMessagesData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/save': {
        post: {
            req: SavePatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/message/notification-provider/': {
        post: {
            req: SendMessageProviderData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/add/careteam/{patientUserUuid}': {
        post: {
            req: AddCareTeamData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/uuid/{uuid}': {
        get: {
            req: GetPatientByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: DeletePatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/search-patient-provider': {
        get: {
            req: SearchPatientProviderData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/profile': {
        get: {
            req: GetProfileData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/getAvatar/{patientUserUuid}': {
        get: {
            req: GetAvatarData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/get-sms': {
        get: {
            req: GetSmsWithProviderEntityData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/get-error': {
        get: {
            req: GetErrorForFileData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/family/{patientUserUuid}': {
        get: {
            req: GetFamilyMembersData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/all': {
        get: {
            req: GetAllPatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/all/careteam/patient-user-uuid/{userUuid}': {
        get: {
            req: GetAllCareTeamData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/all/caremanagers/patient-user-uuid/{patientUserUuid}': {
        get: {
            req: GetManagersData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient/delete/id/{id}': {
        delete: {
            req: DeleteCareTeamData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-symptom/update/id/{id}': {
        put: {
            req: UpdateSymptomData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-symptom/add': {
        post: {
            req: AddPatientSymptomData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-symptom/all/patient-user-uuid/{userUuid}': {
        get: {
            req: GetAllByPatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-symptom/delete/id/{id}': {
        delete: {
            req: DeletePatientSymptomData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-medication/update/id/{id}': {
        put: {
            req: UpdateMedicationData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-medication/add': {
        post: {
            req: AddMedicationData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-medication/all/patient/change': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-medication/all/patient-user-uuid/{userUuid}': {
        get: {
            req: GetAllMedicationsByPatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-medication/all/patient-user-uuid/{userUuid}/medications': {
        get: {
            req: GetMedicationsByPatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-medication/all/medications': {
        get: {
            req: GetAllMedicationsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-medication/delete/id/{id}': {
        delete: {
            req: DeleteMedicationData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-condition/update/id/{id}': {
        put: {
            req: UpdatePatientConditionData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-condition/add': {
        post: {
            req: AddPatientConditionData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-condition/all/patient-user-uuid/{userUuid}': {
        get: {
            req: GetAllPatientConditionsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-condition/delete/id/{id}': {
        delete: {
            req: DeletePatientConditionData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-allergy/update/id/{id}': {
        put: {
            req: UpdatePatientAllergyData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-allergy/add': {
        post: {
            req: AddPatientAllergyData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-allergy/all/patient-user-uuid/{userUuid}': {
        get: {
            req: GetAllAllergyData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-allergy/delete/id/{id}': {
        delete: {
            req: DeletePatientAllergyByIdData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/notifications/patientUserUuid/': {
        put: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/notifications/notification-uuid/{notificationuuid}': {
        put: {
            req: NotificationUpdateData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/notifications/all/notifications/': {
        get: {
            req: GetAllNotificationsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/notifications/all/notification/count/': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/notification/update': {
        put: {
            req: UpdateNotificationsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/notification/all/notifications': {
        get: {
            req: GetAllNotificationData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/notification-provider/provider/': {
        put: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/notification-provider/notification-uuid/{notificationuuid}': {
        put: {
            req: NotificationUpdate1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/notification-provider/all/notifications/': {
        get: {
            req: GetAllNotifications1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/notification-provider/all/notification/count/': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/lab/update/id/{id}': {
        put: {
            req: UpdateLabResultData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/lab/create': {
        post: {
            req: CreateLabResultData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/lab/id/{id}': {
        get: {
            req: GetByIdData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/lab/all/patient-user-uuid/{userUuid}': {
        get: {
            req: GetAllPatientLabResultData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/lab/delete/id/{id}': {
        delete: {
            req: DeleteLabResultData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/insurance/update/{patientUserUuid}': {
        put: {
            req: UpdateInsuranceMobileData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/insurance/create/{patientUserUuid}': {
        post: {
            req: SaveInsurancesMobileData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/insurance/addinsurance/{patientUserUuid}': {
        post: {
            req: AddInsuranceData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/insurance/all/{patientUserUuid}': {
        get: {
            req: GetAllInsuranceMobileData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/insurance/delete/{insurance-uuid}': {
        delete: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/icd-code/update/id/{id}': {
        put: {
            req: UpdateIcdCodeData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/icd-code/markAsFavorite/id/{id}': {
        put: {
            req: MakeIcdCodeFavoriteData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/icd-code/create': {
        post: {
            req: CreateIcdCodeData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/icd-code/id/{id}': {
        get: {
            req: GetIcdCodeByIdData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/icd-code/all': {
        get: {
            req: GetAll1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/icd-code/delete/id/{id}': {
        delete: {
            req: DeleteTemplate1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/enrollment/update/{uuid}': {
        put: {
            req: UpdateEnrollmentData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/enrollment/re-enroll/uuid/{uuid}': {
        put: {
            req: ReEnrollmentData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/enrollment/create': {
        post: {
            req: CreateEnrollmentData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/enrollment/vitals/patient/{patientUserUuid}': {
        get: {
            req: GetVitalsOfPatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/enrollment/uuid/{uuid}': {
        get: {
            req: GetEnrollmentByIdData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/enrollment/patient/{patientUserUuid}': {
        get: {
            req: GetEnrollmentOfPatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/enrollment/all': {
        get: {
            req: GetAllEnrollmentData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/enrollment/delete/uuid/{uuid}': {
        delete: {
            req: DeleteEnrollmentData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/document/archive/document-uuid/{documentUuid}': {
        put: {
            req: UpdateArchiveData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/document/signature/{documentUuid}/{patientUserUuid}': {
        get: {
            req: GetSignatureData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        post: {
            req: CreateSignatureData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/document/map-to-patients': {
        post: {
            req: MapDocumentsToPatientsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/document/create': {
        post: {
            req: CreateDocumentData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/document/signed-documents/{patientUserUuid}': {
        get: {
            req: GetSignedDocumentsData;
            res: {
                /**
                 * OK
                 */
                200: PageDocumentDTO;
            };
        };
    };
    '/api/master/v1/document/mapped-to-patient/{patientUserUuid}': {
        get: {
            req: GetPatientMappedDocumentsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/document/all': {
        get: {
            req: GetDocumentsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/document/delete/document-uuid/{documentUuid}': {
        delete: {
            req: DeleteDocumentData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/device/uuid/{uuid}/status': {
        put: {
            req: UpdateStatus2Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/device/update/uuid/{uuid}': {
        put: {
            req: UpdateDevice1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/device/un-assign/{deviceUuid}': {
        put: {
            req: UnAssignDeviceData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/device/save/{patientUserUuid}': {
        post: {
            req: SaveDevice1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/device/{patientUserUuid}': {
        get: {
            req: FetchDeviceByPatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/device/uuid/{uuid}': {
        get: {
            req: FetchDevice1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
        delete: {
            req: UpdateStatus4Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/device/all': {
        get: {
            req: FetchDevices1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/device/all/device-name': {
        get: {
            req: FetchAllDevicesNameData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/admin/user/update/{uuid}': {
        put: {
            req: UpdateUserData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/admin/user/status/{uuid}': {
        put: {
            req: ManageUserData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/admin/user/save': {
        post: {
            req: SaveAdminUserData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/admin/user/re-send/invite/uuid/{uuid}': {
        post: {
            req: ResendInvitationData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/admin/user/profile': {
        get: {
            req: GetProfile1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/admin/user/all': {
        get: {
            req: GetUsersData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/admin/user/remove/{uuid}': {
        delete: {
            req: RemoveUserData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/time-log/set-time-log-schedular': {
        post: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/time-log/save-logs': {
        post: {
            req: AddTimeLogsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/time-log/save-log': {
        post: {
            req: AddTimeLogData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/time-log/uuid/{patientUserUuid}/{enrollmentServiceType}': {
        get: {
            req: GetTimeLogByPatientUserUuidAndEnrollmentServiceTypeData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/time-log/patient/{patientUserUuid}/time-logs': {
        get: {
            req: GetMonthWiseTimeLogData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/time-log/manual-entries/{patientUserUuid}': {
        get: {
            req: GetManualEntriesData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/time-log/get-timeline/patientUserUuid/{patientUserUuid}': {
        get: {
            req: GetTimeLineData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider-group/import/provider-group-uuid/{providerGroupUuid}': {
        post: {
            req: ImportsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider-group/import/patient/audit-files/provider-group-uuid/{providerGroupUuid}': {
        get: {
            req: GetPatientAuditFilesData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/provider-group/import/patient/audit-files-records/audit-files-id/{audiFileId}/provider-group-uuid/{providerGroupUuid}': {
        get: {
            req: GetPatientAuditFileRecordsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-interaction/set-week-to-new-week': {
        post: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/patient-interaction/set-week-schedular': {
        post: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/monitoring/set-day': {
        post: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/import': {
        post: {
            req: Imports1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/import/icd': {
        post: {
            req: ImportsIcdData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/import/patient/audit-files': {
        get: {
            req: GetPatientAuditFiles1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/import/patient/audit-files-records/audit-files-id/{audiFileId}': {
        get: {
            req: GetPatientAuditFileRecords1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/import/export/template': {
        get: {
            req: GetTemplateInCsvData;
            res: {
                /**
                 * OK
                 */
                200: (Blob | File);
            };
        };
    };
    '/api/master/v1/globalnote/add': {
        post: {
            req: AddGlobalNoteData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/globalnote/patientUserUuid/{patientUserUuid}': {
        get: {
            req: GetGlobalNotesByPatientUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/billing/set-monitoring-schedular': {
        post: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/billing/set-interaction-schedular': {
        post: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/billing/set-enrollment-schedular': {
        post: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/billing/monitoring/update-uuid/{uuid}': {
        post: {
            req: UpdateMonitoringBillingByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/billing/interaction/update-uuid/{uuid}': {
        post: {
            req: UpdateInteractionBillingByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/billing/enrollment/update-uuid/{uuid}': {
        post: {
            req: UpdateEnrollmentBillingByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/billing/patient360-all-billing': {
        get: {
            req: Patient360AllBillingData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/billing/monitoring/uuid/{uuid}': {
        get: {
            req: GetMonitoringBillingByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/billing/monitoring-count': {
        get: {
            req: GetMonitoringBillingCountData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/billing/monitoring-all': {
        get: {
            req: GetAllBillingForMonitoringData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/billing/interaction/uuid/{uuid}': {
        get: {
            req: GetInteractionBillingByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/billing/interaction-count': {
        get: {
            req: GetInteractionBillingCountData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/billing/interaction-all': {
        get: {
            req: GetAllBillingForInteractionData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/billing/enrollment/uuid/{uuid}': {
        get: {
            req: GetEnrollmentBillingByUuidData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/billing/enrollment-count': {
        get: {
            req: GetEnrollmentBillingCountData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/billing/enrollment-all': {
        get: {
            req: GetAllBillingForEnrollmentData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/auth/set-password': {
        post: {
            req: SetPasswordData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/auth/set-password-csv-patient': {
        post: {
            req: SetPasswordCsvPatientData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/auth/login': {
        post: {
            req: GetAccessTokenData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/auth/forgot-password': {
        post: {
            req: ForgotPasswordRequestData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/auth/check-url': {
        post: {
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/auth/change-password': {
        post: {
            req: UpdatePasswordData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/auth/access-token': {
        post: {
            req: GetAccessTokenFromRefreshTokenData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/activity/save-activity': {
        post: {
            req: SaveActivityData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/activity/all-activity/{providerUseruuid}': {
        get: {
            req: AllActivityData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/speciality': {
        get: {
            req: GetAllSpecialitiesData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/redirect/provider-group/patient/all/provider-group-uuid/{providerGroupUuid}': {
        get: {
            req: GetAllProvider2Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/master/v1/generate-password': {
        get: {
            req: GeneratePasswordData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/twilio/sms/send-sms': {
        post: {
            req: SendSms1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/twilio/conversation/update-user': {
        post: {
            req: UpdateUserToTwilioData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/twilio/conversation/send/messages': {
        post: {
            req: SendMessages1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/twilio/conversation/register-user': {
        post: {
            req: RegisterUserToTwilioData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/twilio/conversation/delete-care-team': {
        post: {
            req: DeleteCareTeamFromTwilioData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/twilio/conversation/add-participant': {
        post: {
            req: AddUpdateParticipantToTwilioData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/twilio/conversation/add-care-team': {
        post: {
            req: AddCareTeamToTwilioData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/twilio/conversation/token/{identity}': {
        get: {
            req: GetAuthTokenData;
            res: {
                /**
                 * OK
                 */
                200: TwilioAuthTokenResponse;
            };
        };
    };
    '/api/integration/v1/pusher/sendAlert/{message}': {
        post: {
            req: SendAlertData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/name-record/create': {
        post: {
            req: CreateNameRecordsData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/name-record/portal/url': {
        get: {
            req: BuildAndGetPortalUrlData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/name-record/check': {
        get: {
            req: IsNameRecordPresentData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/email/invite/{category}/{userUuid}': {
        post: {
            req: SendInvitationEmailData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/email/forgot-password-request': {
        post: {
            req: ForgotPasswordRequest1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/aws/upload/multipart': {
        post: {
            req: UpdateMultipartData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/aws/upload/multipart/base64': {
        post: {
            req: UpdateMultipartBase64Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/aws/auth/pre-signed-url': {
        get: {
            req: GetFileData;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
    '/api/integration/v1/aws/pre-signed-url': {
        get: {
            req: GetFile1Data;
            res: {
                /**
                 * OK
                 */
                200: Response;
            };
        };
    };
};