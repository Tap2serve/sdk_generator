// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { UpdateVitalsData, UpdateVitalsResponse, ResolveEscalateData, ResolveEscalateResponse, UpdateReviewedWithStatusForNoDataData, UpdateReviewedWithStatusForNoDataResponse, UpdateReviewedWithStatusForDataData, UpdateReviewedWithStatusForDataResponse, UpdateReviewedWithStatusForAlertData, UpdateReviewedWithStatusForAlertResponse, UpdateCheckboxesInteractionData, UpdateCheckboxesInteractionResponse, UpdateAlertConfigData, UpdateAlertConfigResponse, ReviewVitalListData, ReviewVitalListResponse, ResolveMonitoringAlertsData, ResolveMonitoringAlertsResponse, UpdatePatientConsentCheckboxData, UpdatePatientConsentCheckboxResponse, OnBoardingPatientAddVitalsData, OnBoardingPatientAddVitalsResponse, AddEscalationData, AddEscalationResponse, EscalateMonitoringAlertsData, EscalateMonitoringAlertsResponse, AddEscalation1Data, AddEscalation1Response, CreateMonitoringRecordData, CreateMonitoringRecordResponse, AddVitalsData, AddVitalsResponse, GetWeekWiseInteractionData, GetWeekWiseInteractionResponse, GetByVitalsData, GetByVitalsResponse, ProgressBarPatient360Data, ProgressBarPatient360Response, GetOfReadingDataMonotoringDataData, GetOfReadingDataMonotoringDataResponse, GetNoDataMonitoringData, GetNoDataMonitoringResponse, GetNewPatientData, GetNewPatientResponse, GetMonitoringDataByIdData, GetMonitoringDataByIdResponse, GetVitalsData, GetVitalsResponse, GetReviewedNoteData, GetReviewedNoteResponse, GetResolvedNoteData, GetResolvedNoteResponse, GetLatestVitalsData, GetLatestVitalsResponse, GetEscalateData, GetEscalateResponse, GetEscalate1Data, GetEscalate1Response, GetDistinctVitalRecordsData, GetDistinctVitalRecordsResponse, MedicalHistoryAlertData, MedicalHistoryAlertResponse, GetAlertConfigData, GetAlertConfigResponse, GetEscalationData, GetEscalationResponse, GetDataMonitoringData, GetDataMonitoringResponse, GetCountInMonitoringSectionData, GetCountInMonitoringSectionResponse, GetCountInInteractionSectionResponse, GetCountInEnrollmentSectionResponse, GetClosedEnrollmentData, GetClosedEnrollmentResponse, GetAllMonitoringDataData, GetAllMonitoringDataResponse, GetAlertsMonitoringData, GetAlertsMonitoringResponse, GetActiveEnrollmentData, GetActiveEnrollmentResponse, DeleteVitalsData, DeleteVitalsResponse, UpdateTemplateData, UpdateTemplateResponse, CreateTemplateData, CreateTemplateResponse, GetTemplateByIdData, GetTemplateByIdResponse, GetAllData, GetAllResponse, DeleteTemplateData, DeleteTemplateResponse, GetProviderData, GetProviderResponse, GetAllProviderData, GetAllProviderResponse, DeleteProviderData, DeleteProviderResponse, UpdateProviderStatusData, UpdateProviderStatusResponse, SaveProviderData, SaveProviderResponse, ResentInviteData, ResentInviteResponse, GetAllProvider1Data, GetAllProvider1Response, UpdateStatusData, UpdateStatusResponse, UpdateDeviceData, UpdateDeviceResponse, SaveDeviceData, SaveDeviceResponse, FetchDeviceData, FetchDeviceResponse, UpdateStatus3Data, UpdateStatus3Response, FetchDevicesData, FetchDevicesResponse, UpdateProviderData, UpdateProviderResponse, UpdateProviderNewData, UpdateProviderNewResponse, UpdateProviderStatus1Data, UpdateProviderStatus1Response, SaveProvider1Data, SaveProvider1Response, SaveProviderNewData, SaveProviderNewResponse, ResendInviteData, ResendInviteResponse, AddParticipantData, AddParticipantResponse, GetProvider1Data, GetProvider1Response, GetProvider2Response, GetCareManagersData, GetCareManagersResponse, GetProvidersByPatientUuidData, GetProvidersByPatientUuidResponse, GetProviderByUuidData, GetProviderByUuidResponse, GetAllProvider3Data, GetAllProvider3Response, DeleteProvider1Data, DeleteProvider1Response, SyncDatabaseSchemaData, SyncDatabaseSchemaResponse, GetProviderGroupData, GetProviderGroupResponse, UpdateProviderGroupData, UpdateProviderGroupResponse, UpdateStatus1Data, UpdateStatus1Response, UpdateLastLoginData, UpdateLastLoginResponse, SyncDatabaseSchemasResponse, CreateProviderGroupData, CreateProviderGroupResponse, CreateDefaultDocumentResponse, GetUserCommonDetailsByUsernameData, GetUserCommonDetailsByUsernameResponse, GetUserCommonDetailsByUserUuidData, GetUserCommonDetailsByUserUuidResponse, GetProviderGroupDetailsByTenantGroupData, GetProviderGroupDetailsByTenantGroupResponse, GetAllProviderGroupsData, GetAllProviderGroupsResponse, UpdateProfileAvatarData, UpdateProfileAvatarResponse, UpdatePatientData, UpdatePatientResponse, UpdatePatientStatusData, UpdatePatientStatusResponse, UpdateFamilyDetailsData, UpdateFamilyDetailsResponse, SetTemporaryPasswordFieldForPatientData, SetTemporaryPasswordFieldForPatientResponse, SendSmsData, SendSmsResponse, SendMessagesData, SendMessagesResponse, SavePatientData, SavePatientResponse, SendMessageProviderData, SendMessageProviderResponse, AddCareTeamData, AddCareTeamResponse, GetPatientByUuidData, GetPatientByUuidResponse, DeletePatientData, DeletePatientResponse, SearchPatientProviderData, SearchPatientProviderResponse, GetProfileData, GetProfileResponse, GetAvatarData, GetAvatarResponse, GetSmsWithProviderEntityData, GetSmsWithProviderEntityResponse, GetErrorForFileData, GetErrorForFileResponse, GetFamilyMembersData, GetFamilyMembersResponse, GetAllPatientData, GetAllPatientResponse, GetAllCareTeamData, GetAllCareTeamResponse, GetManagersData, GetManagersResponse, DeleteCareTeamData, DeleteCareTeamResponse, UpdateSymptomData, UpdateSymptomResponse, AddPatientSymptomData, AddPatientSymptomResponse, GetAllByPatientData, GetAllByPatientResponse, DeletePatientSymptomData, DeletePatientSymptomResponse, UpdateMedicationData, UpdateMedicationResponse, AddMedicationData, AddMedicationResponse, ChangeStatusResponse, GetAllMedicationsByPatientData, GetAllMedicationsByPatientResponse, GetMedicationsByPatientData, GetMedicationsByPatientResponse, GetAllMedicationsData, GetAllMedicationsResponse, DeleteMedicationData, DeleteMedicationResponse, UpdatePatientConditionData, UpdatePatientConditionResponse, AddPatientConditionData, AddPatientConditionResponse, GetAllPatientConditionsData, GetAllPatientConditionsResponse, DeletePatientConditionData, DeletePatientConditionResponse, UpdatePatientAllergyData, UpdatePatientAllergyResponse, AddPatientAllergyData, AddPatientAllergyResponse, GetAllAllergyData, GetAllAllergyResponse, DeletePatientAllergyByIdData, DeletePatientAllergyByIdResponse, PutNotificationsResponse, NotificationUpdateData, NotificationUpdateResponse, GetAllNotificationsData, GetAllNotificationsResponse, GetCountNotificationResponse, UpdateNotificationsData, UpdateNotificationsResponse, GetAllNotificationData, GetAllNotificationResponse, PutNotifications1Response, NotificationUpdate1Data, NotificationUpdate1Response, GetAllNotifications1Data, GetAllNotifications1Response, GetCountNotification1Response, UpdateLabResultData, UpdateLabResultResponse, CreateLabResultData, CreateLabResultResponse, GetByIdData, GetByIdResponse, GetAllPatientLabResultData, GetAllPatientLabResultResponse, DeleteLabResultData, DeleteLabResultResponse, UpdateInsuranceMobileData, UpdateInsuranceMobileResponse, SaveInsurancesMobileData, SaveInsurancesMobileResponse, AddInsuranceData, AddInsuranceResponse, GetAllInsuranceMobileData, GetAllInsuranceMobileResponse, DeleteInsuranceMobileResponse, UpdateIcdCodeData, UpdateIcdCodeResponse, MakeIcdCodeFavoriteData, MakeIcdCodeFavoriteResponse, CreateIcdCodeData, CreateIcdCodeResponse, GetIcdCodeByIdData, GetIcdCodeByIdResponse, GetAll1Data, GetAll1Response, DeleteTemplate1Data, DeleteTemplate1Response, UpdateEnrollmentData, UpdateEnrollmentResponse, ReEnrollmentData, ReEnrollmentResponse, CreateEnrollmentData, CreateEnrollmentResponse, GetVitalsOfPatientData, GetVitalsOfPatientResponse, GetEnrollmentByIdData, GetEnrollmentByIdResponse, GetEnrollmentOfPatientData, GetEnrollmentOfPatientResponse, GetAllEnrollmentData, GetAllEnrollmentResponse, DeleteEnrollmentData, DeleteEnrollmentResponse, UpdateArchiveData, UpdateArchiveResponse, GetSignatureData, GetSignatureResponse, CreateSignatureData, CreateSignatureResponse, MapDocumentsToPatientsData, MapDocumentsToPatientsResponse, CreateDocumentData, CreateDocumentResponse, GetSignedDocumentsData, GetSignedDocumentsResponse, GetPatientMappedDocumentsData, GetPatientMappedDocumentsResponse, GetDocumentsData, GetDocumentsResponse, DeleteDocumentData, DeleteDocumentResponse, UpdateStatus2Data, UpdateStatus2Response, UpdateDevice1Data, UpdateDevice1Response, UnAssignDeviceData, UnAssignDeviceResponse, SaveDevice1Data, SaveDevice1Response, FetchDeviceByPatientData, FetchDeviceByPatientResponse, FetchDevice1Data, FetchDevice1Response, UpdateStatus4Data, UpdateStatus4Response, FetchDevices1Data, FetchDevices1Response, FetchAllDevicesNameData, FetchAllDevicesNameResponse, UpdateUserData, UpdateUserResponse, ManageUserData, ManageUserResponse, SaveAdminUserData, SaveAdminUserResponse, ResendInvitationData, ResendInvitationResponse, GetProfile1Data, GetProfile1Response, GetUsersData, GetUsersResponse, RemoveUserData, RemoveUserResponse, SetInteractionForNewMonthResponse, AddTimeLogsData, AddTimeLogsResponse, AddTimeLogData, AddTimeLogResponse, GetTimeLogByPatientUserUuidAndEnrollmentServiceTypeData, GetTimeLogByPatientUserUuidAndEnrollmentServiceTypeResponse, GetMonthWiseTimeLogData, GetMonthWiseTimeLogResponse, GetManualEntriesData, GetManualEntriesResponse, GetTimeLineData, GetTimeLineResponse, ImportsData, ImportsResponse, GetPatientAuditFilesData, GetPatientAuditFilesResponse, GetPatientAuditFileRecordsData, GetPatientAuditFileRecordsResponse, SetWeekToNewWeekResponse, SetWeek1ForNewMonthResponse, SetDaysResponse, Imports1Data, Imports1Response, ImportsIcdData, ImportsIcdResponse, GetPatientAuditFiles1Data, GetPatientAuditFiles1Response, GetPatientAuditFileRecords1Data, GetPatientAuditFileRecords1Response, GetTemplateInCsvData, GetTemplateInCsvResponse, AddGlobalNoteData, AddGlobalNoteResponse, GetGlobalNotesByPatientUuidData, GetGlobalNotesByPatientUuidResponse, SetMonitoringForNewMonthResponse, SetInteractionForNewMonth1Response, SetEnrollmentForNewMonthResponse, UpdateMonitoringBillingByUuidData, UpdateMonitoringBillingByUuidResponse, UpdateInteractionBillingByUuidData, UpdateInteractionBillingByUuidResponse, UpdateEnrollmentBillingByUuidData, UpdateEnrollmentBillingByUuidResponse, Patient360AllBillingData, Patient360AllBillingResponse, GetMonitoringBillingByUuidData, GetMonitoringBillingByUuidResponse, GetMonitoringBillingCountData, GetMonitoringBillingCountResponse, GetAllBillingForMonitoringData, GetAllBillingForMonitoringResponse, GetInteractionBillingByUuidData, GetInteractionBillingByUuidResponse, GetInteractionBillingCountData, GetInteractionBillingCountResponse, GetAllBillingForInteractionData, GetAllBillingForInteractionResponse, GetEnrollmentBillingByUuidData, GetEnrollmentBillingByUuidResponse, GetEnrollmentBillingCountData, GetEnrollmentBillingCountResponse, GetAllBillingForEnrollmentData, GetAllBillingForEnrollmentResponse, SetPasswordData, SetPasswordResponse, SetPasswordCsvPatientData, SetPasswordCsvPatientResponse, GetAccessTokenData, GetAccessTokenResponse, ForgotPasswordRequestData, ForgotPasswordRequestResponse, CheckUrlEndPointResponse, UpdatePasswordData, UpdatePasswordResponse, GetAccessTokenFromRefreshTokenData, GetAccessTokenFromRefreshTokenResponse, SaveActivityData, SaveActivityResponse, AllActivityData, AllActivityResponse, GetAllSpecialitiesData, GetAllSpecialitiesResponse, GetAllProvider2Data, GetAllProvider2Response, GeneratePasswordData, GeneratePasswordResponse, SendSms1Data, SendSms1Response, UpdateUserToTwilioData, UpdateUserToTwilioResponse, SendMessages1Data, SendMessages1Response, RegisterUserToTwilioData, RegisterUserToTwilioResponse, DeleteCareTeamFromTwilioData, DeleteCareTeamFromTwilioResponse, AddUpdateParticipantToTwilioData, AddUpdateParticipantToTwilioResponse, AddCareTeamToTwilioData, AddCareTeamToTwilioResponse, GetAuthTokenData, GetAuthTokenResponse, SendAlertData, SendAlertResponse, CreateNameRecordsData, CreateNameRecordsResponse, BuildAndGetPortalUrlData, BuildAndGetPortalUrlResponse, IsNameRecordPresentData, IsNameRecordPresentResponse, SendInvitationEmailData, SendInvitationEmailResponse, ForgotPasswordRequest1Data, ForgotPasswordRequest1Response, UpdateMultipartData, UpdateMultipartResponse, UpdateMultipartBase64Data, UpdateMultipartBase64Response, GetFileData, GetFileResponse, GetFile1Data, GetFile1Response } from './types.gen';

export class WorkListControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateVitals(data: UpdateVitalsData): CancelablePromise<UpdateVitalsResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/work-list/update-vitals',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static resolveEscalate(data: ResolveEscalateData): CancelablePromise<ResolveEscalateResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/work-list/resolve-escalate/id/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static updateReviewedWithStatusForNoData(data: UpdateReviewedWithStatusForNoDataData): CancelablePromise<UpdateReviewedWithStatusForNoDataResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/work-list/update/reviewed-with-status-noData/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.reviewedNote
     * @param data.monitoringDataId
     * @returns Response OK
     * @throws ApiError
     */
    public static updateReviewedWithStatusForData(data: UpdateReviewedWithStatusForDataData): CancelablePromise<UpdateReviewedWithStatusForDataResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/work-list/update/reviewed-with-status-data/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                reviewedNote: data.reviewedNote,
                monitoringDataId: data.monitoringDataId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.resolvedNote
     * @param data.monitoringDataId
     * @returns Response OK
     * @throws ApiError
     */
    public static updateReviewedWithStatusForAlert(data: UpdateReviewedWithStatusForAlertData): CancelablePromise<UpdateReviewedWithStatusForAlertResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/work-list/update/reviewed-with-status-alert/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                resolvedNote: data.resolvedNote,
                monitoringDataId: data.monitoringDataId
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateCheckboxesInteraction(data: UpdateCheckboxesInteractionData): CancelablePromise<UpdateCheckboxesInteractionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/work-list/update-checkboxes',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.planId
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateAlertConfig(data: UpdateAlertConfigData): CancelablePromise<UpdateAlertConfigResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/work-list/update-alert-config/{planId}',
            path: {
                planId: data.planId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.vitalIdList
     * @param data.reviewedNote
     * @returns Response OK
     * @throws ApiError
     */
    public static reviewVitalList(data: ReviewVitalListData): CancelablePromise<ReviewVitalListResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/work-list/reviewVitalList',
            query: {
                vitalIdList: data.vitalIdList,
                reviewedNote: data.reviewedNote
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static resolveMonitoringAlerts(data: ResolveMonitoringAlertsData): CancelablePromise<ResolveMonitoringAlertsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/work-list/resolve/id/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updatePatientConsentCheckbox(data: UpdatePatientConsentCheckboxData): CancelablePromise<UpdatePatientConsentCheckboxResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/work-list/patient-checkbox/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static onBoardingPatientAddVitals(data: OnBoardingPatientAddVitalsData): CancelablePromise<OnBoardingPatientAddVitalsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/work-list/onboarding-patient/add-vitals/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.alertIds
     * @returns Response OK
     * @throws ApiError
     */
    public static addEscalation(data: AddEscalationData): CancelablePromise<AddEscalationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/work-list/escalate',
            query: {
                alertIds: data.alertIds
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static escalateMonitoringAlerts(data: EscalateMonitoringAlertsData): CancelablePromise<EscalateMonitoringAlertsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/work-list/escalate/id/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.escalateId
     * @param data.resolveNote
     * @param data.status
     * @returns Response OK
     * @throws ApiError
     */
    public static addEscalation1(data: AddEscalation1Data): CancelablePromise<AddEscalation1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/work-list/escalate-resolve',
            query: {
                escalateId: data.escalateId,
                resolveNote: data.resolveNote,
                status: data.status
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.newReading
     * @returns Response OK
     * @throws ApiError
     */
    public static createMonitoringRecord(data: CreateMonitoringRecordData): CancelablePromise<CreateMonitoringRecordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/work-list/create-record',
            query: {
                newReading: data.newReading
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.requestBody
     * @param data.deviceReading
     * @param data.syncVitalDate
     * @returns Response OK
     * @throws ApiError
     */
    public static addVitals(data: AddVitalsData): CancelablePromise<AddVitalsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/work-list/add-vitals/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                deviceReading: data.deviceReading,
                syncVitalDate: data.syncVitalDate
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.enrollmentServiceType
     * @param data.interactionWeek
     * @param data.fullName
     * @param data.careName
     * @param data.dob
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getWeekWiseInteraction(data: GetWeekWiseInteractionData): CancelablePromise<GetWeekWiseInteractionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/week-interaction',
            query: {
                fullName: data.fullName,
                careName: data.careName,
                dob: data.dob,
                enrollmentServiceType: data.enrollmentServiceType,
                interactionWeek: data.interactionWeek,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.vital
     * @param data.startDate
     * @param data.endDate
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getByVitals(data: GetByVitalsData): CancelablePromise<GetByVitalsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/vitals/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                startDate: data.startDate,
                endDate: data.endDate,
                vital: data.vital,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.enrollmentServiceType
     * @param data.startDate
     * @param data.endDate
     * @returns Response OK
     * @throws ApiError
     */
    public static progressBarPatient360(data: ProgressBarPatient360Data): CancelablePromise<ProgressBarPatient360Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/progress-bar-patient360/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                enrollmentServiceType: data.enrollmentServiceType,
                startDate: data.startDate,
                endDate: data.endDate
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.isAlert
     * @param data.enrollmentServiceType
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getOfReadingDataMonotoringData(data: GetOfReadingDataMonotoringDataData): CancelablePromise<GetOfReadingDataMonotoringDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/ofReading-monitoring/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                isAlert: data.isAlert,
                enrollmentServiceType: data.enrollmentServiceType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.enrollmentServiceType
     * @param data.fullName
     * @param data.careName
     * @param data.dob
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getNoDataMonitoring(data: GetNoDataMonitoringData): CancelablePromise<GetNoDataMonitoringResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/noData-monitoring',
            query: {
                fullName: data.fullName,
                careName: data.careName,
                dob: data.dob,
                enrollmentServiceType: data.enrollmentServiceType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.enrollmentServiceType
     * @param data.fullName
     * @param data.dob
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getNewPatient(data: GetNewPatientData): CancelablePromise<GetNewPatientResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/new/patient',
            query: {
                fullName: data.fullName,
                dob: data.dob,
                enrollmentServiceType: data.enrollmentServiceType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Response OK
     * @throws ApiError
     */
    public static getMonitoringDataById(data: GetMonitoringDataByIdData): CancelablePromise<GetMonitoringDataByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/id/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.timeZone
     * @param data.vitals
     * @param data.startDate
     * @param data.endDate
     * @param data.unit
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getVitals(data: GetVitalsData): CancelablePromise<GetVitalsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/get-vitals/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                vitals: data.vitals,
                startDate: data.startDate,
                endDate: data.endDate,
                unit: data.unit,
                timeZone: data.timeZone,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getReviewedNote(data: GetReviewedNoteData): CancelablePromise<GetReviewedNoteResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/get-reviewed-note/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getResolvedNote(data: GetResolvedNoteData): CancelablePromise<GetResolvedNoteResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/get-resolved-note/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.timeZone
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getLatestVitals(data: GetLatestVitalsData): CancelablePromise<GetLatestVitalsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/get-latest-vitals/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                timeZone: data.timeZone,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param data.startDate
     * @param data.endDate
     * @param data.search
     * @param data.escalateStatus
     * @returns Response OK
     * @throws ApiError
     */
    public static getEscalate(data: GetEscalateData = {}): CancelablePromise<GetEscalateResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/get-escalate',
            query: {
                page: data.page,
                size: data.size,
                sort: data.sort,
                startDate: data.startDate,
                endDate: data.endDate,
                search: data.search,
                escalateStatus: data.escalateStatus
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.startDate
     * @param data.endDate
     * @param data.search
     * @param data.escalateStatus
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getEscalate1(data: GetEscalate1Data): CancelablePromise<GetEscalate1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/get-escalate-by-patient/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                startDate: data.startDate,
                endDate: data.endDate,
                search: data.search,
                escalateStatus: data.escalateStatus,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getDistinctVitalRecords(data: GetDistinctVitalRecordsData): CancelablePromise<GetDistinctVitalRecordsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/get-distinct-vital/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.startDate
     * @param data.endDate
     * @param data.search
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static medicalHistoryAlert(data: MedicalHistoryAlertData): CancelablePromise<MedicalHistoryAlertResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/get-alert-medical-history/patientUserUuid/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                startDate: data.startDate,
                endDate: data.endDate,
                search: data.search,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.vital
     * @param data.enrollmentServiceType
     * @returns Response OK
     * @throws ApiError
     */
    public static getAlertConfig(data: GetAlertConfigData): CancelablePromise<GetAlertConfigResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/get-alert-config/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                vital: data.vital,
                enrollmentServiceType: data.enrollmentServiceType
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Response OK
     * @throws ApiError
     */
    public static getEscalation(data: GetEscalationData): CancelablePromise<GetEscalationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/escalate-resolve-note/escalate-id/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.enrollmentServiceType
     * @param data.fullName
     * @param data.careName
     * @param data.dob
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getDataMonitoring(data: GetDataMonitoringData): CancelablePromise<GetDataMonitoringResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/data-monitoring',
            query: {
                fullName: data.fullName,
                careName: data.careName,
                dob: data.dob,
                enrollmentServiceType: data.enrollmentServiceType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.enrollmentServiceType
     * @returns Response OK
     * @throws ApiError
     */
    public static getCountInMonitoringSection(data: GetCountInMonitoringSectionData = {}): CancelablePromise<GetCountInMonitoringSectionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/count/monitoring',
            query: {
                enrollmentServiceType: data.enrollmentServiceType
            }
        });
    }
    
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static getCountInInteractionSection(): CancelablePromise<GetCountInInteractionSectionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/count/interaction'
        });
    }
    
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static getCountInEnrollmentSection(): CancelablePromise<GetCountInEnrollmentSectionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/count/enrollment'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.enrollmentServiceType
     * @param data.fullName
     * @param data.careName
     * @param data.dob
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getClosedEnrollment(data: GetClosedEnrollmentData): CancelablePromise<GetClosedEnrollmentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/closed-enrollment',
            query: {
                fullName: data.fullName,
                careName: data.careName,
                dob: data.dob,
                enrollmentServiceType: data.enrollmentServiceType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.startDate
     * @param data.endDate
     * @param data.isAlert
     * @param data.isResolve
     * @param data.isEscalate
     * @param data.escalateStatus
     * @param data.search
     * @param data.myAlert
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllMonitoringData(data: GetAllMonitoringDataData = {}): CancelablePromise<GetAllMonitoringDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/all/monitoring-records',
            query: {
                startDate: data.startDate,
                endDate: data.endDate,
                isAlert: data.isAlert,
                isResolve: data.isResolve,
                isEscalate: data.isEscalate,
                escalateStatus: data.escalateStatus,
                search: data.search,
                myAlert: data.myAlert,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.enrollmentServiceType
     * @param data.fullName
     * @param data.careName
     * @param data.dob
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAlertsMonitoring(data: GetAlertsMonitoringData): CancelablePromise<GetAlertsMonitoringResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/alerts-monitoring',
            query: {
                fullName: data.fullName,
                careName: data.careName,
                dob: data.dob,
                enrollmentServiceType: data.enrollmentServiceType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.enrollmentServiceType
     * @param data.fullName
     * @param data.careName
     * @param data.dob
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getActiveEnrollment(data: GetActiveEnrollmentData): CancelablePromise<GetActiveEnrollmentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/work-list/active-enrollment',
            query: {
                fullName: data.fullName,
                careName: data.careName,
                dob: data.dob,
                enrollmentServiceType: data.enrollmentServiceType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.vitalId
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteVitals(data: DeleteVitalsData): CancelablePromise<DeleteVitalsResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/work-list/delete-vitals/{vitalId}',
            path: {
                vitalId: data.vitalId
            }
        });
    }
    
}

export class TemplateControllerService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateTemplate(data: UpdateTemplateData): CancelablePromise<UpdateTemplateResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/template/update/id/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static createTemplate(data: CreateTemplateData): CancelablePromise<CreateTemplateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/template/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Response OK
     * @throws ApiError
     */
    public static getTemplateById(data: GetTemplateByIdData): CancelablePromise<GetTemplateByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/template/id/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.searchString
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAll(data: GetAllData = {}): CancelablePromise<GetAllResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/template/all',
            query: {
                searchString: data.searchString,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteTemplate(data: DeleteTemplateData): CancelablePromise<DeleteTemplateResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/template/delete/id/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class RedirectProviderControllerService {
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.providerUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getProvider(data: GetProviderData): CancelablePromise<GetProviderResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/redirect/provider-group/provider/provider-group-uuid/{providerGroupUuid}/provider-uuid/{providerUuid}',
            path: {
                providerGroupUuid: data.providerGroupUuid,
                providerUuid: data.providerUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.providerUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllProvider(data: GetAllProviderData): CancelablePromise<GetAllProviderResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/redirect/provider-group/provider/provider-group-uuid/{providerGroupUuid}/provider-uuid/{providerUuid}',
            path: {
                providerGroupUuid: data.providerGroupUuid,
                providerUuid: data.providerUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.providerUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteProvider(data: DeleteProviderData): CancelablePromise<DeleteProviderResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/redirect/provider-group/provider/provider-group-uuid/{providerGroupUuid}/provider-uuid/{providerUuid}',
            path: {
                providerGroupUuid: data.providerGroupUuid,
                providerUuid: data.providerUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.providerUuid
     * @param data.status
     * @returns Response OK
     * @throws ApiError
     */
    public static updateProviderStatus(data: UpdateProviderStatusData): CancelablePromise<UpdateProviderStatusResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/redirect/provider-group/provider/provider-group-uuid/{providerGroupUuid}/provider-uuid/{providerUuid}/status',
            path: {
                providerGroupUuid: data.providerGroupUuid,
                providerUuid: data.providerUuid
            },
            query: {
                status: data.status
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveProvider(data: SaveProviderData): CancelablePromise<SaveProviderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/redirect/provider-group/provider/save/provider-group-uuid/{providerGroupUuid}',
            path: {
                providerGroupUuid: data.providerGroupUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.providerUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static resentInvite(data: ResentInviteData): CancelablePromise<ResentInviteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/redirect/provider-group/provider/resend/invite/provider-group-uuid/{providerGroupUuid}/provider-uuid/{providerUuid}',
            path: {
                providerGroupUuid: data.providerGroupUuid,
                providerUuid: data.providerUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.exclude
     * @param data.searchBy
     * @param data.status
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllProvider1(data: GetAllProvider1Data): CancelablePromise<GetAllProvider1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/redirect/provider-group/provider/all/provider-group-uuid/{providerGroupUuid}',
            path: {
                providerGroupUuid: data.providerGroupUuid
            },
            query: {
                exclude: data.exclude,
                searchBy: data.searchBy,
                status: data.status,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class RedirectDeviceControllerService {
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.uuid
     * @param data.status
     * @returns Response OK
     * @throws ApiError
     */
    public static updateStatus(data: UpdateStatusData): CancelablePromise<UpdateStatusResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/redirect/provider-group/device/provider-group-uuid/{providerGroupUuid}/uuid/{uuid}/status',
            path: {
                providerGroupUuid: data.providerGroupUuid,
                uuid: data.uuid
            },
            query: {
                status: data.status
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateDevice(data: UpdateDeviceData): CancelablePromise<UpdateDeviceResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/redirect/provider-group/device/provider-group-uuid/{providerGroupUuid}/update/uuid/{uuid}',
            path: {
                providerGroupUuid: data.providerGroupUuid,
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveDevice(data: SaveDeviceData): CancelablePromise<SaveDeviceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/redirect/provider-group/device/save/provider-group-uuid/{providerGroupUuid}',
            path: {
                providerGroupUuid: data.providerGroupUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static fetchDevice(data: FetchDeviceData): CancelablePromise<FetchDeviceResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/redirect/provider-group/device/provider-group-uuid/{providerGroupUuid}/uuid/{uuid}',
            path: {
                providerGroupUuid: data.providerGroupUuid,
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static updateStatus3(data: UpdateStatus3Data): CancelablePromise<UpdateStatus3Response> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/redirect/provider-group/device/provider-group-uuid/{providerGroupUuid}/uuid/{uuid}',
            path: {
                providerGroupUuid: data.providerGroupUuid,
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.searchString
     * @param data.status
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static fetchDevices(data: FetchDevicesData): CancelablePromise<FetchDevicesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/redirect/provider-group/device/provider-group-uuid/{providerGroupUuid}/all',
            path: {
                providerGroupUuid: data.providerGroupUuid
            },
            query: {
                searchString: data.searchString,
                status: data.status,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class ProviderControllerService {
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateProvider(data: UpdateProviderData): CancelablePromise<UpdateProviderResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/provider/update/uuid/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateProviderNew(data: UpdateProviderNewData): CancelablePromise<UpdateProviderNewResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/provider/update-new/uuid/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.status
     * @returns Response OK
     * @throws ApiError
     */
    public static updateProviderStatus1(data: UpdateProviderStatus1Data): CancelablePromise<UpdateProviderStatus1Response> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/provider/status/uuid/{uuid}',
            path: {
                uuid: data.uuid
            },
            query: {
                status: data.status
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveProvider1(data: SaveProvider1Data): CancelablePromise<SaveProvider1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/provider/save',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveProviderNew(data: SaveProviderNewData): CancelablePromise<SaveProviderNewResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/provider/save-new',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static resendInvite(data: ResendInviteData): CancelablePromise<ResendInviteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/provider/resend/invite/uuid/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.enrollmentServiceType
     * @returns Response OK
     * @throws ApiError
     */
    public static addParticipant(data: AddParticipantData): CancelablePromise<AddParticipantResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/provider/add-participant',
            query: {
                patientUserUuid: data.patientUserUuid,
                enrollmentServiceType: data.enrollmentServiceType
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getProvider1(data: GetProvider1Data): CancelablePromise<GetProvider1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/provider/provider-uuid/{providerUuid}',
            path: {
                providerUuid: data.providerUuid
            }
        });
    }
    
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static getProvider2(): CancelablePromise<GetProvider2Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/provider/login-provider'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns PageCareManager OK
     * @throws ApiError
     */
    public static getCareManagers(data: GetCareManagersData): CancelablePromise<GetCareManagersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/provider/care-managers/patientUserUuid/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getProvidersByPatientUuid(data: GetProvidersByPatientUuidData): CancelablePromise<GetProvidersByPatientUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/provider/by-patient/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerUserUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getProviderByUuid(data: GetProviderByUuidData): CancelablePromise<GetProviderByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/provider/auth/provider-uuid/{providerUserUuid}',
            path: {
                providerUserUuid: data.providerUserUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.exclude
     * @param data.role
     * @param data.searchBy
     * @param data.status
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllProvider3(data: GetAllProvider3Data = {}): CancelablePromise<GetAllProvider3Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/provider/all',
            query: {
                exclude: data.exclude,
                role: data.role,
                searchBy: data.searchBy,
                status: data.status,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteProvider1(data: DeleteProvider1Data): CancelablePromise<DeleteProvider1Response> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/provider/uuid/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
}

export class ProviderGroupControllerService {
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static syncDatabaseSchema(data: SyncDatabaseSchemaData): CancelablePromise<SyncDatabaseSchemaResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/provider-group/{uuid}/sync',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getProviderGroup(data: GetProviderGroupData): CancelablePromise<GetProviderGroupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/provider-group/uuid/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateProviderGroup(data: UpdateProviderGroupData): CancelablePromise<UpdateProviderGroupResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/provider-group/uuid/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.status
     * @returns Response OK
     * @throws ApiError
     */
    public static updateStatus1(data: UpdateStatus1Data): CancelablePromise<UpdateStatus1Response> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/provider-group/uuid/{uuid}/status',
            path: {
                uuid: data.uuid
            },
            query: {
                status: data.status
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static updateLastLogin(data: UpdateLastLoginData): CancelablePromise<UpdateLastLoginResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/provider-group/user/last-login/user-uuid/{userUuid}',
            path: {
                userUuid: data.userUuid
            }
        });
    }
    
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static syncDatabaseSchemas(): CancelablePromise<SyncDatabaseSchemasResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/provider-group/sync-all-provider-group'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static createProviderGroup(data: CreateProviderGroupData): CancelablePromise<CreateProviderGroupResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/provider-group/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static createDefaultDocument(): CancelablePromise<CreateDefaultDocumentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/provider-group/create-default-document'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.username
     * @returns Response OK
     * @throws ApiError
     */
    public static getUserCommonDetailsByUsername(data: GetUserCommonDetailsByUsernameData): CancelablePromise<GetUserCommonDetailsByUsernameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/provider-group/user/common-user-details/username/{username}',
            path: {
                username: data.username
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getUserCommonDetailsByUserUuid(data: GetUserCommonDetailsByUserUuidData): CancelablePromise<GetUserCommonDetailsByUserUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/provider-group/user/common-user-details/user-uuid/{userUuid}',
            path: {
                userUuid: data.userUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.tenantGroup
     * @returns Response OK
     * @throws ApiError
     */
    public static getProviderGroupDetailsByTenantGroup(data: GetProviderGroupDetailsByTenantGroupData): CancelablePromise<GetProviderGroupDetailsByTenantGroupResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/provider-group/by/tenant-group',
            query: {
                tenantGroup: data.tenantGroup
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.searchString
     * @param data.active
     * @param data.state
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllProviderGroups(data: GetAllProviderGroupsData = {}): CancelablePromise<GetAllProviderGroupsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/provider-group/all',
            query: {
                searchString: data.searchString,
                active: data.active,
                state: data.state,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class PatientControllerService {
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateProfileAvatar(data: UpdateProfileAvatarData): CancelablePromise<UpdateProfileAvatarResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/patient/updateprofile/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updatePatient(data: UpdatePatientData): CancelablePromise<UpdatePatientResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/patient/update',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.status
     * @returns Response OK
     * @throws ApiError
     */
    public static updatePatientStatus(data: UpdatePatientStatusData): CancelablePromise<UpdatePatientStatusResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/patient/update/status/uuid/{uuid}',
            path: {
                uuid: data.uuid
            },
            query: {
                status: data.status
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.familyMemberId
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateFamilyDetails(data: UpdateFamilyDetailsData): CancelablePromise<UpdateFamilyDetailsResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/patient/family/{patientUserUuid}/{familyMemberId}',
            path: {
                patientUserUuid: data.patientUserUuid,
                familyMemberId: data.familyMemberId
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static setTemporaryPasswordFieldForPatient(data: SetTemporaryPasswordFieldForPatientData): CancelablePromise<SetTemporaryPasswordFieldForPatientResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/patient/temporary-password/{userUuid}',
            path: {
                userUuid: data.userUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static sendSms(data: SendSmsData): CancelablePromise<SendSmsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/patient/send/sms',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static sendMessages(data: SendMessagesData): CancelablePromise<SendMessagesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/patient/send/message',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static savePatient(data: SavePatientData): CancelablePromise<SavePatientResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/patient/save',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static sendMessageProvider(data: SendMessageProviderData): CancelablePromise<SendMessageProviderResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/patient/message/notification-provider/',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addCareTeam(data: AddCareTeamData): CancelablePromise<AddCareTeamResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/patient/add/careteam/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getPatientByUuid(data: GetPatientByUuidData): CancelablePromise<GetPatientByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient/uuid/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deletePatient(data: DeletePatientData): CancelablePromise<DeletePatientResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/patient/uuid/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.search
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static searchPatientProvider(data: SearchPatientProviderData = {}): CancelablePromise<SearchPatientProviderResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient/search-patient-provider',
            query: {
                search: data.search,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.mobileType
     * @returns Response OK
     * @throws ApiError
     */
    public static getProfile(data: GetProfileData = {}): CancelablePromise<GetProfileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient/profile',
            query: {
                mobileType: data.mobileType
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getAvatar(data: GetAvatarData): CancelablePromise<GetAvatarResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient/getAvatar/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.activity
     * @param data.searchString
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getSmsWithProviderEntity(data: GetSmsWithProviderEntityData): CancelablePromise<GetSmsWithProviderEntityResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient/get-sms',
            query: {
                searchString: data.searchString,
                activity: data.activity,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.key
     * @returns Response OK
     * @throws ApiError
     */
    public static getErrorForFile(data: GetErrorForFileData): CancelablePromise<GetErrorForFileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient/get-error',
            query: {
                key: data.key
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getFamilyMembers(data: GetFamilyMembersData): CancelablePromise<GetFamilyMembersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient/family/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.searchBy
     * @param data.status
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllPatient(data: GetAllPatientData = {}): CancelablePromise<GetAllPatientResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient/all',
            query: {
                searchBy: data.searchBy,
                status: data.status,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userUuid
     * @param data.searchBy
     * @param data.serviceType
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllCareTeam(data: GetAllCareTeamData): CancelablePromise<GetAllCareTeamResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient/all/careteam/patient-user-uuid/{userUuid}',
            path: {
                userUuid: data.userUuid
            },
            query: {
                searchBy: data.searchBy,
                serviceType: data.serviceType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getManagers(data: GetManagersData): CancelablePromise<GetManagersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient/all/caremanagers/patient-user-uuid/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.enrollmentServiceType
     * @param data.id
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteCareTeam(data: DeleteCareTeamData): CancelablePromise<DeleteCareTeamResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/patient/delete/id/{id}',
            path: {
                id: data.id
            },
            query: {
                patientUserUuid: data.patientUserUuid,
                enrollmentServiceType: data.enrollmentServiceType
            }
        });
    }
    
}

export class PatientSymptomControllerService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateSymptom(data: UpdateSymptomData): CancelablePromise<UpdateSymptomResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/patient-symptom/update/id/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addPatientSymptom(data: AddPatientSymptomData): CancelablePromise<AddPatientSymptomResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/patient-symptom/add',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllByPatient(data: GetAllByPatientData): CancelablePromise<GetAllByPatientResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient-symptom/all/patient-user-uuid/{userUuid}',
            path: {
                userUuid: data.userUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Response OK
     * @throws ApiError
     */
    public static deletePatientSymptom(data: DeletePatientSymptomData): CancelablePromise<DeletePatientSymptomResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/patient-symptom/delete/id/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class PatientMedicationControllerService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateMedication(data: UpdateMedicationData): CancelablePromise<UpdateMedicationResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/patient-medication/update/id/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addMedication(data: AddMedicationData): CancelablePromise<AddMedicationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/patient-medication/add',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static changeStatus(): CancelablePromise<ChangeStatusResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient-medication/all/patient/change'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userUuid
     * @param data.searchBy
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllMedicationsByPatient(data: GetAllMedicationsByPatientData): CancelablePromise<GetAllMedicationsByPatientResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient-medication/all/patient-user-uuid/{userUuid}',
            path: {
                userUuid: data.userUuid
            },
            query: {
                searchBy: data.searchBy,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userUuid
     * @param data.status
     * @param data.searchString
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getMedicationsByPatient(data: GetMedicationsByPatientData): CancelablePromise<GetMedicationsByPatientResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient-medication/all/patient-user-uuid/{userUuid}/medications',
            path: {
                userUuid: data.userUuid
            },
            query: {
                status: data.status,
                searchString: data.searchString,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.searchBy
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllMedications(data: GetAllMedicationsData = {}): CancelablePromise<GetAllMedicationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient-medication/all/medications',
            query: {
                searchBy: data.searchBy,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteMedication(data: DeleteMedicationData): CancelablePromise<DeleteMedicationResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/patient-medication/delete/id/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class PatientConditionControllerService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updatePatientCondition(data: UpdatePatientConditionData): CancelablePromise<UpdatePatientConditionResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/patient-condition/update/id/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addPatientCondition(data: AddPatientConditionData): CancelablePromise<AddPatientConditionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/patient-condition/add',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userUuid
     * @param data.searchString
     * @param data.serviceType
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllPatientConditions(data: GetAllPatientConditionsData): CancelablePromise<GetAllPatientConditionsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient-condition/all/patient-user-uuid/{userUuid}',
            path: {
                userUuid: data.userUuid
            },
            query: {
                searchString: data.searchString,
                serviceType: data.serviceType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Response OK
     * @throws ApiError
     */
    public static deletePatientCondition(data: DeletePatientConditionData): CancelablePromise<DeletePatientConditionResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/patient-condition/delete/id/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class PatientAllergyControllerService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updatePatientAllergy(data: UpdatePatientAllergyData): CancelablePromise<UpdatePatientAllergyResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/patient-allergy/update/id/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addPatientAllergy(data: AddPatientAllergyData): CancelablePromise<AddPatientAllergyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/patient-allergy/add',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userUuid
     * @param data.searchString
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllAllergy(data: GetAllAllergyData): CancelablePromise<GetAllAllergyResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/patient-allergy/all/patient-user-uuid/{userUuid}',
            path: {
                userUuid: data.userUuid
            },
            query: {
                searchString: data.searchString,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Response OK
     * @throws ApiError
     */
    public static deletePatientAllergyById(data: DeletePatientAllergyByIdData): CancelablePromise<DeletePatientAllergyByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/patient-allergy/delete/id/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class NotificationEntityControllerService {
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static putNotifications(): CancelablePromise<PutNotificationsResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/notifications/patientUserUuid/'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.notificationuuid
     * @returns Response OK
     * @throws ApiError
     */
    public static notificationUpdate(data: NotificationUpdateData): CancelablePromise<NotificationUpdateResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/notifications/notification-uuid/{notificationuuid}',
            path: {
                notificationuuid: data.notificationuuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.type
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllNotifications(data: GetAllNotificationsData = {}): CancelablePromise<GetAllNotificationsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/notifications/all/notifications/',
            query: {
                type: data.type,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static getCountNotification(): CancelablePromise<GetCountNotificationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/notifications/all/notification/count/'
        });
    }
    
}

export class NotificationControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateNotifications(data: UpdateNotificationsData): CancelablePromise<UpdateNotificationsResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/notification/update',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.search
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllNotification(data: GetAllNotificationData = {}): CancelablePromise<GetAllNotificationResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/notification/all/notifications',
            query: {
                search: data.search
            }
        });
    }
    
}

export class NotificationProviderControllerService {
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static putNotifications1(): CancelablePromise<PutNotifications1Response> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/notification-provider/provider/'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.notificationuuid
     * @returns Response OK
     * @throws ApiError
     */
    public static notificationUpdate1(data: NotificationUpdate1Data): CancelablePromise<NotificationUpdate1Response> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/notification-provider/notification-uuid/{notificationuuid}',
            path: {
                notificationuuid: data.notificationuuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.type
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllNotifications1(data: GetAllNotifications1Data = {}): CancelablePromise<GetAllNotifications1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/notification-provider/all/notifications/',
            query: {
                type: data.type,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static getCountNotification1(): CancelablePromise<GetCountNotification1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/notification-provider/all/notification/count/'
        });
    }
    
}

export class LabResultControllerService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateLabResult(data: UpdateLabResultData): CancelablePromise<UpdateLabResultResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/lab/update/id/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static createLabResult(data: CreateLabResultData): CancelablePromise<CreateLabResultResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/lab/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Response OK
     * @throws ApiError
     */
    public static getById(data: GetByIdData): CancelablePromise<GetByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/lab/id/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userUuid
     * @param data.searchString
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllPatientLabResult(data: GetAllPatientLabResultData): CancelablePromise<GetAllPatientLabResultResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/lab/all/patient-user-uuid/{userUuid}',
            path: {
                userUuid: data.userUuid
            },
            query: {
                searchString: data.searchString,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteLabResult(data: DeleteLabResultData): CancelablePromise<DeleteLabResultResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/lab/delete/id/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class InsuranceControllerService {
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateInsuranceMobile(data: UpdateInsuranceMobileData): CancelablePromise<UpdateInsuranceMobileResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/insurance/update/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveInsurancesMobile(data: SaveInsurancesMobileData): CancelablePromise<SaveInsurancesMobileResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/insurance/create/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addInsurance(data: AddInsuranceData): CancelablePromise<AddInsuranceResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/insurance/addinsurance/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllInsuranceMobile(data: GetAllInsuranceMobileData): CancelablePromise<GetAllInsuranceMobileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/insurance/all/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteInsuranceMobile(): CancelablePromise<DeleteInsuranceMobileResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/insurance/delete/{insurance-uuid}'
        });
    }
    
}

export class IcdCodeControllerService {
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateIcdCode(data: UpdateIcdCodeData): CancelablePromise<UpdateIcdCodeResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/icd-code/update/id/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.isFavorite
     * @param data.id
     * @returns Response OK
     * @throws ApiError
     */
    public static makeIcdCodeFavorite(data: MakeIcdCodeFavoriteData): CancelablePromise<MakeIcdCodeFavoriteResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/icd-code/markAsFavorite/id/{id}',
            path: {
                id: data.id
            },
            query: {
                isFavorite: data.isFavorite
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static createIcdCode(data: CreateIcdCodeData): CancelablePromise<CreateIcdCodeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/icd-code/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Response OK
     * @throws ApiError
     */
    public static getIcdCodeById(data: GetIcdCodeByIdData): CancelablePromise<GetIcdCodeByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/icd-code/id/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.searchString
     * @param data.isFavorite
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAll1(data: GetAll1Data = {}): CancelablePromise<GetAll1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/icd-code/all',
            query: {
                searchString: data.searchString,
                isFavorite: data.isFavorite,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteTemplate1(data: DeleteTemplate1Data): CancelablePromise<DeleteTemplate1Response> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/icd-code/delete/id/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class EnrollmentControllerService {
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @param data.reEnrollment
     * @returns Response OK
     * @throws ApiError
     */
    public static updateEnrollment(data: UpdateEnrollmentData): CancelablePromise<UpdateEnrollmentResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/enrollment/update/{uuid}',
            path: {
                uuid: data.uuid
            },
            query: {
                reEnrollment: data.reEnrollment
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static reEnrollment(data: ReEnrollmentData): CancelablePromise<ReEnrollmentResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/enrollment/re-enroll/uuid/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static createEnrollment(data: CreateEnrollmentData): CancelablePromise<CreateEnrollmentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/enrollment/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getVitalsOfPatient(data: GetVitalsOfPatientData): CancelablePromise<GetVitalsOfPatientResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/enrollment/vitals/patient/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getEnrollmentById(data: GetEnrollmentByIdData): CancelablePromise<GetEnrollmentByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/enrollment/uuid/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getEnrollmentOfPatient(data: GetEnrollmentOfPatientData): CancelablePromise<GetEnrollmentOfPatientResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/enrollment/patient/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.enrollmentStatusType
     * @param data.startDate
     * @param data.endDate
     * @param data.enrollmentServiceType
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllEnrollment(data: GetAllEnrollmentData = {}): CancelablePromise<GetAllEnrollmentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/enrollment/all',
            query: {
                enrollmentStatusType: data.enrollmentStatusType,
                startDate: data.startDate,
                endDate: data.endDate,
                enrollmentServiceType: data.enrollmentServiceType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteEnrollment(data: DeleteEnrollmentData): CancelablePromise<DeleteEnrollmentResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/enrollment/delete/uuid/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class DocumentControllerService {
    /**
     * @param data The data for the request.
     * @param data.archive
     * @param data.documentUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static updateArchive(data: UpdateArchiveData): CancelablePromise<UpdateArchiveResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/document/archive/document-uuid/{documentUuid}',
            path: {
                documentUuid: data.documentUuid
            },
            query: {
                archive: data.archive
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.documentUuid
     * @param data.patientUserUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getSignature(data: GetSignatureData): CancelablePromise<GetSignatureResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/document/signature/{documentUuid}/{patientUserUuid}',
            path: {
                documentUuid: data.documentUuid,
                patientUserUuid: data.patientUserUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.documentUuid
     * @param data.patientUserUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static createSignature(data: CreateSignatureData): CancelablePromise<CreateSignatureResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/document/signature/{documentUuid}/{patientUserUuid}',
            path: {
                documentUuid: data.documentUuid,
                patientUserUuid: data.patientUserUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static mapDocumentsToPatients(data: MapDocumentsToPatientsData): CancelablePromise<MapDocumentsToPatientsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/document/map-to-patients',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static createDocument(data: CreateDocumentData): CancelablePromise<CreateDocumentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/document/create',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns PageDocumentDTO OK
     * @throws ApiError
     */
    public static getSignedDocuments(data: GetSignedDocumentsData): CancelablePromise<GetSignedDocumentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/document/signed-documents/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.searchString
     * @param data.archive
     * @param data.documentType
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getPatientMappedDocuments(data: GetPatientMappedDocumentsData): CancelablePromise<GetPatientMappedDocumentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/document/mapped-to-patient/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                searchString: data.searchString,
                archive: data.archive,
                documentType: data.documentType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.searchString
     * @param data.archive
     * @param data.documentType
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getDocuments(data: GetDocumentsData = {}): CancelablePromise<GetDocumentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/document/all',
            query: {
                searchString: data.searchString,
                archive: data.archive,
                documentType: data.documentType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.documentUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteDocument(data: DeleteDocumentData): CancelablePromise<DeleteDocumentResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/document/delete/document-uuid/{documentUuid}',
            path: {
                documentUuid: data.documentUuid
            }
        });
    }
    
}

export class DeviceControllerService {
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.status
     * @returns Response OK
     * @throws ApiError
     */
    public static updateStatus2(data: UpdateStatus2Data): CancelablePromise<UpdateStatus2Response> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/device/uuid/{uuid}/status',
            path: {
                uuid: data.uuid
            },
            query: {
                status: data.status
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateDevice1(data: UpdateDevice1Data): CancelablePromise<UpdateDevice1Response> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/device/update/uuid/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.deviceUuid
     * @param data.assign
     * @param data.providerGroupUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static unAssignDevice(data: UnAssignDeviceData): CancelablePromise<UnAssignDeviceResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/device/un-assign/{deviceUuid}',
            path: {
                deviceUuid: data.deviceUuid
            },
            query: {
                assign: data.assign,
                providerGroupUuid: data.providerGroupUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveDevice1(data: SaveDevice1Data): CancelablePromise<SaveDevice1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/device/save/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.search
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static fetchDeviceByPatient(data: FetchDeviceByPatientData): CancelablePromise<FetchDeviceByPatientResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/device/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                search: data.search,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static fetchDevice1(data: FetchDevice1Data): CancelablePromise<FetchDevice1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/device/uuid/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static updateStatus4(data: UpdateStatus4Data): CancelablePromise<UpdateStatus4Response> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/device/uuid/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.searchString
     * @param data.status
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static fetchDevices1(data: FetchDevices1Data = {}): CancelablePromise<FetchDevices1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/device/all',
            query: {
                searchString: data.searchString,
                status: data.status,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static fetchAllDevicesName(data: FetchAllDevicesNameData = {}): CancelablePromise<FetchAllDevicesNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/device/all/device-name',
            query: {
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class AdminUserControllerService {
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateUser(data: UpdateUserData): CancelablePromise<UpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/admin/user/update/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.isActive
     * @returns Response OK
     * @throws ApiError
     */
    public static manageUser(data: ManageUserData): CancelablePromise<ManageUserResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/master/v1/admin/user/status/{uuid}',
            path: {
                uuid: data.uuid
            },
            query: {
                isActive: data.isActive
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveAdminUser(data: SaveAdminUserData): CancelablePromise<SaveAdminUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/admin/user/save',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static resendInvitation(data: ResendInvitationData): CancelablePromise<ResendInvitationResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/admin/user/re-send/invite/uuid/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.userUuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getProfile1(data: GetProfile1Data = {}): CancelablePromise<GetProfile1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/admin/user/profile',
            query: {
                userUuid: data.userUuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.exclude
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param data.sortBy
     * @param data.sortDirection
     * @param data.active
     * @param data.searchBy
     * @returns Response OK
     * @throws ApiError
     */
    public static getUsers(data: GetUsersData = {}): CancelablePromise<GetUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/admin/user/all',
            query: {
                exclude: data.exclude,
                page: data.page,
                size: data.size,
                sort: data.sort,
                sortBy: data.sortBy,
                sortDirection: data.sortDirection,
                active: data.active,
                searchBy: data.searchBy
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static removeUser(data: RemoveUserData): CancelablePromise<RemoveUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/master/v1/admin/user/remove/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
}

export class TimeLogControllerService {
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static setInteractionForNewMonth(): CancelablePromise<SetInteractionForNewMonthResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/time-log/set-time-log-schedular'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.timezone
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addTimeLogs(data: AddTimeLogsData): CancelablePromise<AddTimeLogsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/time-log/save-logs',
            query: {
                timezone: data.timezone
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.timezone
     * @param data.requestBody
     * @param data.note
     * @returns Response OK
     * @throws ApiError
     */
    public static addTimeLog(data: AddTimeLogData): CancelablePromise<AddTimeLogResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/time-log/save-log',
            query: {
                note: data.note,
                timezone: data.timezone
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.enrollmentServiceType
     * @param data.specificMonth
     * @returns Response OK
     * @throws ApiError
     */
    public static getTimeLogByPatientUserUuidAndEnrollmentServiceType(data: GetTimeLogByPatientUserUuidAndEnrollmentServiceTypeData): CancelablePromise<GetTimeLogByPatientUserUuidAndEnrollmentServiceTypeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/time-log/uuid/{patientUserUuid}/{enrollmentServiceType}',
            path: {
                patientUserUuid: data.patientUserUuid,
                enrollmentServiceType: data.enrollmentServiceType
            },
            query: {
                specificMonth: data.specificMonth
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.enrollmentServiceType
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getMonthWiseTimeLog(data: GetMonthWiseTimeLogData): CancelablePromise<GetMonthWiseTimeLogResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/time-log/patient/{patientUserUuid}/time-logs',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                enrollmentServiceType: data.enrollmentServiceType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.enrollmentServiceType
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getManualEntries(data: GetManualEntriesData): CancelablePromise<GetManualEntriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/time-log/manual-entries/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                enrollmentServiceType: data.enrollmentServiceType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.timeZone
     * @param data.enrollmentServiceType
     * @param data.startDate
     * @param data.endDate
     * @param data.activity
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getTimeLine(data: GetTimeLineData): CancelablePromise<GetTimeLineResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/time-log/get-timeline/patientUserUuid/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                startDate: data.startDate,
                endDate: data.endDate,
                activity: data.activity,
                timeZone: data.timeZone,
                enrollmentServiceType: data.enrollmentServiceType,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class RedirectImportControllerService {
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static imports(data: ImportsData): CancelablePromise<ImportsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/provider-group/import/provider-group-uuid/{providerGroupUuid}',
            path: {
                providerGroupUuid: data.providerGroupUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.searchString
     * @param data.status
     * @param data.file
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getPatientAuditFiles(data: GetPatientAuditFilesData): CancelablePromise<GetPatientAuditFilesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/provider-group/import/patient/audit-files/provider-group-uuid/{providerGroupUuid}',
            path: {
                providerGroupUuid: data.providerGroupUuid
            },
            query: {
                searchString: data.searchString,
                status: data.status,
                file: data.file,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.audiFileId
     * @param data.searchString
     * @param data.status
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getPatientAuditFileRecords(data: GetPatientAuditFileRecordsData): CancelablePromise<GetPatientAuditFileRecordsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/provider-group/import/patient/audit-files-records/audit-files-id/{audiFileId}/provider-group-uuid/{providerGroupUuid}',
            path: {
                providerGroupUuid: data.providerGroupUuid,
                audiFileId: data.audiFileId
            },
            query: {
                searchString: data.searchString,
                status: data.status,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class PatientInteractionControllerService {
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static setWeekToNewWeek(): CancelablePromise<SetWeekToNewWeekResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/patient-interaction/set-week-to-new-week'
        });
    }
    
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static setWeek1ForNewMonth(): CancelablePromise<SetWeek1ForNewMonthResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/patient-interaction/set-week-schedular'
        });
    }
    
}

export class MonitoringServiceControllerService {
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static setDays(): CancelablePromise<SetDaysResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/monitoring/set-day'
        });
    }
    
}

export class ImportControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static imports1(data: Imports1Data): CancelablePromise<Imports1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/import',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static importsIcd(data: ImportsIcdData): CancelablePromise<ImportsIcdResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/import/icd',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.searchString
     * @param data.status
     * @param data.file
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getPatientAuditFiles1(data: GetPatientAuditFiles1Data = {}): CancelablePromise<GetPatientAuditFiles1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/import/patient/audit-files',
            query: {
                searchString: data.searchString,
                status: data.status,
                file: data.file,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.audiFileId
     * @param data.searchString
     * @param data.status
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getPatientAuditFileRecords1(data: GetPatientAuditFileRecords1Data): CancelablePromise<GetPatientAuditFileRecords1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/import/patient/audit-files-records/audit-files-id/{audiFileId}',
            path: {
                audiFileId: data.audiFileId
            },
            query: {
                searchString: data.searchString,
                status: data.status,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.templateType
     * @returns binary OK
     * @throws ApiError
     */
    public static getTemplateInCsv(data: GetTemplateInCsvData): CancelablePromise<GetTemplateInCsvResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/import/export/template',
            query: {
                templateType: data.templateType
            }
        });
    }
    
}

export class GlobalNoteControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addGlobalNote(data: AddGlobalNoteData): CancelablePromise<AddGlobalNoteResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/globalnote/add',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getGlobalNotesByPatientUuid(data: GetGlobalNotesByPatientUuidData): CancelablePromise<GetGlobalNotesByPatientUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/globalnote/patientUserUuid/{patientUserUuid}',
            path: {
                patientUserUuid: data.patientUserUuid
            },
            query: {
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class BillingControllerService {
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static setMonitoringForNewMonth(): CancelablePromise<SetMonitoringForNewMonthResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/billing/set-monitoring-schedular'
        });
    }
    
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static setInteractionForNewMonth1(): CancelablePromise<SetInteractionForNewMonth1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/billing/set-interaction-schedular'
        });
    }
    
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static setEnrollmentForNewMonth(): CancelablePromise<SetEnrollmentForNewMonthResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/billing/set-enrollment-schedular'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateMonitoringBillingByUuid(data: UpdateMonitoringBillingByUuidData): CancelablePromise<UpdateMonitoringBillingByUuidResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/billing/monitoring/update-uuid/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateInteractionBillingByUuid(data: UpdateInteractionBillingByUuidData): CancelablePromise<UpdateInteractionBillingByUuidResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/billing/interaction/update-uuid/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateEnrollmentBillingByUuid(data: UpdateEnrollmentBillingByUuidData): CancelablePromise<UpdateEnrollmentBillingByUuidResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/billing/enrollment/update-uuid/{uuid}',
            path: {
                uuid: data.uuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.patientUserUuid
     * @param data.service
     * @param data.localDate
     * @returns Response OK
     * @throws ApiError
     */
    public static patient360AllBilling(data: Patient360AllBillingData): CancelablePromise<Patient360AllBillingResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/billing/patient360-all-billing',
            query: {
                patientUserUuid: data.patientUserUuid,
                service: data.service,
                localDate: data.localDate
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getMonitoringBillingByUuid(data: GetMonitoringBillingByUuidData): CancelablePromise<GetMonitoringBillingByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/billing/monitoring/uuid/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.localDate
     * @returns Response OK
     * @throws ApiError
     */
    public static getMonitoringBillingCount(data: GetMonitoringBillingCountData): CancelablePromise<GetMonitoringBillingCountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/billing/monitoring-count',
            query: {
                localDate: data.localDate
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.service
     * @param data.localDate
     * @param data.patientName
     * @param data.providerName
     * @param data.claimStatus
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllBillingForMonitoring(data: GetAllBillingForMonitoringData): CancelablePromise<GetAllBillingForMonitoringResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/billing/monitoring-all',
            query: {
                patientName: data.patientName,
                providerName: data.providerName,
                claimStatus: data.claimStatus,
                service: data.service,
                localDate: data.localDate,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @param data.localDate
     * @returns Response OK
     * @throws ApiError
     */
    public static getInteractionBillingByUuid(data: GetInteractionBillingByUuidData): CancelablePromise<GetInteractionBillingByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/billing/interaction/uuid/{uuid}',
            path: {
                uuid: data.uuid
            },
            query: {
                localDate: data.localDate
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.localDate
     * @returns Response OK
     * @throws ApiError
     */
    public static getInteractionBillingCount(data: GetInteractionBillingCountData): CancelablePromise<GetInteractionBillingCountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/billing/interaction-count',
            query: {
                localDate: data.localDate
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.service
     * @param data.localDate
     * @param data.patientName
     * @param data.providerName
     * @param data.claimStatus
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllBillingForInteraction(data: GetAllBillingForInteractionData): CancelablePromise<GetAllBillingForInteractionResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/billing/interaction-all',
            query: {
                patientName: data.patientName,
                providerName: data.providerName,
                claimStatus: data.claimStatus,
                service: data.service,
                localDate: data.localDate,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.uuid
     * @returns Response OK
     * @throws ApiError
     */
    public static getEnrollmentBillingByUuid(data: GetEnrollmentBillingByUuidData): CancelablePromise<GetEnrollmentBillingByUuidResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/billing/enrollment/uuid/{uuid}',
            path: {
                uuid: data.uuid
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.localDate
     * @returns Response OK
     * @throws ApiError
     */
    public static getEnrollmentBillingCount(data: GetEnrollmentBillingCountData): CancelablePromise<GetEnrollmentBillingCountResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/billing/enrollment-count',
            query: {
                localDate: data.localDate
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.service
     * @param data.localDate
     * @param data.patientName
     * @param data.providerName
     * @param data.claimStatus
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllBillingForEnrollment(data: GetAllBillingForEnrollmentData): CancelablePromise<GetAllBillingForEnrollmentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/billing/enrollment-all',
            query: {
                patientName: data.patientName,
                providerName: data.providerName,
                claimStatus: data.claimStatus,
                service: data.service,
                localDate: data.localDate,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class AuthenticationControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static setPassword(data: SetPasswordData): CancelablePromise<SetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/auth/set-password',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static setPasswordCsvPatient(data: SetPasswordCsvPatientData): CancelablePromise<SetPasswordCsvPatientResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/auth/set-password-csv-patient',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static getAccessToken(data: GetAccessTokenData): CancelablePromise<GetAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/auth/login',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static forgotPasswordRequest(data: ForgotPasswordRequestData): CancelablePromise<ForgotPasswordRequestResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/auth/forgot-password',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns Response OK
     * @throws ApiError
     */
    public static checkUrlEndPoint(): CancelablePromise<CheckUrlEndPointResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/auth/check-url'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.oldPassword
     * @param data.newPassword
     * @returns Response OK
     * @throws ApiError
     */
    public static updatePassword(data: UpdatePasswordData): CancelablePromise<UpdatePasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/auth/change-password',
            query: {
                oldPassword: data.oldPassword,
                newPassword: data.newPassword
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.refreshToken
     * @returns Response OK
     * @throws ApiError
     */
    public static getAccessTokenFromRefreshToken(data: GetAccessTokenFromRefreshTokenData): CancelablePromise<GetAccessTokenFromRefreshTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/auth/access-token',
            query: {
                refreshToken: data.refreshToken
            }
        });
    }
    
}

export class ActivityTimeLogControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static saveActivity(data: SaveActivityData): CancelablePromise<SaveActivityResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/master/v1/activity/save-activity',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.providerUseruuid
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static allActivity(data: AllActivityData): CancelablePromise<AllActivityResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/activity/all-activity/{providerUseruuid}',
            path: {
                providerUseruuid: data.providerUseruuid
            },
            query: {
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class SpecialityControllerService {
    /**
     * @param data The data for the request.
     * @param data.searchString
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllSpecialities(data: GetAllSpecialitiesData = {}): CancelablePromise<GetAllSpecialitiesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/speciality',
            query: {
                searchString: data.searchString,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class RedirectPatientControllerService {
    /**
     * @param data The data for the request.
     * @param data.providerGroupUuid
     * @param data.searchBy
     * @param data.status
     * @param data.page Zero-based page index (0..N)
     * @param data.size The size of the page to be returned
     * @param data.sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @returns Response OK
     * @throws ApiError
     */
    public static getAllProvider2(data: GetAllProvider2Data): CancelablePromise<GetAllProvider2Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/redirect/provider-group/patient/all/provider-group-uuid/{providerGroupUuid}',
            path: {
                providerGroupUuid: data.providerGroupUuid
            },
            query: {
                searchBy: data.searchBy,
                status: data.status,
                page: data.page,
                size: data.size,
                sort: data.sort
            }
        });
    }
    
}

export class PasswordGeneratorControllerService {
    /**
     * @param data The data for the request.
     * @param data.count
     * @returns Response OK
     * @throws ApiError
     */
    public static generatePassword(data: GeneratePasswordData = {}): CancelablePromise<GeneratePasswordResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/master/v1/generate-password',
            query: {
                count: data.count
            }
        });
    }
    
}

export class TwilioSmsControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static sendSms1(data: SendSms1Data): CancelablePromise<SendSms1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/integration/v1/twilio/sms/send-sms',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class TwilioConversationControllerService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateUserToTwilio(data: UpdateUserToTwilioData): CancelablePromise<UpdateUserToTwilioResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/integration/v1/twilio/conversation/update-user',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static sendMessages1(data: SendMessages1Data): CancelablePromise<SendMessages1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/integration/v1/twilio/conversation/send/messages',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static registerUserToTwilio(data: RegisterUserToTwilioData): CancelablePromise<RegisterUserToTwilioResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/integration/v1/twilio/conversation/register-user',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static deleteCareTeamFromTwilio(data: DeleteCareTeamFromTwilioData): CancelablePromise<DeleteCareTeamFromTwilioResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/integration/v1/twilio/conversation/delete-care-team',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addUpdateParticipantToTwilio(data: AddUpdateParticipantToTwilioData): CancelablePromise<AddUpdateParticipantToTwilioResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/integration/v1/twilio/conversation/add-participant',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static addCareTeamToTwilio(data: AddCareTeamToTwilioData): CancelablePromise<AddCareTeamToTwilioResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/integration/v1/twilio/conversation/add-care-team',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.identity
     * @returns TwilioAuthTokenResponse OK
     * @throws ApiError
     */
    public static getAuthToken(data: GetAuthTokenData): CancelablePromise<GetAuthTokenResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/integration/v1/twilio/conversation/token/{identity}',
            path: {
                identity: data.identity
            }
        });
    }
    
}

export class PusherControllerService {
    /**
     * @param data The data for the request.
     * @param data.message
     * @returns Response OK
     * @throws ApiError
     */
    public static sendAlert(data: SendAlertData): CancelablePromise<SendAlertResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/integration/v1/pusher/sendAlert/{message}',
            path: {
                message: data.message
            }
        });
    }
    
}

export class NameRecordControllerService {
    /**
     * @param data The data for the request.
     * @param data.nameRecord
     * @returns Response OK
     * @throws ApiError
     */
    public static createNameRecords(data: CreateNameRecordsData): CancelablePromise<CreateNameRecordsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/integration/v1/name-record/create',
            query: {
                nameRecord: data.nameRecord
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.attachProtocol
     * @param data.nameRecord
     * @returns Response OK
     * @throws ApiError
     */
    public static buildAndGetPortalUrl(data: BuildAndGetPortalUrlData): CancelablePromise<BuildAndGetPortalUrlResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/integration/v1/name-record/portal/url',
            query: {
                nameRecord: data.nameRecord,
                attachProtocol: data.attachProtocol
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.nameRecord
     * @returns Response OK
     * @throws ApiError
     */
    public static isNameRecordPresent(data: IsNameRecordPresentData): CancelablePromise<IsNameRecordPresentResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/integration/v1/name-record/check',
            query: {
                nameRecord: data.nameRecord
            }
        });
    }
    
}

export class EmailControllerService {
    /**
     * @param data The data for the request.
     * @param data.category
     * @param data.userUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static sendInvitationEmail(data: SendInvitationEmailData): CancelablePromise<SendInvitationEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/integration/v1/email/invite/{category}/{userUuid}',
            path: {
                category: data.category,
                userUuid: data.userUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static forgotPasswordRequest1(data: ForgotPasswordRequest1Data): CancelablePromise<ForgotPasswordRequest1Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/integration/v1/email/forgot-password-request',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class AwsControllerService {
    /**
     * @param data The data for the request.
     * @param data.objectRequestCategory
     * @param data.referenceType
     * @param data.providerGroupUuid
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateMultipart(data: UpdateMultipartData): CancelablePromise<UpdateMultipartResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/integration/v1/aws/upload/multipart',
            query: {
                objectRequestCategory: data.objectRequestCategory,
                referenceType: data.referenceType,
                providerGroupUuid: data.providerGroupUuid
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Response OK
     * @throws ApiError
     */
    public static updateMultipartBase64(data: UpdateMultipartBase64Data): CancelablePromise<UpdateMultipartBase64Response> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/integration/v1/aws/upload/multipart/base64',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.key
     * @returns Response OK
     * @throws ApiError
     */
    public static getFile(data: GetFileData): CancelablePromise<GetFileResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/integration/v1/aws/auth/pre-signed-url',
            query: {
                key: data.key
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.key
     * @returns Response OK
     * @throws ApiError
     */
    public static getFile1(data: GetFile1Data): CancelablePromise<GetFile1Response> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/integration/v1/aws/pre-signed-url',
            query: {
                key: data.key
            }
        });
    }
    
}