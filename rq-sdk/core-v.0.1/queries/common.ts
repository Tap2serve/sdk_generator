// generated with @7nohe/openapi-react-query-codegen@1.4.1 

import { UseQueryResult } from "@tanstack/react-query";
import { ActivityTimeLogControllerService, AdminUserControllerService, AuthenticationControllerService, AwsControllerService, BillingControllerService, DeviceControllerService, DocumentControllerService, EmailControllerService, EnrollmentControllerService, GlobalNoteControllerService, IcdCodeControllerService, ImportControllerService, InsuranceControllerService, LabResultControllerService, MonitoringServiceControllerService, NameRecordControllerService, NotificationControllerService, NotificationEntityControllerService, NotificationProviderControllerService, PasswordGeneratorControllerService, PatientAllergyControllerService, PatientConditionControllerService, PatientControllerService, PatientInteractionControllerService, PatientMedicationControllerService, PatientSymptomControllerService, ProviderControllerService, ProviderGroupControllerService, PusherControllerService, RedirectDeviceControllerService, RedirectImportControllerService, RedirectPatientControllerService, RedirectProviderControllerService, SpecialityControllerService, TemplateControllerService, TimeLogControllerService, TwilioConversationControllerService, TwilioSmsControllerService, WorkListControllerService } from "../requests/services.gen";
export type WorkListControllerServiceGetWeekWiseInteractionDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getWeekWiseInteraction>>;
export type WorkListControllerServiceGetWeekWiseInteractionQueryResult<TData = WorkListControllerServiceGetWeekWiseInteractionDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetWeekWiseInteractionKey = "WorkListControllerServiceGetWeekWiseInteraction";
export const UseWorkListControllerServiceGetWeekWiseInteractionKeyFn = ({ careName, dob, enrollmentServiceType, fullName, interactionWeek, page, size, sort }: {
  careName?: string;
  dob?: string;
  enrollmentServiceType: "RPM" | "RTM" | "CCM";
  fullName?: string;
  interactionWeek: "WEEK1" | "WEEK2" | "WEEK3" | "WEEK4";
  page?: number;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetWeekWiseInteractionKey, ...(queryKey ?? [{ careName, dob, enrollmentServiceType, fullName, interactionWeek, page, size, sort }])];
export type WorkListControllerServiceGetByVitalsDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getByVitals>>;
export type WorkListControllerServiceGetByVitalsQueryResult<TData = WorkListControllerServiceGetByVitalsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetByVitalsKey = "WorkListControllerServiceGetByVitals";
export const UseWorkListControllerServiceGetByVitalsKeyFn = ({ endDate, page, patientUserUuid, size, sort, startDate, vital }: {
  endDate?: string;
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
  startDate?: string;
  vital: "BLOOD_PRESSURE" | "BLOOD_PRESSURE_SYSTOLIC" | "BLOOD_PRESSURE_DIASTOLIC" | "BLOOD_GLUCOSE" | "HEART_RATE" | "BODY_TEMPERATURE" | "RESPIRATION_RATE" | "WEIGHT" | "OXYGEN_SATURATION" | "PULSE_RATE" | "BODY_MASS_INDEX" | "RESPIRATORY_VOLUME" | "HEIGHT" | "FORCED_EXPIRATORY_VOLUME" | "PEAK_EXPIRATORY" | "PERFUSION_INDEX" | "STEPS" | "PAINSCALE";
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetByVitalsKey, ...(queryKey ?? [{ endDate, page, patientUserUuid, size, sort, startDate, vital }])];
export type WorkListControllerServiceProgressBarPatient360DefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.progressBarPatient360>>;
export type WorkListControllerServiceProgressBarPatient360QueryResult<TData = WorkListControllerServiceProgressBarPatient360DefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceProgressBarPatient360Key = "WorkListControllerServiceProgressBarPatient360";
export const UseWorkListControllerServiceProgressBarPatient360KeyFn = ({ endDate, enrollmentServiceType, patientUserUuid, startDate }: {
  endDate: string;
  enrollmentServiceType: "RPM" | "RTM" | "CCM";
  patientUserUuid: string;
  startDate: string;
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceProgressBarPatient360Key, ...(queryKey ?? [{ endDate, enrollmentServiceType, patientUserUuid, startDate }])];
export type WorkListControllerServiceGetOfReadingDataMonotoringDataDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getOfReadingDataMonotoringData>>;
export type WorkListControllerServiceGetOfReadingDataMonotoringDataQueryResult<TData = WorkListControllerServiceGetOfReadingDataMonotoringDataDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetOfReadingDataMonotoringDataKey = "WorkListControllerServiceGetOfReadingDataMonotoringData";
export const UseWorkListControllerServiceGetOfReadingDataMonotoringDataKeyFn = ({ enrollmentServiceType, isAlert, page, patientUserUuid, size, sort }: {
  enrollmentServiceType: "RPM" | "RTM" | "CCM";
  isAlert: boolean;
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetOfReadingDataMonotoringDataKey, ...(queryKey ?? [{ enrollmentServiceType, isAlert, page, patientUserUuid, size, sort }])];
export type WorkListControllerServiceGetNoDataMonitoringDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getNoDataMonitoring>>;
export type WorkListControllerServiceGetNoDataMonitoringQueryResult<TData = WorkListControllerServiceGetNoDataMonitoringDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetNoDataMonitoringKey = "WorkListControllerServiceGetNoDataMonitoring";
export const UseWorkListControllerServiceGetNoDataMonitoringKeyFn = ({ careName, dob, enrollmentServiceType, fullName, page, size, sort }: {
  careName?: string;
  dob?: string;
  enrollmentServiceType: "RPM" | "RTM" | "CCM";
  fullName?: string;
  page?: number;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetNoDataMonitoringKey, ...(queryKey ?? [{ careName, dob, enrollmentServiceType, fullName, page, size, sort }])];
export type WorkListControllerServiceGetNewPatientDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getNewPatient>>;
export type WorkListControllerServiceGetNewPatientQueryResult<TData = WorkListControllerServiceGetNewPatientDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetNewPatientKey = "WorkListControllerServiceGetNewPatient";
export const UseWorkListControllerServiceGetNewPatientKeyFn = ({ dob, enrollmentServiceType, fullName, page, size, sort }: {
  dob?: string;
  enrollmentServiceType: "RPM" | "RTM" | "CCM";
  fullName?: string;
  page?: number;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetNewPatientKey, ...(queryKey ?? [{ dob, enrollmentServiceType, fullName, page, size, sort }])];
export type WorkListControllerServiceGetMonitoringDataByIdDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getMonitoringDataById>>;
export type WorkListControllerServiceGetMonitoringDataByIdQueryResult<TData = WorkListControllerServiceGetMonitoringDataByIdDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetMonitoringDataByIdKey = "WorkListControllerServiceGetMonitoringDataById";
export const UseWorkListControllerServiceGetMonitoringDataByIdKeyFn = ({ id }: {
  id: number;
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetMonitoringDataByIdKey, ...(queryKey ?? [{ id }])];
export type WorkListControllerServiceGetVitalsDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getVitals>>;
export type WorkListControllerServiceGetVitalsQueryResult<TData = WorkListControllerServiceGetVitalsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetVitalsKey = "WorkListControllerServiceGetVitals";
export const UseWorkListControllerServiceGetVitalsKeyFn = ({ endDate, page, patientUserUuid, size, sort, startDate, timeZone, unit, vitals }: {
  endDate?: string;
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
  startDate?: string;
  timeZone: string;
  unit?: "MMHG" | "FAHRENHEIT" | "BPM" | "KG_PER_M2" | "PERCENTAGE" | "METERS" | "LBS" | "ML" | "L_PER_MIN" | "LITERS" | "DEGREE_CELSIUS" | "KILOGRAMS";
  vitals?: "BLOOD_PRESSURE" | "BLOOD_PRESSURE_SYSTOLIC" | "BLOOD_PRESSURE_DIASTOLIC" | "BLOOD_GLUCOSE" | "HEART_RATE" | "BODY_TEMPERATURE" | "RESPIRATION_RATE" | "WEIGHT" | "OXYGEN_SATURATION" | "PULSE_RATE" | "BODY_MASS_INDEX" | "RESPIRATORY_VOLUME" | "HEIGHT" | "FORCED_EXPIRATORY_VOLUME" | "PEAK_EXPIRATORY" | "PERFUSION_INDEX" | "STEPS" | "PAINSCALE";
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetVitalsKey, ...(queryKey ?? [{ endDate, page, patientUserUuid, size, sort, startDate, timeZone, unit, vitals }])];
export type WorkListControllerServiceGetReviewedNoteDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getReviewedNote>>;
export type WorkListControllerServiceGetReviewedNoteQueryResult<TData = WorkListControllerServiceGetReviewedNoteDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetReviewedNoteKey = "WorkListControllerServiceGetReviewedNote";
export const UseWorkListControllerServiceGetReviewedNoteKeyFn = ({ page, patientUserUuid, size, sort }: {
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetReviewedNoteKey, ...(queryKey ?? [{ page, patientUserUuid, size, sort }])];
export type WorkListControllerServiceGetResolvedNoteDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getResolvedNote>>;
export type WorkListControllerServiceGetResolvedNoteQueryResult<TData = WorkListControllerServiceGetResolvedNoteDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetResolvedNoteKey = "WorkListControllerServiceGetResolvedNote";
export const UseWorkListControllerServiceGetResolvedNoteKeyFn = ({ page, patientUserUuid, size, sort }: {
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetResolvedNoteKey, ...(queryKey ?? [{ page, patientUserUuid, size, sort }])];
export type WorkListControllerServiceGetLatestVitalsDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getLatestVitals>>;
export type WorkListControllerServiceGetLatestVitalsQueryResult<TData = WorkListControllerServiceGetLatestVitalsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetLatestVitalsKey = "WorkListControllerServiceGetLatestVitals";
export const UseWorkListControllerServiceGetLatestVitalsKeyFn = ({ page, patientUserUuid, size, sort, timeZone }: {
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
  timeZone: string;
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetLatestVitalsKey, ...(queryKey ?? [{ page, patientUserUuid, size, sort, timeZone }])];
export type WorkListControllerServiceGetEscalateDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getEscalate>>;
export type WorkListControllerServiceGetEscalateQueryResult<TData = WorkListControllerServiceGetEscalateDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetEscalateKey = "WorkListControllerServiceGetEscalate";
export const UseWorkListControllerServiceGetEscalateKeyFn = ({ endDate, escalateStatus, page, search, size, sort, startDate }: {
  endDate?: string;
  escalateStatus?: "CLOSED" | "OPEN";
  page?: number;
  search?: string;
  size?: number;
  sort?: string[];
  startDate?: string;
} = {}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetEscalateKey, ...(queryKey ?? [{ endDate, escalateStatus, page, search, size, sort, startDate }])];
export type WorkListControllerServiceGetEscalate1DefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getEscalate1>>;
export type WorkListControllerServiceGetEscalate1QueryResult<TData = WorkListControllerServiceGetEscalate1DefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetEscalate1Key = "WorkListControllerServiceGetEscalate1";
export const UseWorkListControllerServiceGetEscalate1KeyFn = ({ endDate, escalateStatus, page, patientUserUuid, search, size, sort, startDate }: {
  endDate?: string;
  escalateStatus?: "CLOSED" | "OPEN";
  page?: number;
  patientUserUuid: string;
  search?: string;
  size?: number;
  sort?: string[];
  startDate?: string;
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetEscalate1Key, ...(queryKey ?? [{ endDate, escalateStatus, page, patientUserUuid, search, size, sort, startDate }])];
export type WorkListControllerServiceGetDistinctVitalRecordsDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getDistinctVitalRecords>>;
export type WorkListControllerServiceGetDistinctVitalRecordsQueryResult<TData = WorkListControllerServiceGetDistinctVitalRecordsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetDistinctVitalRecordsKey = "WorkListControllerServiceGetDistinctVitalRecords";
export const UseWorkListControllerServiceGetDistinctVitalRecordsKeyFn = ({ page, patientUserUuid, size, sort }: {
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetDistinctVitalRecordsKey, ...(queryKey ?? [{ page, patientUserUuid, size, sort }])];
export type WorkListControllerServiceMedicalHistoryAlertDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.medicalHistoryAlert>>;
export type WorkListControllerServiceMedicalHistoryAlertQueryResult<TData = WorkListControllerServiceMedicalHistoryAlertDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceMedicalHistoryAlertKey = "WorkListControllerServiceMedicalHistoryAlert";
export const UseWorkListControllerServiceMedicalHistoryAlertKeyFn = ({ endDate, page, patientUserUuid, search, size, sort, startDate }: {
  endDate?: string;
  page?: number;
  patientUserUuid: string;
  search?: string;
  size?: number;
  sort?: string[];
  startDate?: string;
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceMedicalHistoryAlertKey, ...(queryKey ?? [{ endDate, page, patientUserUuid, search, size, sort, startDate }])];
export type WorkListControllerServiceGetAlertConfigDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getAlertConfig>>;
export type WorkListControllerServiceGetAlertConfigQueryResult<TData = WorkListControllerServiceGetAlertConfigDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetAlertConfigKey = "WorkListControllerServiceGetAlertConfig";
export const UseWorkListControllerServiceGetAlertConfigKeyFn = ({ enrollmentServiceType, patientUserUuid, vital }: {
  enrollmentServiceType: "RPM" | "RTM" | "CCM";
  patientUserUuid: string;
  vital: "BLOOD_PRESSURE" | "BLOOD_PRESSURE_SYSTOLIC" | "BLOOD_PRESSURE_DIASTOLIC" | "BLOOD_GLUCOSE" | "HEART_RATE" | "BODY_TEMPERATURE" | "RESPIRATION_RATE" | "WEIGHT" | "OXYGEN_SATURATION" | "PULSE_RATE" | "BODY_MASS_INDEX" | "RESPIRATORY_VOLUME" | "HEIGHT" | "FORCED_EXPIRATORY_VOLUME" | "PEAK_EXPIRATORY" | "PERFUSION_INDEX" | "STEPS" | "PAINSCALE";
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetAlertConfigKey, ...(queryKey ?? [{ enrollmentServiceType, patientUserUuid, vital }])];
export type WorkListControllerServiceGetEscalationDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getEscalation>>;
export type WorkListControllerServiceGetEscalationQueryResult<TData = WorkListControllerServiceGetEscalationDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetEscalationKey = "WorkListControllerServiceGetEscalation";
export const UseWorkListControllerServiceGetEscalationKeyFn = ({ id }: {
  id: number;
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetEscalationKey, ...(queryKey ?? [{ id }])];
export type WorkListControllerServiceGetDataMonitoringDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getDataMonitoring>>;
export type WorkListControllerServiceGetDataMonitoringQueryResult<TData = WorkListControllerServiceGetDataMonitoringDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetDataMonitoringKey = "WorkListControllerServiceGetDataMonitoring";
export const UseWorkListControllerServiceGetDataMonitoringKeyFn = ({ careName, dob, enrollmentServiceType, fullName, page, size, sort }: {
  careName?: string;
  dob?: string;
  enrollmentServiceType: "RPM" | "RTM" | "CCM";
  fullName?: string;
  page?: number;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetDataMonitoringKey, ...(queryKey ?? [{ careName, dob, enrollmentServiceType, fullName, page, size, sort }])];
export type WorkListControllerServiceGetCountInMonitoringSectionDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getCountInMonitoringSection>>;
export type WorkListControllerServiceGetCountInMonitoringSectionQueryResult<TData = WorkListControllerServiceGetCountInMonitoringSectionDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetCountInMonitoringSectionKey = "WorkListControllerServiceGetCountInMonitoringSection";
export const UseWorkListControllerServiceGetCountInMonitoringSectionKeyFn = ({ enrollmentServiceType }: {
  enrollmentServiceType?: "RPM" | "RTM" | "CCM";
} = {}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetCountInMonitoringSectionKey, ...(queryKey ?? [{ enrollmentServiceType }])];
export type WorkListControllerServiceGetCountInInteractionSectionDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getCountInInteractionSection>>;
export type WorkListControllerServiceGetCountInInteractionSectionQueryResult<TData = WorkListControllerServiceGetCountInInteractionSectionDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetCountInInteractionSectionKey = "WorkListControllerServiceGetCountInInteractionSection";
export const UseWorkListControllerServiceGetCountInInteractionSectionKeyFn = (queryKey?: Array<unknown>) => [useWorkListControllerServiceGetCountInInteractionSectionKey, ...(queryKey ?? [])];
export type WorkListControllerServiceGetCountInEnrollmentSectionDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getCountInEnrollmentSection>>;
export type WorkListControllerServiceGetCountInEnrollmentSectionQueryResult<TData = WorkListControllerServiceGetCountInEnrollmentSectionDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetCountInEnrollmentSectionKey = "WorkListControllerServiceGetCountInEnrollmentSection";
export const UseWorkListControllerServiceGetCountInEnrollmentSectionKeyFn = (queryKey?: Array<unknown>) => [useWorkListControllerServiceGetCountInEnrollmentSectionKey, ...(queryKey ?? [])];
export type WorkListControllerServiceGetClosedEnrollmentDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getClosedEnrollment>>;
export type WorkListControllerServiceGetClosedEnrollmentQueryResult<TData = WorkListControllerServiceGetClosedEnrollmentDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetClosedEnrollmentKey = "WorkListControllerServiceGetClosedEnrollment";
export const UseWorkListControllerServiceGetClosedEnrollmentKeyFn = ({ careName, dob, enrollmentServiceType, fullName, page, size, sort }: {
  careName?: string;
  dob?: string;
  enrollmentServiceType: "RPM" | "RTM" | "CCM";
  fullName?: string;
  page?: number;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetClosedEnrollmentKey, ...(queryKey ?? [{ careName, dob, enrollmentServiceType, fullName, page, size, sort }])];
export type WorkListControllerServiceGetAllMonitoringDataDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getAllMonitoringData>>;
export type WorkListControllerServiceGetAllMonitoringDataQueryResult<TData = WorkListControllerServiceGetAllMonitoringDataDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetAllMonitoringDataKey = "WorkListControllerServiceGetAllMonitoringData";
export const UseWorkListControllerServiceGetAllMonitoringDataKeyFn = ({ endDate, escalateStatus, isAlert, isEscalate, isResolve, myAlert, page, search, size, sort, startDate }: {
  endDate?: string;
  escalateStatus?: "CLOSED" | "OPEN";
  isAlert?: boolean;
  isEscalate?: boolean;
  isResolve?: boolean;
  myAlert?: boolean;
  page?: number;
  search?: string;
  size?: number;
  sort?: string[];
  startDate?: string;
} = {}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetAllMonitoringDataKey, ...(queryKey ?? [{ endDate, escalateStatus, isAlert, isEscalate, isResolve, myAlert, page, search, size, sort, startDate }])];
export type WorkListControllerServiceGetAlertsMonitoringDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getAlertsMonitoring>>;
export type WorkListControllerServiceGetAlertsMonitoringQueryResult<TData = WorkListControllerServiceGetAlertsMonitoringDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetAlertsMonitoringKey = "WorkListControllerServiceGetAlertsMonitoring";
export const UseWorkListControllerServiceGetAlertsMonitoringKeyFn = ({ careName, dob, enrollmentServiceType, fullName, page, size, sort }: {
  careName?: string;
  dob?: string;
  enrollmentServiceType: "RPM" | "RTM" | "CCM";
  fullName?: string;
  page?: number;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetAlertsMonitoringKey, ...(queryKey ?? [{ careName, dob, enrollmentServiceType, fullName, page, size, sort }])];
export type WorkListControllerServiceGetActiveEnrollmentDefaultResponse = Awaited<ReturnType<typeof WorkListControllerService.getActiveEnrollment>>;
export type WorkListControllerServiceGetActiveEnrollmentQueryResult<TData = WorkListControllerServiceGetActiveEnrollmentDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useWorkListControllerServiceGetActiveEnrollmentKey = "WorkListControllerServiceGetActiveEnrollment";
export const UseWorkListControllerServiceGetActiveEnrollmentKeyFn = ({ careName, dob, enrollmentServiceType, fullName, page, size, sort }: {
  careName?: string;
  dob?: string;
  enrollmentServiceType: "RPM" | "RTM" | "CCM";
  fullName?: string;
  page?: number;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useWorkListControllerServiceGetActiveEnrollmentKey, ...(queryKey ?? [{ careName, dob, enrollmentServiceType, fullName, page, size, sort }])];
export type TemplateControllerServiceGetTemplateByIdDefaultResponse = Awaited<ReturnType<typeof TemplateControllerService.getTemplateById>>;
export type TemplateControllerServiceGetTemplateByIdQueryResult<TData = TemplateControllerServiceGetTemplateByIdDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useTemplateControllerServiceGetTemplateByIdKey = "TemplateControllerServiceGetTemplateById";
export const UseTemplateControllerServiceGetTemplateByIdKeyFn = ({ id }: {
  id: number;
}, queryKey?: Array<unknown>) => [useTemplateControllerServiceGetTemplateByIdKey, ...(queryKey ?? [{ id }])];
export type TemplateControllerServiceGetAllDefaultResponse = Awaited<ReturnType<typeof TemplateControllerService.getAll>>;
export type TemplateControllerServiceGetAllQueryResult<TData = TemplateControllerServiceGetAllDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useTemplateControllerServiceGetAllKey = "TemplateControllerServiceGetAll";
export const UseTemplateControllerServiceGetAllKeyFn = ({ page, searchString, size, sort }: {
  page?: number;
  searchString?: string;
  size?: number;
  sort?: string[];
} = {}, queryKey?: Array<unknown>) => [useTemplateControllerServiceGetAllKey, ...(queryKey ?? [{ page, searchString, size, sort }])];
export type RedirectProviderControllerServiceGetProviderDefaultResponse = Awaited<ReturnType<typeof RedirectProviderControllerService.getProvider>>;
export type RedirectProviderControllerServiceGetProviderQueryResult<TData = RedirectProviderControllerServiceGetProviderDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useRedirectProviderControllerServiceGetProviderKey = "RedirectProviderControllerServiceGetProvider";
export const UseRedirectProviderControllerServiceGetProviderKeyFn = ({ providerGroupUuid, providerUuid }: {
  providerGroupUuid: string;
  providerUuid: string;
}, queryKey?: Array<unknown>) => [useRedirectProviderControllerServiceGetProviderKey, ...(queryKey ?? [{ providerGroupUuid, providerUuid }])];
export type RedirectProviderControllerServiceGetAllProvider1DefaultResponse = Awaited<ReturnType<typeof RedirectProviderControllerService.getAllProvider1>>;
export type RedirectProviderControllerServiceGetAllProvider1QueryResult<TData = RedirectProviderControllerServiceGetAllProvider1DefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useRedirectProviderControllerServiceGetAllProvider1Key = "RedirectProviderControllerServiceGetAllProvider1";
export const UseRedirectProviderControllerServiceGetAllProvider1KeyFn = ({ exclude, page, providerGroupUuid, searchBy, size, sort, status }: {
  exclude?: boolean;
  page?: number;
  providerGroupUuid: string;
  searchBy?: string;
  size?: number;
  sort?: string[];
  status?: boolean;
}, queryKey?: Array<unknown>) => [useRedirectProviderControllerServiceGetAllProvider1Key, ...(queryKey ?? [{ exclude, page, providerGroupUuid, searchBy, size, sort, status }])];
export type RedirectDeviceControllerServiceFetchDeviceDefaultResponse = Awaited<ReturnType<typeof RedirectDeviceControllerService.fetchDevice>>;
export type RedirectDeviceControllerServiceFetchDeviceQueryResult<TData = RedirectDeviceControllerServiceFetchDeviceDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useRedirectDeviceControllerServiceFetchDeviceKey = "RedirectDeviceControllerServiceFetchDevice";
export const UseRedirectDeviceControllerServiceFetchDeviceKeyFn = ({ providerGroupUuid, uuid }: {
  providerGroupUuid: string;
  uuid: string;
}, queryKey?: Array<unknown>) => [useRedirectDeviceControllerServiceFetchDeviceKey, ...(queryKey ?? [{ providerGroupUuid, uuid }])];
export type RedirectDeviceControllerServiceFetchDevicesDefaultResponse = Awaited<ReturnType<typeof RedirectDeviceControllerService.fetchDevices>>;
export type RedirectDeviceControllerServiceFetchDevicesQueryResult<TData = RedirectDeviceControllerServiceFetchDevicesDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useRedirectDeviceControllerServiceFetchDevicesKey = "RedirectDeviceControllerServiceFetchDevices";
export const UseRedirectDeviceControllerServiceFetchDevicesKeyFn = ({ page, providerGroupUuid, searchString, size, sort, status }: {
  page?: number;
  providerGroupUuid: string;
  searchString?: string;
  size?: number;
  sort?: string[];
  status?: boolean;
}, queryKey?: Array<unknown>) => [useRedirectDeviceControllerServiceFetchDevicesKey, ...(queryKey ?? [{ page, providerGroupUuid, searchString, size, sort, status }])];
export type ProviderControllerServiceGetProvider1DefaultResponse = Awaited<ReturnType<typeof ProviderControllerService.getProvider1>>;
export type ProviderControllerServiceGetProvider1QueryResult<TData = ProviderControllerServiceGetProvider1DefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useProviderControllerServiceGetProvider1Key = "ProviderControllerServiceGetProvider1";
export const UseProviderControllerServiceGetProvider1KeyFn = ({ providerUuid }: {
  providerUuid: string;
}, queryKey?: Array<unknown>) => [useProviderControllerServiceGetProvider1Key, ...(queryKey ?? [{ providerUuid }])];
export type ProviderControllerServiceGetProvider2DefaultResponse = Awaited<ReturnType<typeof ProviderControllerService.getProvider2>>;
export type ProviderControllerServiceGetProvider2QueryResult<TData = ProviderControllerServiceGetProvider2DefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useProviderControllerServiceGetProvider2Key = "ProviderControllerServiceGetProvider2";
export const UseProviderControllerServiceGetProvider2KeyFn = (queryKey?: Array<unknown>) => [useProviderControllerServiceGetProvider2Key, ...(queryKey ?? [])];
export type ProviderControllerServiceGetCareManagersDefaultResponse = Awaited<ReturnType<typeof ProviderControllerService.getCareManagers>>;
export type ProviderControllerServiceGetCareManagersQueryResult<TData = ProviderControllerServiceGetCareManagersDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useProviderControllerServiceGetCareManagersKey = "ProviderControllerServiceGetCareManagers";
export const UseProviderControllerServiceGetCareManagersKeyFn = ({ page, patientUserUuid, size, sort }: {
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useProviderControllerServiceGetCareManagersKey, ...(queryKey ?? [{ page, patientUserUuid, size, sort }])];
export type ProviderControllerServiceGetProvidersByPatientUuidDefaultResponse = Awaited<ReturnType<typeof ProviderControllerService.getProvidersByPatientUuid>>;
export type ProviderControllerServiceGetProvidersByPatientUuidQueryResult<TData = ProviderControllerServiceGetProvidersByPatientUuidDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useProviderControllerServiceGetProvidersByPatientUuidKey = "ProviderControllerServiceGetProvidersByPatientUuid";
export const UseProviderControllerServiceGetProvidersByPatientUuidKeyFn = ({ page, patientUserUuid, size, sort }: {
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useProviderControllerServiceGetProvidersByPatientUuidKey, ...(queryKey ?? [{ page, patientUserUuid, size, sort }])];
export type ProviderControllerServiceGetProviderByUuidDefaultResponse = Awaited<ReturnType<typeof ProviderControllerService.getProviderByUuid>>;
export type ProviderControllerServiceGetProviderByUuidQueryResult<TData = ProviderControllerServiceGetProviderByUuidDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useProviderControllerServiceGetProviderByUuidKey = "ProviderControllerServiceGetProviderByUuid";
export const UseProviderControllerServiceGetProviderByUuidKeyFn = ({ providerUserUuid }: {
  providerUserUuid: string;
}, queryKey?: Array<unknown>) => [useProviderControllerServiceGetProviderByUuidKey, ...(queryKey ?? [{ providerUserUuid }])];
export type ProviderControllerServiceGetAllProvider3DefaultResponse = Awaited<ReturnType<typeof ProviderControllerService.getAllProvider3>>;
export type ProviderControllerServiceGetAllProvider3QueryResult<TData = ProviderControllerServiceGetAllProvider3DefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useProviderControllerServiceGetAllProvider3Key = "ProviderControllerServiceGetAllProvider3";
export const UseProviderControllerServiceGetAllProvider3KeyFn = ({ exclude, page, role, searchBy, size, sort, status }: {
  exclude?: boolean;
  page?: number;
  role?: string;
  searchBy?: string;
  size?: number;
  sort?: string[];
  status?: boolean;
} = {}, queryKey?: Array<unknown>) => [useProviderControllerServiceGetAllProvider3Key, ...(queryKey ?? [{ exclude, page, role, searchBy, size, sort, status }])];
export type ProviderGroupControllerServiceGetProviderGroupDefaultResponse = Awaited<ReturnType<typeof ProviderGroupControllerService.getProviderGroup>>;
export type ProviderGroupControllerServiceGetProviderGroupQueryResult<TData = ProviderGroupControllerServiceGetProviderGroupDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useProviderGroupControllerServiceGetProviderGroupKey = "ProviderGroupControllerServiceGetProviderGroup";
export const UseProviderGroupControllerServiceGetProviderGroupKeyFn = ({ uuid }: {
  uuid: string;
}, queryKey?: Array<unknown>) => [useProviderGroupControllerServiceGetProviderGroupKey, ...(queryKey ?? [{ uuid }])];
export type ProviderGroupControllerServiceGetUserCommonDetailsByUsernameDefaultResponse = Awaited<ReturnType<typeof ProviderGroupControllerService.getUserCommonDetailsByUsername>>;
export type ProviderGroupControllerServiceGetUserCommonDetailsByUsernameQueryResult<TData = ProviderGroupControllerServiceGetUserCommonDetailsByUsernameDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useProviderGroupControllerServiceGetUserCommonDetailsByUsernameKey = "ProviderGroupControllerServiceGetUserCommonDetailsByUsername";
export const UseProviderGroupControllerServiceGetUserCommonDetailsByUsernameKeyFn = ({ username }: {
  username: string;
}, queryKey?: Array<unknown>) => [useProviderGroupControllerServiceGetUserCommonDetailsByUsernameKey, ...(queryKey ?? [{ username }])];
export type ProviderGroupControllerServiceGetUserCommonDetailsByUserUuidDefaultResponse = Awaited<ReturnType<typeof ProviderGroupControllerService.getUserCommonDetailsByUserUuid>>;
export type ProviderGroupControllerServiceGetUserCommonDetailsByUserUuidQueryResult<TData = ProviderGroupControllerServiceGetUserCommonDetailsByUserUuidDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useProviderGroupControllerServiceGetUserCommonDetailsByUserUuidKey = "ProviderGroupControllerServiceGetUserCommonDetailsByUserUuid";
export const UseProviderGroupControllerServiceGetUserCommonDetailsByUserUuidKeyFn = ({ userUuid }: {
  userUuid: string;
}, queryKey?: Array<unknown>) => [useProviderGroupControllerServiceGetUserCommonDetailsByUserUuidKey, ...(queryKey ?? [{ userUuid }])];
export type ProviderGroupControllerServiceGetProviderGroupDetailsByTenantGroupDefaultResponse = Awaited<ReturnType<typeof ProviderGroupControllerService.getProviderGroupDetailsByTenantGroup>>;
export type ProviderGroupControllerServiceGetProviderGroupDetailsByTenantGroupQueryResult<TData = ProviderGroupControllerServiceGetProviderGroupDetailsByTenantGroupDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useProviderGroupControllerServiceGetProviderGroupDetailsByTenantGroupKey = "ProviderGroupControllerServiceGetProviderGroupDetailsByTenantGroup";
export const UseProviderGroupControllerServiceGetProviderGroupDetailsByTenantGroupKeyFn = ({ tenantGroup }: {
  tenantGroup: string;
}, queryKey?: Array<unknown>) => [useProviderGroupControllerServiceGetProviderGroupDetailsByTenantGroupKey, ...(queryKey ?? [{ tenantGroup }])];
export type ProviderGroupControllerServiceGetAllProviderGroupsDefaultResponse = Awaited<ReturnType<typeof ProviderGroupControllerService.getAllProviderGroups>>;
export type ProviderGroupControllerServiceGetAllProviderGroupsQueryResult<TData = ProviderGroupControllerServiceGetAllProviderGroupsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useProviderGroupControllerServiceGetAllProviderGroupsKey = "ProviderGroupControllerServiceGetAllProviderGroups";
export const UseProviderGroupControllerServiceGetAllProviderGroupsKeyFn = ({ active, page, searchString, size, sort, state }: {
  active?: boolean;
  page?: number;
  searchString?: string;
  size?: number;
  sort?: string[];
  state?: string;
} = {}, queryKey?: Array<unknown>) => [useProviderGroupControllerServiceGetAllProviderGroupsKey, ...(queryKey ?? [{ active, page, searchString, size, sort, state }])];
export type PatientControllerServiceGetPatientByUuidDefaultResponse = Awaited<ReturnType<typeof PatientControllerService.getPatientByUuid>>;
export type PatientControllerServiceGetPatientByUuidQueryResult<TData = PatientControllerServiceGetPatientByUuidDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientControllerServiceGetPatientByUuidKey = "PatientControllerServiceGetPatientByUuid";
export const UsePatientControllerServiceGetPatientByUuidKeyFn = ({ uuid }: {
  uuid: string;
}, queryKey?: Array<unknown>) => [usePatientControllerServiceGetPatientByUuidKey, ...(queryKey ?? [{ uuid }])];
export type PatientControllerServiceSearchPatientProviderDefaultResponse = Awaited<ReturnType<typeof PatientControllerService.searchPatientProvider>>;
export type PatientControllerServiceSearchPatientProviderQueryResult<TData = PatientControllerServiceSearchPatientProviderDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientControllerServiceSearchPatientProviderKey = "PatientControllerServiceSearchPatientProvider";
export const UsePatientControllerServiceSearchPatientProviderKeyFn = ({ page, search, size, sort }: {
  page?: number;
  search?: string;
  size?: number;
  sort?: string[];
} = {}, queryKey?: Array<unknown>) => [usePatientControllerServiceSearchPatientProviderKey, ...(queryKey ?? [{ page, search, size, sort }])];
export type PatientControllerServiceGetProfileDefaultResponse = Awaited<ReturnType<typeof PatientControllerService.getProfile>>;
export type PatientControllerServiceGetProfileQueryResult<TData = PatientControllerServiceGetProfileDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientControllerServiceGetProfileKey = "PatientControllerServiceGetProfile";
export const UsePatientControllerServiceGetProfileKeyFn = ({ mobileType }: {
  mobileType?: "IOS" | "ANDROID";
} = {}, queryKey?: Array<unknown>) => [usePatientControllerServiceGetProfileKey, ...(queryKey ?? [{ mobileType }])];
export type PatientControllerServiceGetAvatarDefaultResponse = Awaited<ReturnType<typeof PatientControllerService.getAvatar>>;
export type PatientControllerServiceGetAvatarQueryResult<TData = PatientControllerServiceGetAvatarDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientControllerServiceGetAvatarKey = "PatientControllerServiceGetAvatar";
export const UsePatientControllerServiceGetAvatarKeyFn = ({ patientUserUuid }: {
  patientUserUuid: string;
}, queryKey?: Array<unknown>) => [usePatientControllerServiceGetAvatarKey, ...(queryKey ?? [{ patientUserUuid }])];
export type PatientControllerServiceGetSmsWithProviderEntityDefaultResponse = Awaited<ReturnType<typeof PatientControllerService.getSmsWithProviderEntity>>;
export type PatientControllerServiceGetSmsWithProviderEntityQueryResult<TData = PatientControllerServiceGetSmsWithProviderEntityDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientControllerServiceGetSmsWithProviderEntityKey = "PatientControllerServiceGetSmsWithProviderEntity";
export const UsePatientControllerServiceGetSmsWithProviderEntityKeyFn = ({ activity, page, searchString, size, sort }: {
  activity: "ENROLLMENT" | "NEW_READING_ADDED" | "ALERT_GENERATE" | "ALERT_RESOLVED" | "APP_MESSAGE" | "SMS_MESSAGE" | "RECEIVED_NOTIFICATION" | "TIME_LOGGED" | "VITALS_REVIEWED" | "NOTE_ADDED" | "ESCALATE" | "VITALS_CONFIG_UPDATE";
  page?: number;
  searchString?: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [usePatientControllerServiceGetSmsWithProviderEntityKey, ...(queryKey ?? [{ activity, page, searchString, size, sort }])];
export type PatientControllerServiceGetErrorForFileDefaultResponse = Awaited<ReturnType<typeof PatientControllerService.getErrorForFile>>;
export type PatientControllerServiceGetErrorForFileQueryResult<TData = PatientControllerServiceGetErrorForFileDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientControllerServiceGetErrorForFileKey = "PatientControllerServiceGetErrorForFile";
export const UsePatientControllerServiceGetErrorForFileKeyFn = ({ key }: {
  key: string;
}, queryKey?: Array<unknown>) => [usePatientControllerServiceGetErrorForFileKey, ...(queryKey ?? [{ key }])];
export type PatientControllerServiceGetFamilyMembersDefaultResponse = Awaited<ReturnType<typeof PatientControllerService.getFamilyMembers>>;
export type PatientControllerServiceGetFamilyMembersQueryResult<TData = PatientControllerServiceGetFamilyMembersDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientControllerServiceGetFamilyMembersKey = "PatientControllerServiceGetFamilyMembers";
export const UsePatientControllerServiceGetFamilyMembersKeyFn = ({ page, patientUserUuid, size, sort }: {
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [usePatientControllerServiceGetFamilyMembersKey, ...(queryKey ?? [{ page, patientUserUuid, size, sort }])];
export type PatientControllerServiceGetAllPatientDefaultResponse = Awaited<ReturnType<typeof PatientControllerService.getAllPatient>>;
export type PatientControllerServiceGetAllPatientQueryResult<TData = PatientControllerServiceGetAllPatientDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientControllerServiceGetAllPatientKey = "PatientControllerServiceGetAllPatient";
export const UsePatientControllerServiceGetAllPatientKeyFn = ({ page, searchBy, size, sort, status }: {
  page?: number;
  searchBy?: string;
  size?: number;
  sort?: string[];
  status?: boolean;
} = {}, queryKey?: Array<unknown>) => [usePatientControllerServiceGetAllPatientKey, ...(queryKey ?? [{ page, searchBy, size, sort, status }])];
export type PatientControllerServiceGetAllCareTeamDefaultResponse = Awaited<ReturnType<typeof PatientControllerService.getAllCareTeam>>;
export type PatientControllerServiceGetAllCareTeamQueryResult<TData = PatientControllerServiceGetAllCareTeamDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientControllerServiceGetAllCareTeamKey = "PatientControllerServiceGetAllCareTeam";
export const UsePatientControllerServiceGetAllCareTeamKeyFn = ({ page, searchBy, serviceType, size, sort, userUuid }: {
  page?: number;
  searchBy?: string;
  serviceType?: string;
  size?: number;
  sort?: string[];
  userUuid: string;
}, queryKey?: Array<unknown>) => [usePatientControllerServiceGetAllCareTeamKey, ...(queryKey ?? [{ page, searchBy, serviceType, size, sort, userUuid }])];
export type PatientControllerServiceGetManagersDefaultResponse = Awaited<ReturnType<typeof PatientControllerService.getManagers>>;
export type PatientControllerServiceGetManagersQueryResult<TData = PatientControllerServiceGetManagersDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientControllerServiceGetManagersKey = "PatientControllerServiceGetManagers";
export const UsePatientControllerServiceGetManagersKeyFn = ({ page, patientUserUuid, size, sort }: {
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [usePatientControllerServiceGetManagersKey, ...(queryKey ?? [{ page, patientUserUuid, size, sort }])];
export type PatientSymptomControllerServiceGetAllByPatientDefaultResponse = Awaited<ReturnType<typeof PatientSymptomControllerService.getAllByPatient>>;
export type PatientSymptomControllerServiceGetAllByPatientQueryResult<TData = PatientSymptomControllerServiceGetAllByPatientDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientSymptomControllerServiceGetAllByPatientKey = "PatientSymptomControllerServiceGetAllByPatient";
export const UsePatientSymptomControllerServiceGetAllByPatientKeyFn = ({ userUuid }: {
  userUuid: string;
}, queryKey?: Array<unknown>) => [usePatientSymptomControllerServiceGetAllByPatientKey, ...(queryKey ?? [{ userUuid }])];
export type PatientMedicationControllerServiceChangeStatusDefaultResponse = Awaited<ReturnType<typeof PatientMedicationControllerService.changeStatus>>;
export type PatientMedicationControllerServiceChangeStatusQueryResult<TData = PatientMedicationControllerServiceChangeStatusDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientMedicationControllerServiceChangeStatusKey = "PatientMedicationControllerServiceChangeStatus";
export const UsePatientMedicationControllerServiceChangeStatusKeyFn = (queryKey?: Array<unknown>) => [usePatientMedicationControllerServiceChangeStatusKey, ...(queryKey ?? [])];
export type PatientMedicationControllerServiceGetAllMedicationsByPatientDefaultResponse = Awaited<ReturnType<typeof PatientMedicationControllerService.getAllMedicationsByPatient>>;
export type PatientMedicationControllerServiceGetAllMedicationsByPatientQueryResult<TData = PatientMedicationControllerServiceGetAllMedicationsByPatientDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientMedicationControllerServiceGetAllMedicationsByPatientKey = "PatientMedicationControllerServiceGetAllMedicationsByPatient";
export const UsePatientMedicationControllerServiceGetAllMedicationsByPatientKeyFn = ({ page, searchBy, size, sort, userUuid }: {
  page?: number;
  searchBy?: string;
  size?: number;
  sort?: string[];
  userUuid: string;
}, queryKey?: Array<unknown>) => [usePatientMedicationControllerServiceGetAllMedicationsByPatientKey, ...(queryKey ?? [{ page, searchBy, size, sort, userUuid }])];
export type PatientMedicationControllerServiceGetMedicationsByPatientDefaultResponse = Awaited<ReturnType<typeof PatientMedicationControllerService.getMedicationsByPatient>>;
export type PatientMedicationControllerServiceGetMedicationsByPatientQueryResult<TData = PatientMedicationControllerServiceGetMedicationsByPatientDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientMedicationControllerServiceGetMedicationsByPatientKey = "PatientMedicationControllerServiceGetMedicationsByPatient";
export const UsePatientMedicationControllerServiceGetMedicationsByPatientKeyFn = ({ page, searchString, size, sort, status, userUuid }: {
  page?: number;
  searchString?: string;
  size?: number;
  sort?: string[];
  status?: string;
  userUuid: string;
}, queryKey?: Array<unknown>) => [usePatientMedicationControllerServiceGetMedicationsByPatientKey, ...(queryKey ?? [{ page, searchString, size, sort, status, userUuid }])];
export type PatientMedicationControllerServiceGetAllMedicationsDefaultResponse = Awaited<ReturnType<typeof PatientMedicationControllerService.getAllMedications>>;
export type PatientMedicationControllerServiceGetAllMedicationsQueryResult<TData = PatientMedicationControllerServiceGetAllMedicationsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientMedicationControllerServiceGetAllMedicationsKey = "PatientMedicationControllerServiceGetAllMedications";
export const UsePatientMedicationControllerServiceGetAllMedicationsKeyFn = ({ page, searchBy, size, sort }: {
  page?: number;
  searchBy?: string;
  size?: number;
  sort?: string[];
} = {}, queryKey?: Array<unknown>) => [usePatientMedicationControllerServiceGetAllMedicationsKey, ...(queryKey ?? [{ page, searchBy, size, sort }])];
export type PatientConditionControllerServiceGetAllPatientConditionsDefaultResponse = Awaited<ReturnType<typeof PatientConditionControllerService.getAllPatientConditions>>;
export type PatientConditionControllerServiceGetAllPatientConditionsQueryResult<TData = PatientConditionControllerServiceGetAllPatientConditionsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientConditionControllerServiceGetAllPatientConditionsKey = "PatientConditionControllerServiceGetAllPatientConditions";
export const UsePatientConditionControllerServiceGetAllPatientConditionsKeyFn = ({ page, searchString, serviceType, size, sort, userUuid }: {
  page?: number;
  searchString?: string;
  serviceType?: "RPM" | "RTM" | "CCM";
  size?: number;
  sort?: string[];
  userUuid: string;
}, queryKey?: Array<unknown>) => [usePatientConditionControllerServiceGetAllPatientConditionsKey, ...(queryKey ?? [{ page, searchString, serviceType, size, sort, userUuid }])];
export type PatientAllergyControllerServiceGetAllAllergyDefaultResponse = Awaited<ReturnType<typeof PatientAllergyControllerService.getAllAllergy>>;
export type PatientAllergyControllerServiceGetAllAllergyQueryResult<TData = PatientAllergyControllerServiceGetAllAllergyDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePatientAllergyControllerServiceGetAllAllergyKey = "PatientAllergyControllerServiceGetAllAllergy";
export const UsePatientAllergyControllerServiceGetAllAllergyKeyFn = ({ page, searchString, size, sort, userUuid }: {
  page?: number;
  searchString?: string;
  size?: number;
  sort?: string[];
  userUuid: string;
}, queryKey?: Array<unknown>) => [usePatientAllergyControllerServiceGetAllAllergyKey, ...(queryKey ?? [{ page, searchString, size, sort, userUuid }])];
export type NotificationEntityControllerServiceGetAllNotificationsDefaultResponse = Awaited<ReturnType<typeof NotificationEntityControllerService.getAllNotifications>>;
export type NotificationEntityControllerServiceGetAllNotificationsQueryResult<TData = NotificationEntityControllerServiceGetAllNotificationsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useNotificationEntityControllerServiceGetAllNotificationsKey = "NotificationEntityControllerServiceGetAllNotifications";
export const UseNotificationEntityControllerServiceGetAllNotificationsKeyFn = ({ page, size, sort, type }: {
  page?: number;
  size?: number;
  sort?: string[];
  type?: string;
} = {}, queryKey?: Array<unknown>) => [useNotificationEntityControllerServiceGetAllNotificationsKey, ...(queryKey ?? [{ page, size, sort, type }])];
export type NotificationEntityControllerServiceGetCountNotificationDefaultResponse = Awaited<ReturnType<typeof NotificationEntityControllerService.getCountNotification>>;
export type NotificationEntityControllerServiceGetCountNotificationQueryResult<TData = NotificationEntityControllerServiceGetCountNotificationDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useNotificationEntityControllerServiceGetCountNotificationKey = "NotificationEntityControllerServiceGetCountNotification";
export const UseNotificationEntityControllerServiceGetCountNotificationKeyFn = (queryKey?: Array<unknown>) => [useNotificationEntityControllerServiceGetCountNotificationKey, ...(queryKey ?? [])];
export type NotificationControllerServiceGetAllNotificationDefaultResponse = Awaited<ReturnType<typeof NotificationControllerService.getAllNotification>>;
export type NotificationControllerServiceGetAllNotificationQueryResult<TData = NotificationControllerServiceGetAllNotificationDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useNotificationControllerServiceGetAllNotificationKey = "NotificationControllerServiceGetAllNotification";
export const UseNotificationControllerServiceGetAllNotificationKeyFn = ({ search }: {
  search?: string;
} = {}, queryKey?: Array<unknown>) => [useNotificationControllerServiceGetAllNotificationKey, ...(queryKey ?? [{ search }])];
export type NotificationProviderControllerServiceGetAllNotifications1DefaultResponse = Awaited<ReturnType<typeof NotificationProviderControllerService.getAllNotifications1>>;
export type NotificationProviderControllerServiceGetAllNotifications1QueryResult<TData = NotificationProviderControllerServiceGetAllNotifications1DefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useNotificationProviderControllerServiceGetAllNotifications1Key = "NotificationProviderControllerServiceGetAllNotifications1";
export const UseNotificationProviderControllerServiceGetAllNotifications1KeyFn = ({ page, size, sort, type }: {
  page?: number;
  size?: number;
  sort?: string[];
  type?: string;
} = {}, queryKey?: Array<unknown>) => [useNotificationProviderControllerServiceGetAllNotifications1Key, ...(queryKey ?? [{ page, size, sort, type }])];
export type NotificationProviderControllerServiceGetCountNotification1DefaultResponse = Awaited<ReturnType<typeof NotificationProviderControllerService.getCountNotification1>>;
export type NotificationProviderControllerServiceGetCountNotification1QueryResult<TData = NotificationProviderControllerServiceGetCountNotification1DefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useNotificationProviderControllerServiceGetCountNotification1Key = "NotificationProviderControllerServiceGetCountNotification1";
export const UseNotificationProviderControllerServiceGetCountNotification1KeyFn = (queryKey?: Array<unknown>) => [useNotificationProviderControllerServiceGetCountNotification1Key, ...(queryKey ?? [])];
export type LabResultControllerServiceGetByIdDefaultResponse = Awaited<ReturnType<typeof LabResultControllerService.getById>>;
export type LabResultControllerServiceGetByIdQueryResult<TData = LabResultControllerServiceGetByIdDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useLabResultControllerServiceGetByIdKey = "LabResultControllerServiceGetById";
export const UseLabResultControllerServiceGetByIdKeyFn = ({ id }: {
  id: number;
}, queryKey?: Array<unknown>) => [useLabResultControllerServiceGetByIdKey, ...(queryKey ?? [{ id }])];
export type LabResultControllerServiceGetAllPatientLabResultDefaultResponse = Awaited<ReturnType<typeof LabResultControllerService.getAllPatientLabResult>>;
export type LabResultControllerServiceGetAllPatientLabResultQueryResult<TData = LabResultControllerServiceGetAllPatientLabResultDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useLabResultControllerServiceGetAllPatientLabResultKey = "LabResultControllerServiceGetAllPatientLabResult";
export const UseLabResultControllerServiceGetAllPatientLabResultKeyFn = ({ page, searchString, size, sort, userUuid }: {
  page?: number;
  searchString?: string;
  size?: number;
  sort?: string[];
  userUuid: string;
}, queryKey?: Array<unknown>) => [useLabResultControllerServiceGetAllPatientLabResultKey, ...(queryKey ?? [{ page, searchString, size, sort, userUuid }])];
export type InsuranceControllerServiceGetAllInsuranceMobileDefaultResponse = Awaited<ReturnType<typeof InsuranceControllerService.getAllInsuranceMobile>>;
export type InsuranceControllerServiceGetAllInsuranceMobileQueryResult<TData = InsuranceControllerServiceGetAllInsuranceMobileDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useInsuranceControllerServiceGetAllInsuranceMobileKey = "InsuranceControllerServiceGetAllInsuranceMobile";
export const UseInsuranceControllerServiceGetAllInsuranceMobileKeyFn = ({ page, patientUserUuid, size, sort }: {
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useInsuranceControllerServiceGetAllInsuranceMobileKey, ...(queryKey ?? [{ page, patientUserUuid, size, sort }])];
export type IcdCodeControllerServiceGetIcdCodeByIdDefaultResponse = Awaited<ReturnType<typeof IcdCodeControllerService.getIcdCodeById>>;
export type IcdCodeControllerServiceGetIcdCodeByIdQueryResult<TData = IcdCodeControllerServiceGetIcdCodeByIdDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useIcdCodeControllerServiceGetIcdCodeByIdKey = "IcdCodeControllerServiceGetIcdCodeById";
export const UseIcdCodeControllerServiceGetIcdCodeByIdKeyFn = ({ id }: {
  id: number;
}, queryKey?: Array<unknown>) => [useIcdCodeControllerServiceGetIcdCodeByIdKey, ...(queryKey ?? [{ id }])];
export type IcdCodeControllerServiceGetAll1DefaultResponse = Awaited<ReturnType<typeof IcdCodeControllerService.getAll1>>;
export type IcdCodeControllerServiceGetAll1QueryResult<TData = IcdCodeControllerServiceGetAll1DefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useIcdCodeControllerServiceGetAll1Key = "IcdCodeControllerServiceGetAll1";
export const UseIcdCodeControllerServiceGetAll1KeyFn = ({ isFavorite, page, searchString, size, sort }: {
  isFavorite?: boolean;
  page?: number;
  searchString?: string;
  size?: number;
  sort?: string[];
} = {}, queryKey?: Array<unknown>) => [useIcdCodeControllerServiceGetAll1Key, ...(queryKey ?? [{ isFavorite, page, searchString, size, sort }])];
export type EnrollmentControllerServiceGetVitalsOfPatientDefaultResponse = Awaited<ReturnType<typeof EnrollmentControllerService.getVitalsOfPatient>>;
export type EnrollmentControllerServiceGetVitalsOfPatientQueryResult<TData = EnrollmentControllerServiceGetVitalsOfPatientDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useEnrollmentControllerServiceGetVitalsOfPatientKey = "EnrollmentControllerServiceGetVitalsOfPatient";
export const UseEnrollmentControllerServiceGetVitalsOfPatientKeyFn = ({ patientUserUuid }: {
  patientUserUuid: string;
}, queryKey?: Array<unknown>) => [useEnrollmentControllerServiceGetVitalsOfPatientKey, ...(queryKey ?? [{ patientUserUuid }])];
export type EnrollmentControllerServiceGetEnrollmentByIdDefaultResponse = Awaited<ReturnType<typeof EnrollmentControllerService.getEnrollmentById>>;
export type EnrollmentControllerServiceGetEnrollmentByIdQueryResult<TData = EnrollmentControllerServiceGetEnrollmentByIdDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useEnrollmentControllerServiceGetEnrollmentByIdKey = "EnrollmentControllerServiceGetEnrollmentById";
export const UseEnrollmentControllerServiceGetEnrollmentByIdKeyFn = ({ uuid }: {
  uuid: string;
}, queryKey?: Array<unknown>) => [useEnrollmentControllerServiceGetEnrollmentByIdKey, ...(queryKey ?? [{ uuid }])];
export type EnrollmentControllerServiceGetEnrollmentOfPatientDefaultResponse = Awaited<ReturnType<typeof EnrollmentControllerService.getEnrollmentOfPatient>>;
export type EnrollmentControllerServiceGetEnrollmentOfPatientQueryResult<TData = EnrollmentControllerServiceGetEnrollmentOfPatientDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useEnrollmentControllerServiceGetEnrollmentOfPatientKey = "EnrollmentControllerServiceGetEnrollmentOfPatient";
export const UseEnrollmentControllerServiceGetEnrollmentOfPatientKeyFn = ({ page, patientUserUuid, size, sort }: {
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useEnrollmentControllerServiceGetEnrollmentOfPatientKey, ...(queryKey ?? [{ page, patientUserUuid, size, sort }])];
export type EnrollmentControllerServiceGetAllEnrollmentDefaultResponse = Awaited<ReturnType<typeof EnrollmentControllerService.getAllEnrollment>>;
export type EnrollmentControllerServiceGetAllEnrollmentQueryResult<TData = EnrollmentControllerServiceGetAllEnrollmentDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useEnrollmentControllerServiceGetAllEnrollmentKey = "EnrollmentControllerServiceGetAllEnrollment";
export const UseEnrollmentControllerServiceGetAllEnrollmentKeyFn = ({ endDate, enrollmentServiceType, enrollmentStatusType, page, size, sort, startDate }: {
  endDate?: string;
  enrollmentServiceType?: "RPM" | "RTM" | "CCM";
  enrollmentStatusType?: "CLOSED" | "NEW" | "ACTIVE";
  page?: number;
  size?: number;
  sort?: string[];
  startDate?: string;
} = {}, queryKey?: Array<unknown>) => [useEnrollmentControllerServiceGetAllEnrollmentKey, ...(queryKey ?? [{ endDate, enrollmentServiceType, enrollmentStatusType, page, size, sort, startDate }])];
export type DocumentControllerServiceGetSignatureDefaultResponse = Awaited<ReturnType<typeof DocumentControllerService.getSignature>>;
export type DocumentControllerServiceGetSignatureQueryResult<TData = DocumentControllerServiceGetSignatureDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useDocumentControllerServiceGetSignatureKey = "DocumentControllerServiceGetSignature";
export const UseDocumentControllerServiceGetSignatureKeyFn = ({ documentUuid, patientUserUuid }: {
  documentUuid: string;
  patientUserUuid: string;
}, queryKey?: Array<unknown>) => [useDocumentControllerServiceGetSignatureKey, ...(queryKey ?? [{ documentUuid, patientUserUuid }])];
export type DocumentControllerServiceGetSignedDocumentsDefaultResponse = Awaited<ReturnType<typeof DocumentControllerService.getSignedDocuments>>;
export type DocumentControllerServiceGetSignedDocumentsQueryResult<TData = DocumentControllerServiceGetSignedDocumentsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useDocumentControllerServiceGetSignedDocumentsKey = "DocumentControllerServiceGetSignedDocuments";
export const UseDocumentControllerServiceGetSignedDocumentsKeyFn = ({ page, patientUserUuid, size, sort }: {
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useDocumentControllerServiceGetSignedDocumentsKey, ...(queryKey ?? [{ page, patientUserUuid, size, sort }])];
export type DocumentControllerServiceGetPatientMappedDocumentsDefaultResponse = Awaited<ReturnType<typeof DocumentControllerService.getPatientMappedDocuments>>;
export type DocumentControllerServiceGetPatientMappedDocumentsQueryResult<TData = DocumentControllerServiceGetPatientMappedDocumentsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useDocumentControllerServiceGetPatientMappedDocumentsKey = "DocumentControllerServiceGetPatientMappedDocuments";
export const UseDocumentControllerServiceGetPatientMappedDocumentsKeyFn = ({ archive, documentType, page, patientUserUuid, searchString, size, sort }: {
  archive?: boolean;
  documentType?: ("CONSENT" | "EDUCATION" | "CHALLENGES" | "GENERAL" | "REPORT" | "HOME_EXERCISE")[];
  page?: number;
  patientUserUuid: string;
  searchString?: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useDocumentControllerServiceGetPatientMappedDocumentsKey, ...(queryKey ?? [{ archive, documentType, page, patientUserUuid, searchString, size, sort }])];
export type DocumentControllerServiceGetDocumentsDefaultResponse = Awaited<ReturnType<typeof DocumentControllerService.getDocuments>>;
export type DocumentControllerServiceGetDocumentsQueryResult<TData = DocumentControllerServiceGetDocumentsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useDocumentControllerServiceGetDocumentsKey = "DocumentControllerServiceGetDocuments";
export const UseDocumentControllerServiceGetDocumentsKeyFn = ({ archive, documentType, page, searchString, size, sort }: {
  archive?: boolean;
  documentType?: ("CONSENT" | "EDUCATION" | "CHALLENGES" | "GENERAL" | "REPORT" | "HOME_EXERCISE")[];
  page?: number;
  searchString?: string;
  size?: number;
  sort?: string[];
} = {}, queryKey?: Array<unknown>) => [useDocumentControllerServiceGetDocumentsKey, ...(queryKey ?? [{ archive, documentType, page, searchString, size, sort }])];
export type DeviceControllerServiceFetchDeviceByPatientDefaultResponse = Awaited<ReturnType<typeof DeviceControllerService.fetchDeviceByPatient>>;
export type DeviceControllerServiceFetchDeviceByPatientQueryResult<TData = DeviceControllerServiceFetchDeviceByPatientDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useDeviceControllerServiceFetchDeviceByPatientKey = "DeviceControllerServiceFetchDeviceByPatient";
export const UseDeviceControllerServiceFetchDeviceByPatientKeyFn = ({ page, patientUserUuid, search, size, sort }: {
  page?: number;
  patientUserUuid: string;
  search?: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useDeviceControllerServiceFetchDeviceByPatientKey, ...(queryKey ?? [{ page, patientUserUuid, search, size, sort }])];
export type DeviceControllerServiceFetchDevice1DefaultResponse = Awaited<ReturnType<typeof DeviceControllerService.fetchDevice1>>;
export type DeviceControllerServiceFetchDevice1QueryResult<TData = DeviceControllerServiceFetchDevice1DefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useDeviceControllerServiceFetchDevice1Key = "DeviceControllerServiceFetchDevice1";
export const UseDeviceControllerServiceFetchDevice1KeyFn = ({ uuid }: {
  uuid: string;
}, queryKey?: Array<unknown>) => [useDeviceControllerServiceFetchDevice1Key, ...(queryKey ?? [{ uuid }])];
export type DeviceControllerServiceFetchDevices1DefaultResponse = Awaited<ReturnType<typeof DeviceControllerService.fetchDevices1>>;
export type DeviceControllerServiceFetchDevices1QueryResult<TData = DeviceControllerServiceFetchDevices1DefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useDeviceControllerServiceFetchDevices1Key = "DeviceControllerServiceFetchDevices1";
export const UseDeviceControllerServiceFetchDevices1KeyFn = ({ page, searchString, size, sort, status }: {
  page?: number;
  searchString?: string;
  size?: number;
  sort?: string[];
  status?: boolean;
} = {}, queryKey?: Array<unknown>) => [useDeviceControllerServiceFetchDevices1Key, ...(queryKey ?? [{ page, searchString, size, sort, status }])];
export type DeviceControllerServiceFetchAllDevicesNameDefaultResponse = Awaited<ReturnType<typeof DeviceControllerService.fetchAllDevicesName>>;
export type DeviceControllerServiceFetchAllDevicesNameQueryResult<TData = DeviceControllerServiceFetchAllDevicesNameDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useDeviceControllerServiceFetchAllDevicesNameKey = "DeviceControllerServiceFetchAllDevicesName";
export const UseDeviceControllerServiceFetchAllDevicesNameKeyFn = ({ page, size, sort }: {
  page?: number;
  size?: number;
  sort?: string[];
} = {}, queryKey?: Array<unknown>) => [useDeviceControllerServiceFetchAllDevicesNameKey, ...(queryKey ?? [{ page, size, sort }])];
export type AdminUserControllerServiceGetProfile1DefaultResponse = Awaited<ReturnType<typeof AdminUserControllerService.getProfile1>>;
export type AdminUserControllerServiceGetProfile1QueryResult<TData = AdminUserControllerServiceGetProfile1DefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useAdminUserControllerServiceGetProfile1Key = "AdminUserControllerServiceGetProfile1";
export const UseAdminUserControllerServiceGetProfile1KeyFn = ({ userUuid }: {
  userUuid?: string;
} = {}, queryKey?: Array<unknown>) => [useAdminUserControllerServiceGetProfile1Key, ...(queryKey ?? [{ userUuid }])];
export type AdminUserControllerServiceGetUsersDefaultResponse = Awaited<ReturnType<typeof AdminUserControllerService.getUsers>>;
export type AdminUserControllerServiceGetUsersQueryResult<TData = AdminUserControllerServiceGetUsersDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useAdminUserControllerServiceGetUsersKey = "AdminUserControllerServiceGetUsers";
export const UseAdminUserControllerServiceGetUsersKeyFn = ({ active, exclude, page, searchBy, size, sort, sortBy, sortDirection }: {
  active?: boolean;
  exclude?: boolean;
  page?: number;
  searchBy?: string;
  size?: number;
  sort?: string[];
  sortBy?: string;
  sortDirection?: "ASC" | "DESC";
} = {}, queryKey?: Array<unknown>) => [useAdminUserControllerServiceGetUsersKey, ...(queryKey ?? [{ active, exclude, page, searchBy, size, sort, sortBy, sortDirection }])];
export type TimeLogControllerServiceGetTimeLogByPatientUserUuidAndEnrollmentServiceTypeDefaultResponse = Awaited<ReturnType<typeof TimeLogControllerService.getTimeLogByPatientUserUuidAndEnrollmentServiceType>>;
export type TimeLogControllerServiceGetTimeLogByPatientUserUuidAndEnrollmentServiceTypeQueryResult<TData = TimeLogControllerServiceGetTimeLogByPatientUserUuidAndEnrollmentServiceTypeDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useTimeLogControllerServiceGetTimeLogByPatientUserUuidAndEnrollmentServiceTypeKey = "TimeLogControllerServiceGetTimeLogByPatientUserUuidAndEnrollmentServiceType";
export const UseTimeLogControllerServiceGetTimeLogByPatientUserUuidAndEnrollmentServiceTypeKeyFn = ({ enrollmentServiceType, patientUserUuid, specificMonth }: {
  enrollmentServiceType: "RPM" | "RTM" | "CCM";
  patientUserUuid: string;
  specificMonth?: string;
}, queryKey?: Array<unknown>) => [useTimeLogControllerServiceGetTimeLogByPatientUserUuidAndEnrollmentServiceTypeKey, ...(queryKey ?? [{ enrollmentServiceType, patientUserUuid, specificMonth }])];
export type TimeLogControllerServiceGetMonthWiseTimeLogDefaultResponse = Awaited<ReturnType<typeof TimeLogControllerService.getMonthWiseTimeLog>>;
export type TimeLogControllerServiceGetMonthWiseTimeLogQueryResult<TData = TimeLogControllerServiceGetMonthWiseTimeLogDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useTimeLogControllerServiceGetMonthWiseTimeLogKey = "TimeLogControllerServiceGetMonthWiseTimeLog";
export const UseTimeLogControllerServiceGetMonthWiseTimeLogKeyFn = ({ enrollmentServiceType, page, patientUserUuid, size, sort }: {
  enrollmentServiceType: "RPM" | "RTM" | "CCM";
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useTimeLogControllerServiceGetMonthWiseTimeLogKey, ...(queryKey ?? [{ enrollmentServiceType, page, patientUserUuid, size, sort }])];
export type TimeLogControllerServiceGetManualEntriesDefaultResponse = Awaited<ReturnType<typeof TimeLogControllerService.getManualEntries>>;
export type TimeLogControllerServiceGetManualEntriesQueryResult<TData = TimeLogControllerServiceGetManualEntriesDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useTimeLogControllerServiceGetManualEntriesKey = "TimeLogControllerServiceGetManualEntries";
export const UseTimeLogControllerServiceGetManualEntriesKeyFn = ({ enrollmentServiceType, page, patientUserUuid, size, sort }: {
  enrollmentServiceType: "RPM" | "RTM" | "CCM";
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useTimeLogControllerServiceGetManualEntriesKey, ...(queryKey ?? [{ enrollmentServiceType, page, patientUserUuid, size, sort }])];
export type TimeLogControllerServiceGetTimeLineDefaultResponse = Awaited<ReturnType<typeof TimeLogControllerService.getTimeLine>>;
export type TimeLogControllerServiceGetTimeLineQueryResult<TData = TimeLogControllerServiceGetTimeLineDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useTimeLogControllerServiceGetTimeLineKey = "TimeLogControllerServiceGetTimeLine";
export const UseTimeLogControllerServiceGetTimeLineKeyFn = ({ activity, endDate, enrollmentServiceType, page, patientUserUuid, size, sort, startDate, timeZone }: {
  activity?: ("ENROLLMENT" | "NEW_READING_ADDED" | "ALERT_GENERATE" | "ALERT_RESOLVED" | "APP_MESSAGE" | "SMS_MESSAGE" | "RECEIVED_NOTIFICATION" | "TIME_LOGGED" | "VITALS_REVIEWED" | "NOTE_ADDED" | "ESCALATE" | "VITALS_CONFIG_UPDATE")[];
  endDate?: string;
  enrollmentServiceType: "RPM" | "RTM" | "CCM";
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
  startDate?: string;
  timeZone: string;
}, queryKey?: Array<unknown>) => [useTimeLogControllerServiceGetTimeLineKey, ...(queryKey ?? [{ activity, endDate, enrollmentServiceType, page, patientUserUuid, size, sort, startDate, timeZone }])];
export type RedirectImportControllerServiceGetPatientAuditFilesDefaultResponse = Awaited<ReturnType<typeof RedirectImportControllerService.getPatientAuditFiles>>;
export type RedirectImportControllerServiceGetPatientAuditFilesQueryResult<TData = RedirectImportControllerServiceGetPatientAuditFilesDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useRedirectImportControllerServiceGetPatientAuditFilesKey = "RedirectImportControllerServiceGetPatientAuditFiles";
export const UseRedirectImportControllerServiceGetPatientAuditFilesKeyFn = ({ file, page, providerGroupUuid, searchString, size, sort, status }: {
  file?: string;
  page?: number;
  providerGroupUuid: string;
  searchString?: string;
  size?: number;
  sort?: string[];
  status?: "IN_PROGRESS" | "COMPLETED_WITH_ERROR" | "COMPLETED" | "FAILED";
}, queryKey?: Array<unknown>) => [useRedirectImportControllerServiceGetPatientAuditFilesKey, ...(queryKey ?? [{ file, page, providerGroupUuid, searchString, size, sort, status }])];
export type RedirectImportControllerServiceGetPatientAuditFileRecordsDefaultResponse = Awaited<ReturnType<typeof RedirectImportControllerService.getPatientAuditFileRecords>>;
export type RedirectImportControllerServiceGetPatientAuditFileRecordsQueryResult<TData = RedirectImportControllerServiceGetPatientAuditFileRecordsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useRedirectImportControllerServiceGetPatientAuditFileRecordsKey = "RedirectImportControllerServiceGetPatientAuditFileRecords";
export const UseRedirectImportControllerServiceGetPatientAuditFileRecordsKeyFn = ({ audiFileId, page, providerGroupUuid, searchString, size, sort, status }: {
  audiFileId: number;
  page?: number;
  providerGroupUuid: string;
  searchString?: string;
  size?: number;
  sort?: string[];
  status?: "FAILED" | "SUCCESS";
}, queryKey?: Array<unknown>) => [useRedirectImportControllerServiceGetPatientAuditFileRecordsKey, ...(queryKey ?? [{ audiFileId, page, providerGroupUuid, searchString, size, sort, status }])];
export type ImportControllerServiceGetPatientAuditFiles1DefaultResponse = Awaited<ReturnType<typeof ImportControllerService.getPatientAuditFiles1>>;
export type ImportControllerServiceGetPatientAuditFiles1QueryResult<TData = ImportControllerServiceGetPatientAuditFiles1DefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useImportControllerServiceGetPatientAuditFiles1Key = "ImportControllerServiceGetPatientAuditFiles1";
export const UseImportControllerServiceGetPatientAuditFiles1KeyFn = ({ file, page, searchString, size, sort, status }: {
  file?: string;
  page?: number;
  searchString?: string;
  size?: number;
  sort?: string[];
  status?: "IN_PROGRESS" | "COMPLETED_WITH_ERROR" | "COMPLETED" | "FAILED";
} = {}, queryKey?: Array<unknown>) => [useImportControllerServiceGetPatientAuditFiles1Key, ...(queryKey ?? [{ file, page, searchString, size, sort, status }])];
export type ImportControllerServiceGetPatientAuditFileRecords1DefaultResponse = Awaited<ReturnType<typeof ImportControllerService.getPatientAuditFileRecords1>>;
export type ImportControllerServiceGetPatientAuditFileRecords1QueryResult<TData = ImportControllerServiceGetPatientAuditFileRecords1DefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useImportControllerServiceGetPatientAuditFileRecords1Key = "ImportControllerServiceGetPatientAuditFileRecords1";
export const UseImportControllerServiceGetPatientAuditFileRecords1KeyFn = ({ audiFileId, page, searchString, size, sort, status }: {
  audiFileId: number;
  page?: number;
  searchString?: string;
  size?: number;
  sort?: string[];
  status?: "FAILED" | "SUCCESS";
}, queryKey?: Array<unknown>) => [useImportControllerServiceGetPatientAuditFileRecords1Key, ...(queryKey ?? [{ audiFileId, page, searchString, size, sort, status }])];
export type ImportControllerServiceGetTemplateInCsvDefaultResponse = Awaited<ReturnType<typeof ImportControllerService.getTemplateInCsv>>;
export type ImportControllerServiceGetTemplateInCsvQueryResult<TData = ImportControllerServiceGetTemplateInCsvDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useImportControllerServiceGetTemplateInCsvKey = "ImportControllerServiceGetTemplateInCsv";
export const UseImportControllerServiceGetTemplateInCsvKeyFn = ({ templateType }: {
  templateType: "PATIENT";
}, queryKey?: Array<unknown>) => [useImportControllerServiceGetTemplateInCsvKey, ...(queryKey ?? [{ templateType }])];
export type GlobalNoteControllerServiceGetGlobalNotesByPatientUuidDefaultResponse = Awaited<ReturnType<typeof GlobalNoteControllerService.getGlobalNotesByPatientUuid>>;
export type GlobalNoteControllerServiceGetGlobalNotesByPatientUuidQueryResult<TData = GlobalNoteControllerServiceGetGlobalNotesByPatientUuidDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useGlobalNoteControllerServiceGetGlobalNotesByPatientUuidKey = "GlobalNoteControllerServiceGetGlobalNotesByPatientUuid";
export const UseGlobalNoteControllerServiceGetGlobalNotesByPatientUuidKeyFn = ({ page, patientUserUuid, size, sort }: {
  page?: number;
  patientUserUuid: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useGlobalNoteControllerServiceGetGlobalNotesByPatientUuidKey, ...(queryKey ?? [{ page, patientUserUuid, size, sort }])];
export type BillingControllerServicePatient360AllBillingDefaultResponse = Awaited<ReturnType<typeof BillingControllerService.patient360AllBilling>>;
export type BillingControllerServicePatient360AllBillingQueryResult<TData = BillingControllerServicePatient360AllBillingDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useBillingControllerServicePatient360AllBillingKey = "BillingControllerServicePatient360AllBilling";
export const UseBillingControllerServicePatient360AllBillingKeyFn = ({ localDate, patientUserUuid, service }: {
  localDate: string;
  patientUserUuid: string;
  service: "RPM" | "RTM" | "CCM";
}, queryKey?: Array<unknown>) => [useBillingControllerServicePatient360AllBillingKey, ...(queryKey ?? [{ localDate, patientUserUuid, service }])];
export type BillingControllerServiceGetMonitoringBillingByUuidDefaultResponse = Awaited<ReturnType<typeof BillingControllerService.getMonitoringBillingByUuid>>;
export type BillingControllerServiceGetMonitoringBillingByUuidQueryResult<TData = BillingControllerServiceGetMonitoringBillingByUuidDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useBillingControllerServiceGetMonitoringBillingByUuidKey = "BillingControllerServiceGetMonitoringBillingByUuid";
export const UseBillingControllerServiceGetMonitoringBillingByUuidKeyFn = ({ uuid }: {
  uuid: string;
}, queryKey?: Array<unknown>) => [useBillingControllerServiceGetMonitoringBillingByUuidKey, ...(queryKey ?? [{ uuid }])];
export type BillingControllerServiceGetMonitoringBillingCountDefaultResponse = Awaited<ReturnType<typeof BillingControllerService.getMonitoringBillingCount>>;
export type BillingControllerServiceGetMonitoringBillingCountQueryResult<TData = BillingControllerServiceGetMonitoringBillingCountDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useBillingControllerServiceGetMonitoringBillingCountKey = "BillingControllerServiceGetMonitoringBillingCount";
export const UseBillingControllerServiceGetMonitoringBillingCountKeyFn = ({ localDate }: {
  localDate: string;
}, queryKey?: Array<unknown>) => [useBillingControllerServiceGetMonitoringBillingCountKey, ...(queryKey ?? [{ localDate }])];
export type BillingControllerServiceGetAllBillingForMonitoringDefaultResponse = Awaited<ReturnType<typeof BillingControllerService.getAllBillingForMonitoring>>;
export type BillingControllerServiceGetAllBillingForMonitoringQueryResult<TData = BillingControllerServiceGetAllBillingForMonitoringDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useBillingControllerServiceGetAllBillingForMonitoringKey = "BillingControllerServiceGetAllBillingForMonitoring";
export const UseBillingControllerServiceGetAllBillingForMonitoringKeyFn = ({ claimStatus, localDate, page, patientName, providerName, service, size, sort }: {
  claimStatus?: string;
  localDate: string;
  page?: number;
  patientName?: string;
  providerName?: string;
  service: "RPM" | "RTM" | "CCM";
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useBillingControllerServiceGetAllBillingForMonitoringKey, ...(queryKey ?? [{ claimStatus, localDate, page, patientName, providerName, service, size, sort }])];
export type BillingControllerServiceGetInteractionBillingByUuidDefaultResponse = Awaited<ReturnType<typeof BillingControllerService.getInteractionBillingByUuid>>;
export type BillingControllerServiceGetInteractionBillingByUuidQueryResult<TData = BillingControllerServiceGetInteractionBillingByUuidDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useBillingControllerServiceGetInteractionBillingByUuidKey = "BillingControllerServiceGetInteractionBillingByUuid";
export const UseBillingControllerServiceGetInteractionBillingByUuidKeyFn = ({ localDate, uuid }: {
  localDate: string;
  uuid: string;
}, queryKey?: Array<unknown>) => [useBillingControllerServiceGetInteractionBillingByUuidKey, ...(queryKey ?? [{ localDate, uuid }])];
export type BillingControllerServiceGetInteractionBillingCountDefaultResponse = Awaited<ReturnType<typeof BillingControllerService.getInteractionBillingCount>>;
export type BillingControllerServiceGetInteractionBillingCountQueryResult<TData = BillingControllerServiceGetInteractionBillingCountDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useBillingControllerServiceGetInteractionBillingCountKey = "BillingControllerServiceGetInteractionBillingCount";
export const UseBillingControllerServiceGetInteractionBillingCountKeyFn = ({ localDate }: {
  localDate: string;
}, queryKey?: Array<unknown>) => [useBillingControllerServiceGetInteractionBillingCountKey, ...(queryKey ?? [{ localDate }])];
export type BillingControllerServiceGetAllBillingForInteractionDefaultResponse = Awaited<ReturnType<typeof BillingControllerService.getAllBillingForInteraction>>;
export type BillingControllerServiceGetAllBillingForInteractionQueryResult<TData = BillingControllerServiceGetAllBillingForInteractionDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useBillingControllerServiceGetAllBillingForInteractionKey = "BillingControllerServiceGetAllBillingForInteraction";
export const UseBillingControllerServiceGetAllBillingForInteractionKeyFn = ({ claimStatus, localDate, page, patientName, providerName, service, size, sort }: {
  claimStatus?: string;
  localDate: string;
  page?: number;
  patientName?: string;
  providerName?: string;
  service: "RPM" | "RTM" | "CCM";
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useBillingControllerServiceGetAllBillingForInteractionKey, ...(queryKey ?? [{ claimStatus, localDate, page, patientName, providerName, service, size, sort }])];
export type BillingControllerServiceGetEnrollmentBillingByUuidDefaultResponse = Awaited<ReturnType<typeof BillingControllerService.getEnrollmentBillingByUuid>>;
export type BillingControllerServiceGetEnrollmentBillingByUuidQueryResult<TData = BillingControllerServiceGetEnrollmentBillingByUuidDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useBillingControllerServiceGetEnrollmentBillingByUuidKey = "BillingControllerServiceGetEnrollmentBillingByUuid";
export const UseBillingControllerServiceGetEnrollmentBillingByUuidKeyFn = ({ uuid }: {
  uuid: string;
}, queryKey?: Array<unknown>) => [useBillingControllerServiceGetEnrollmentBillingByUuidKey, ...(queryKey ?? [{ uuid }])];
export type BillingControllerServiceGetEnrollmentBillingCountDefaultResponse = Awaited<ReturnType<typeof BillingControllerService.getEnrollmentBillingCount>>;
export type BillingControllerServiceGetEnrollmentBillingCountQueryResult<TData = BillingControllerServiceGetEnrollmentBillingCountDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useBillingControllerServiceGetEnrollmentBillingCountKey = "BillingControllerServiceGetEnrollmentBillingCount";
export const UseBillingControllerServiceGetEnrollmentBillingCountKeyFn = ({ localDate }: {
  localDate: string;
}, queryKey?: Array<unknown>) => [useBillingControllerServiceGetEnrollmentBillingCountKey, ...(queryKey ?? [{ localDate }])];
export type BillingControllerServiceGetAllBillingForEnrollmentDefaultResponse = Awaited<ReturnType<typeof BillingControllerService.getAllBillingForEnrollment>>;
export type BillingControllerServiceGetAllBillingForEnrollmentQueryResult<TData = BillingControllerServiceGetAllBillingForEnrollmentDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useBillingControllerServiceGetAllBillingForEnrollmentKey = "BillingControllerServiceGetAllBillingForEnrollment";
export const UseBillingControllerServiceGetAllBillingForEnrollmentKeyFn = ({ claimStatus, localDate, page, patientName, providerName, service, size, sort }: {
  claimStatus?: string;
  localDate: string;
  page?: number;
  patientName?: string;
  providerName?: string;
  service: "RPM" | "RTM" | "CCM";
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useBillingControllerServiceGetAllBillingForEnrollmentKey, ...(queryKey ?? [{ claimStatus, localDate, page, patientName, providerName, service, size, sort }])];
export type ActivityTimeLogControllerServiceAllActivityDefaultResponse = Awaited<ReturnType<typeof ActivityTimeLogControllerService.allActivity>>;
export type ActivityTimeLogControllerServiceAllActivityQueryResult<TData = ActivityTimeLogControllerServiceAllActivityDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useActivityTimeLogControllerServiceAllActivityKey = "ActivityTimeLogControllerServiceAllActivity";
export const UseActivityTimeLogControllerServiceAllActivityKeyFn = ({ page, providerUseruuid, size, sort }: {
  page?: number;
  providerUseruuid: string;
  size?: number;
  sort?: string[];
}, queryKey?: Array<unknown>) => [useActivityTimeLogControllerServiceAllActivityKey, ...(queryKey ?? [{ page, providerUseruuid, size, sort }])];
export type SpecialityControllerServiceGetAllSpecialitiesDefaultResponse = Awaited<ReturnType<typeof SpecialityControllerService.getAllSpecialities>>;
export type SpecialityControllerServiceGetAllSpecialitiesQueryResult<TData = SpecialityControllerServiceGetAllSpecialitiesDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useSpecialityControllerServiceGetAllSpecialitiesKey = "SpecialityControllerServiceGetAllSpecialities";
export const UseSpecialityControllerServiceGetAllSpecialitiesKeyFn = ({ page, searchString, size, sort }: {
  page?: number;
  searchString?: string;
  size?: number;
  sort?: string[];
} = {}, queryKey?: Array<unknown>) => [useSpecialityControllerServiceGetAllSpecialitiesKey, ...(queryKey ?? [{ page, searchString, size, sort }])];
export type RedirectPatientControllerServiceGetAllProvider2DefaultResponse = Awaited<ReturnType<typeof RedirectPatientControllerService.getAllProvider2>>;
export type RedirectPatientControllerServiceGetAllProvider2QueryResult<TData = RedirectPatientControllerServiceGetAllProvider2DefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useRedirectPatientControllerServiceGetAllProvider2Key = "RedirectPatientControllerServiceGetAllProvider2";
export const UseRedirectPatientControllerServiceGetAllProvider2KeyFn = ({ page, providerGroupUuid, searchBy, size, sort, status }: {
  page?: number;
  providerGroupUuid: string;
  searchBy?: string;
  size?: number;
  sort?: string[];
  status?: boolean;
}, queryKey?: Array<unknown>) => [useRedirectPatientControllerServiceGetAllProvider2Key, ...(queryKey ?? [{ page, providerGroupUuid, searchBy, size, sort, status }])];
export type PasswordGeneratorControllerServiceGeneratePasswordDefaultResponse = Awaited<ReturnType<typeof PasswordGeneratorControllerService.generatePassword>>;
export type PasswordGeneratorControllerServiceGeneratePasswordQueryResult<TData = PasswordGeneratorControllerServiceGeneratePasswordDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePasswordGeneratorControllerServiceGeneratePasswordKey = "PasswordGeneratorControllerServiceGeneratePassword";
export const UsePasswordGeneratorControllerServiceGeneratePasswordKeyFn = ({ count }: {
  count?: number;
} = {}, queryKey?: Array<unknown>) => [usePasswordGeneratorControllerServiceGeneratePasswordKey, ...(queryKey ?? [{ count }])];
export type TwilioConversationControllerServiceGetAuthTokenDefaultResponse = Awaited<ReturnType<typeof TwilioConversationControllerService.getAuthToken>>;
export type TwilioConversationControllerServiceGetAuthTokenQueryResult<TData = TwilioConversationControllerServiceGetAuthTokenDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useTwilioConversationControllerServiceGetAuthTokenKey = "TwilioConversationControllerServiceGetAuthToken";
export const UseTwilioConversationControllerServiceGetAuthTokenKeyFn = ({ identity }: {
  identity: string;
}, queryKey?: Array<unknown>) => [useTwilioConversationControllerServiceGetAuthTokenKey, ...(queryKey ?? [{ identity }])];
export type NameRecordControllerServiceBuildAndGetPortalUrlDefaultResponse = Awaited<ReturnType<typeof NameRecordControllerService.buildAndGetPortalUrl>>;
export type NameRecordControllerServiceBuildAndGetPortalUrlQueryResult<TData = NameRecordControllerServiceBuildAndGetPortalUrlDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useNameRecordControllerServiceBuildAndGetPortalUrlKey = "NameRecordControllerServiceBuildAndGetPortalUrl";
export const UseNameRecordControllerServiceBuildAndGetPortalUrlKeyFn = ({ attachProtocol, nameRecord }: {
  attachProtocol: boolean;
  nameRecord?: string;
}, queryKey?: Array<unknown>) => [useNameRecordControllerServiceBuildAndGetPortalUrlKey, ...(queryKey ?? [{ attachProtocol, nameRecord }])];
export type NameRecordControllerServiceIsNameRecordPresentDefaultResponse = Awaited<ReturnType<typeof NameRecordControllerService.isNameRecordPresent>>;
export type NameRecordControllerServiceIsNameRecordPresentQueryResult<TData = NameRecordControllerServiceIsNameRecordPresentDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useNameRecordControllerServiceIsNameRecordPresentKey = "NameRecordControllerServiceIsNameRecordPresent";
export const UseNameRecordControllerServiceIsNameRecordPresentKeyFn = ({ nameRecord }: {
  nameRecord: string;
}, queryKey?: Array<unknown>) => [useNameRecordControllerServiceIsNameRecordPresentKey, ...(queryKey ?? [{ nameRecord }])];
export type AwsControllerServiceGetFileDefaultResponse = Awaited<ReturnType<typeof AwsControllerService.getFile>>;
export type AwsControllerServiceGetFileQueryResult<TData = AwsControllerServiceGetFileDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useAwsControllerServiceGetFileKey = "AwsControllerServiceGetFile";
export const UseAwsControllerServiceGetFileKeyFn = ({ key }: {
  key: string;
}, queryKey?: Array<unknown>) => [useAwsControllerServiceGetFileKey, ...(queryKey ?? [{ key }])];
export type AwsControllerServiceGetFile1DefaultResponse = Awaited<ReturnType<typeof AwsControllerService.getFile1>>;
export type AwsControllerServiceGetFile1QueryResult<TData = AwsControllerServiceGetFile1DefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useAwsControllerServiceGetFile1Key = "AwsControllerServiceGetFile1";
export const UseAwsControllerServiceGetFile1KeyFn = ({ key }: {
  key: string;
}, queryKey?: Array<unknown>) => [useAwsControllerServiceGetFile1Key, ...(queryKey ?? [{ key }])];
export type WorkListControllerServiceUpdateReviewedWithStatusForNoDataMutationResult = Awaited<ReturnType<typeof WorkListControllerService.updateReviewedWithStatusForNoData>>;
export type WorkListControllerServiceUpdateReviewedWithStatusForDataMutationResult = Awaited<ReturnType<typeof WorkListControllerService.updateReviewedWithStatusForData>>;
export type WorkListControllerServiceUpdateReviewedWithStatusForAlertMutationResult = Awaited<ReturnType<typeof WorkListControllerService.updateReviewedWithStatusForAlert>>;
export type WorkListControllerServiceUpdateCheckboxesInteractionMutationResult = Awaited<ReturnType<typeof WorkListControllerService.updateCheckboxesInteraction>>;
export type WorkListControllerServiceUpdateAlertConfigMutationResult = Awaited<ReturnType<typeof WorkListControllerService.updateAlertConfig>>;
export type WorkListControllerServiceReviewVitalListMutationResult = Awaited<ReturnType<typeof WorkListControllerService.reviewVitalList>>;
export type WorkListControllerServiceResolveMonitoringAlertsMutationResult = Awaited<ReturnType<typeof WorkListControllerService.resolveMonitoringAlerts>>;
export type WorkListControllerServiceUpdatePatientConsentCheckboxMutationResult = Awaited<ReturnType<typeof WorkListControllerService.updatePatientConsentCheckbox>>;
export type WorkListControllerServiceOnBoardingPatientAddVitalsMutationResult = Awaited<ReturnType<typeof WorkListControllerService.onBoardingPatientAddVitals>>;
export type WorkListControllerServiceAddEscalationMutationResult = Awaited<ReturnType<typeof WorkListControllerService.addEscalation>>;
export type WorkListControllerServiceEscalateMonitoringAlertsMutationResult = Awaited<ReturnType<typeof WorkListControllerService.escalateMonitoringAlerts>>;
export type WorkListControllerServiceAddEscalation1MutationResult = Awaited<ReturnType<typeof WorkListControllerService.addEscalation1>>;
export type WorkListControllerServiceCreateMonitoringRecordMutationResult = Awaited<ReturnType<typeof WorkListControllerService.createMonitoringRecord>>;
export type WorkListControllerServiceAddVitalsMutationResult = Awaited<ReturnType<typeof WorkListControllerService.addVitals>>;
export type TemplateControllerServiceCreateTemplateMutationResult = Awaited<ReturnType<typeof TemplateControllerService.createTemplate>>;
export type RedirectProviderControllerServiceSaveProviderMutationResult = Awaited<ReturnType<typeof RedirectProviderControllerService.saveProvider>>;
export type RedirectProviderControllerServiceResentInviteMutationResult = Awaited<ReturnType<typeof RedirectProviderControllerService.resentInvite>>;
export type RedirectDeviceControllerServiceSaveDeviceMutationResult = Awaited<ReturnType<typeof RedirectDeviceControllerService.saveDevice>>;
export type ProviderControllerServiceSaveProvider1MutationResult = Awaited<ReturnType<typeof ProviderControllerService.saveProvider1>>;
export type ProviderControllerServiceSaveProviderNewMutationResult = Awaited<ReturnType<typeof ProviderControllerService.saveProviderNew>>;
export type ProviderControllerServiceResendInviteMutationResult = Awaited<ReturnType<typeof ProviderControllerService.resendInvite>>;
export type ProviderControllerServiceAddParticipantMutationResult = Awaited<ReturnType<typeof ProviderControllerService.addParticipant>>;
export type ProviderGroupControllerServiceCreateProviderGroupMutationResult = Awaited<ReturnType<typeof ProviderGroupControllerService.createProviderGroup>>;
export type ProviderGroupControllerServiceCreateDefaultDocumentMutationResult = Awaited<ReturnType<typeof ProviderGroupControllerService.createDefaultDocument>>;
export type PatientControllerServiceSetTemporaryPasswordFieldForPatientMutationResult = Awaited<ReturnType<typeof PatientControllerService.setTemporaryPasswordFieldForPatient>>;
export type PatientControllerServiceSendSmsMutationResult = Awaited<ReturnType<typeof PatientControllerService.sendSms>>;
export type PatientControllerServiceSendMessagesMutationResult = Awaited<ReturnType<typeof PatientControllerService.sendMessages>>;
export type PatientControllerServiceSavePatientMutationResult = Awaited<ReturnType<typeof PatientControllerService.savePatient>>;
export type PatientControllerServiceSendMessageProviderMutationResult = Awaited<ReturnType<typeof PatientControllerService.sendMessageProvider>>;
export type PatientControllerServiceAddCareTeamMutationResult = Awaited<ReturnType<typeof PatientControllerService.addCareTeam>>;
export type PatientSymptomControllerServiceAddPatientSymptomMutationResult = Awaited<ReturnType<typeof PatientSymptomControllerService.addPatientSymptom>>;
export type PatientMedicationControllerServiceAddMedicationMutationResult = Awaited<ReturnType<typeof PatientMedicationControllerService.addMedication>>;
export type PatientConditionControllerServiceAddPatientConditionMutationResult = Awaited<ReturnType<typeof PatientConditionControllerService.addPatientCondition>>;
export type PatientAllergyControllerServiceAddPatientAllergyMutationResult = Awaited<ReturnType<typeof PatientAllergyControllerService.addPatientAllergy>>;
export type LabResultControllerServiceCreateLabResultMutationResult = Awaited<ReturnType<typeof LabResultControllerService.createLabResult>>;
export type InsuranceControllerServiceSaveInsurancesMobileMutationResult = Awaited<ReturnType<typeof InsuranceControllerService.saveInsurancesMobile>>;
export type InsuranceControllerServiceAddInsuranceMutationResult = Awaited<ReturnType<typeof InsuranceControllerService.addInsurance>>;
export type IcdCodeControllerServiceCreateIcdCodeMutationResult = Awaited<ReturnType<typeof IcdCodeControllerService.createIcdCode>>;
export type EnrollmentControllerServiceCreateEnrollmentMutationResult = Awaited<ReturnType<typeof EnrollmentControllerService.createEnrollment>>;
export type DocumentControllerServiceCreateSignatureMutationResult = Awaited<ReturnType<typeof DocumentControllerService.createSignature>>;
export type DocumentControllerServiceMapDocumentsToPatientsMutationResult = Awaited<ReturnType<typeof DocumentControllerService.mapDocumentsToPatients>>;
export type DocumentControllerServiceCreateDocumentMutationResult = Awaited<ReturnType<typeof DocumentControllerService.createDocument>>;
export type DeviceControllerServiceSaveDevice1MutationResult = Awaited<ReturnType<typeof DeviceControllerService.saveDevice1>>;
export type AdminUserControllerServiceSaveAdminUserMutationResult = Awaited<ReturnType<typeof AdminUserControllerService.saveAdminUser>>;
export type AdminUserControllerServiceResendInvitationMutationResult = Awaited<ReturnType<typeof AdminUserControllerService.resendInvitation>>;
export type TimeLogControllerServiceSetInteractionForNewMonthMutationResult = Awaited<ReturnType<typeof TimeLogControllerService.setInteractionForNewMonth>>;
export type TimeLogControllerServiceAddTimeLogsMutationResult = Awaited<ReturnType<typeof TimeLogControllerService.addTimeLogs>>;
export type TimeLogControllerServiceAddTimeLogMutationResult = Awaited<ReturnType<typeof TimeLogControllerService.addTimeLog>>;
export type RedirectImportControllerServiceImportsMutationResult = Awaited<ReturnType<typeof RedirectImportControllerService.imports>>;
export type PatientInteractionControllerServiceSetWeekToNewWeekMutationResult = Awaited<ReturnType<typeof PatientInteractionControllerService.setWeekToNewWeek>>;
export type PatientInteractionControllerServiceSetWeek1ForNewMonthMutationResult = Awaited<ReturnType<typeof PatientInteractionControllerService.setWeek1ForNewMonth>>;
export type MonitoringServiceControllerServiceSetDaysMutationResult = Awaited<ReturnType<typeof MonitoringServiceControllerService.setDays>>;
export type ImportControllerServiceImports1MutationResult = Awaited<ReturnType<typeof ImportControllerService.imports1>>;
export type ImportControllerServiceImportsIcdMutationResult = Awaited<ReturnType<typeof ImportControllerService.importsIcd>>;
export type GlobalNoteControllerServiceAddGlobalNoteMutationResult = Awaited<ReturnType<typeof GlobalNoteControllerService.addGlobalNote>>;
export type BillingControllerServiceSetMonitoringForNewMonthMutationResult = Awaited<ReturnType<typeof BillingControllerService.setMonitoringForNewMonth>>;
export type BillingControllerServiceSetInteractionForNewMonth1MutationResult = Awaited<ReturnType<typeof BillingControllerService.setInteractionForNewMonth1>>;
export type BillingControllerServiceSetEnrollmentForNewMonthMutationResult = Awaited<ReturnType<typeof BillingControllerService.setEnrollmentForNewMonth>>;
export type BillingControllerServiceUpdateMonitoringBillingByUuidMutationResult = Awaited<ReturnType<typeof BillingControllerService.updateMonitoringBillingByUuid>>;
export type BillingControllerServiceUpdateInteractionBillingByUuidMutationResult = Awaited<ReturnType<typeof BillingControllerService.updateInteractionBillingByUuid>>;
export type BillingControllerServiceUpdateEnrollmentBillingByUuidMutationResult = Awaited<ReturnType<typeof BillingControllerService.updateEnrollmentBillingByUuid>>;
export type AuthenticationControllerServiceSetPasswordMutationResult = Awaited<ReturnType<typeof AuthenticationControllerService.setPassword>>;
export type AuthenticationControllerServiceSetPasswordCsvPatientMutationResult = Awaited<ReturnType<typeof AuthenticationControllerService.setPasswordCsvPatient>>;
export type AuthenticationControllerServiceGetAccessTokenMutationResult = Awaited<ReturnType<typeof AuthenticationControllerService.getAccessToken>>;
export type AuthenticationControllerServiceForgotPasswordRequestMutationResult = Awaited<ReturnType<typeof AuthenticationControllerService.forgotPasswordRequest>>;
export type AuthenticationControllerServiceCheckUrlEndPointMutationResult = Awaited<ReturnType<typeof AuthenticationControllerService.checkUrlEndPoint>>;
export type AuthenticationControllerServiceUpdatePasswordMutationResult = Awaited<ReturnType<typeof AuthenticationControllerService.updatePassword>>;
export type AuthenticationControllerServiceGetAccessTokenFromRefreshTokenMutationResult = Awaited<ReturnType<typeof AuthenticationControllerService.getAccessTokenFromRefreshToken>>;
export type ActivityTimeLogControllerServiceSaveActivityMutationResult = Awaited<ReturnType<typeof ActivityTimeLogControllerService.saveActivity>>;
export type TwilioSmsControllerServiceSendSms1MutationResult = Awaited<ReturnType<typeof TwilioSmsControllerService.sendSms1>>;
export type TwilioConversationControllerServiceUpdateUserToTwilioMutationResult = Awaited<ReturnType<typeof TwilioConversationControllerService.updateUserToTwilio>>;
export type TwilioConversationControllerServiceSendMessages1MutationResult = Awaited<ReturnType<typeof TwilioConversationControllerService.sendMessages1>>;
export type TwilioConversationControllerServiceRegisterUserToTwilioMutationResult = Awaited<ReturnType<typeof TwilioConversationControllerService.registerUserToTwilio>>;
export type TwilioConversationControllerServiceDeleteCareTeamFromTwilioMutationResult = Awaited<ReturnType<typeof TwilioConversationControllerService.deleteCareTeamFromTwilio>>;
export type TwilioConversationControllerServiceAddUpdateParticipantToTwilioMutationResult = Awaited<ReturnType<typeof TwilioConversationControllerService.addUpdateParticipantToTwilio>>;
export type TwilioConversationControllerServiceAddCareTeamToTwilioMutationResult = Awaited<ReturnType<typeof TwilioConversationControllerService.addCareTeamToTwilio>>;
export type PusherControllerServiceSendAlertMutationResult = Awaited<ReturnType<typeof PusherControllerService.sendAlert>>;
export type NameRecordControllerServiceCreateNameRecordsMutationResult = Awaited<ReturnType<typeof NameRecordControllerService.createNameRecords>>;
export type EmailControllerServiceSendInvitationEmailMutationResult = Awaited<ReturnType<typeof EmailControllerService.sendInvitationEmail>>;
export type EmailControllerServiceForgotPasswordRequest1MutationResult = Awaited<ReturnType<typeof EmailControllerService.forgotPasswordRequest1>>;
export type AwsControllerServiceUpdateMultipartMutationResult = Awaited<ReturnType<typeof AwsControllerService.updateMultipart>>;
export type AwsControllerServiceUpdateMultipartBase64MutationResult = Awaited<ReturnType<typeof AwsControllerService.updateMultipartBase64>>;
export type WorkListControllerServiceUpdateVitalsMutationResult = Awaited<ReturnType<typeof WorkListControllerService.updateVitals>>;
export type WorkListControllerServiceResolveEscalateMutationResult = Awaited<ReturnType<typeof WorkListControllerService.resolveEscalate>>;
export type TemplateControllerServiceUpdateTemplateMutationResult = Awaited<ReturnType<typeof TemplateControllerService.updateTemplate>>;
export type RedirectProviderControllerServiceGetAllProviderMutationResult = Awaited<ReturnType<typeof RedirectProviderControllerService.getAllProvider>>;
export type RedirectProviderControllerServiceUpdateProviderStatusMutationResult = Awaited<ReturnType<typeof RedirectProviderControllerService.updateProviderStatus>>;
export type RedirectDeviceControllerServiceUpdateStatusMutationResult = Awaited<ReturnType<typeof RedirectDeviceControllerService.updateStatus>>;
export type RedirectDeviceControllerServiceUpdateDeviceMutationResult = Awaited<ReturnType<typeof RedirectDeviceControllerService.updateDevice>>;
export type ProviderControllerServiceUpdateProviderMutationResult = Awaited<ReturnType<typeof ProviderControllerService.updateProvider>>;
export type ProviderControllerServiceUpdateProviderNewMutationResult = Awaited<ReturnType<typeof ProviderControllerService.updateProviderNew>>;
export type ProviderControllerServiceUpdateProviderStatus1MutationResult = Awaited<ReturnType<typeof ProviderControllerService.updateProviderStatus1>>;
export type ProviderGroupControllerServiceSyncDatabaseSchemaMutationResult = Awaited<ReturnType<typeof ProviderGroupControllerService.syncDatabaseSchema>>;
export type ProviderGroupControllerServiceUpdateProviderGroupMutationResult = Awaited<ReturnType<typeof ProviderGroupControllerService.updateProviderGroup>>;
export type ProviderGroupControllerServiceUpdateStatus1MutationResult = Awaited<ReturnType<typeof ProviderGroupControllerService.updateStatus1>>;
export type ProviderGroupControllerServiceUpdateLastLoginMutationResult = Awaited<ReturnType<typeof ProviderGroupControllerService.updateLastLogin>>;
export type ProviderGroupControllerServiceSyncDatabaseSchemasMutationResult = Awaited<ReturnType<typeof ProviderGroupControllerService.syncDatabaseSchemas>>;
export type PatientControllerServiceUpdateProfileAvatarMutationResult = Awaited<ReturnType<typeof PatientControllerService.updateProfileAvatar>>;
export type PatientControllerServiceUpdatePatientMutationResult = Awaited<ReturnType<typeof PatientControllerService.updatePatient>>;
export type PatientControllerServiceUpdatePatientStatusMutationResult = Awaited<ReturnType<typeof PatientControllerService.updatePatientStatus>>;
export type PatientControllerServiceUpdateFamilyDetailsMutationResult = Awaited<ReturnType<typeof PatientControllerService.updateFamilyDetails>>;
export type PatientSymptomControllerServiceUpdateSymptomMutationResult = Awaited<ReturnType<typeof PatientSymptomControllerService.updateSymptom>>;
export type PatientMedicationControllerServiceUpdateMedicationMutationResult = Awaited<ReturnType<typeof PatientMedicationControllerService.updateMedication>>;
export type PatientConditionControllerServiceUpdatePatientConditionMutationResult = Awaited<ReturnType<typeof PatientConditionControllerService.updatePatientCondition>>;
export type PatientAllergyControllerServiceUpdatePatientAllergyMutationResult = Awaited<ReturnType<typeof PatientAllergyControllerService.updatePatientAllergy>>;
export type NotificationEntityControllerServicePutNotificationsMutationResult = Awaited<ReturnType<typeof NotificationEntityControllerService.putNotifications>>;
export type NotificationEntityControllerServiceNotificationUpdateMutationResult = Awaited<ReturnType<typeof NotificationEntityControllerService.notificationUpdate>>;
export type NotificationControllerServiceUpdateNotificationsMutationResult = Awaited<ReturnType<typeof NotificationControllerService.updateNotifications>>;
export type NotificationProviderControllerServicePutNotifications1MutationResult = Awaited<ReturnType<typeof NotificationProviderControllerService.putNotifications1>>;
export type NotificationProviderControllerServiceNotificationUpdate1MutationResult = Awaited<ReturnType<typeof NotificationProviderControllerService.notificationUpdate1>>;
export type LabResultControllerServiceUpdateLabResultMutationResult = Awaited<ReturnType<typeof LabResultControllerService.updateLabResult>>;
export type InsuranceControllerServiceUpdateInsuranceMobileMutationResult = Awaited<ReturnType<typeof InsuranceControllerService.updateInsuranceMobile>>;
export type IcdCodeControllerServiceUpdateIcdCodeMutationResult = Awaited<ReturnType<typeof IcdCodeControllerService.updateIcdCode>>;
export type IcdCodeControllerServiceMakeIcdCodeFavoriteMutationResult = Awaited<ReturnType<typeof IcdCodeControllerService.makeIcdCodeFavorite>>;
export type EnrollmentControllerServiceUpdateEnrollmentMutationResult = Awaited<ReturnType<typeof EnrollmentControllerService.updateEnrollment>>;
export type EnrollmentControllerServiceReEnrollmentMutationResult = Awaited<ReturnType<typeof EnrollmentControllerService.reEnrollment>>;
export type DocumentControllerServiceUpdateArchiveMutationResult = Awaited<ReturnType<typeof DocumentControllerService.updateArchive>>;
export type DeviceControllerServiceUpdateStatus2MutationResult = Awaited<ReturnType<typeof DeviceControllerService.updateStatus2>>;
export type DeviceControllerServiceUpdateDevice1MutationResult = Awaited<ReturnType<typeof DeviceControllerService.updateDevice1>>;
export type DeviceControllerServiceUnAssignDeviceMutationResult = Awaited<ReturnType<typeof DeviceControllerService.unAssignDevice>>;
export type AdminUserControllerServiceUpdateUserMutationResult = Awaited<ReturnType<typeof AdminUserControllerService.updateUser>>;
export type AdminUserControllerServiceManageUserMutationResult = Awaited<ReturnType<typeof AdminUserControllerService.manageUser>>;
export type WorkListControllerServiceDeleteVitalsMutationResult = Awaited<ReturnType<typeof WorkListControllerService.deleteVitals>>;
export type TemplateControllerServiceDeleteTemplateMutationResult = Awaited<ReturnType<typeof TemplateControllerService.deleteTemplate>>;
export type RedirectProviderControllerServiceDeleteProviderMutationResult = Awaited<ReturnType<typeof RedirectProviderControllerService.deleteProvider>>;
export type RedirectDeviceControllerServiceUpdateStatus3MutationResult = Awaited<ReturnType<typeof RedirectDeviceControllerService.updateStatus3>>;
export type ProviderControllerServiceDeleteProvider1MutationResult = Awaited<ReturnType<typeof ProviderControllerService.deleteProvider1>>;
export type PatientControllerServiceDeletePatientMutationResult = Awaited<ReturnType<typeof PatientControllerService.deletePatient>>;
export type PatientControllerServiceDeleteCareTeamMutationResult = Awaited<ReturnType<typeof PatientControllerService.deleteCareTeam>>;
export type PatientSymptomControllerServiceDeletePatientSymptomMutationResult = Awaited<ReturnType<typeof PatientSymptomControllerService.deletePatientSymptom>>;
export type PatientMedicationControllerServiceDeleteMedicationMutationResult = Awaited<ReturnType<typeof PatientMedicationControllerService.deleteMedication>>;
export type PatientConditionControllerServiceDeletePatientConditionMutationResult = Awaited<ReturnType<typeof PatientConditionControllerService.deletePatientCondition>>;
export type PatientAllergyControllerServiceDeletePatientAllergyByIdMutationResult = Awaited<ReturnType<typeof PatientAllergyControllerService.deletePatientAllergyById>>;
export type LabResultControllerServiceDeleteLabResultMutationResult = Awaited<ReturnType<typeof LabResultControllerService.deleteLabResult>>;
export type InsuranceControllerServiceDeleteInsuranceMobileMutationResult = Awaited<ReturnType<typeof InsuranceControllerService.deleteInsuranceMobile>>;
export type IcdCodeControllerServiceDeleteTemplate1MutationResult = Awaited<ReturnType<typeof IcdCodeControllerService.deleteTemplate1>>;
export type EnrollmentControllerServiceDeleteEnrollmentMutationResult = Awaited<ReturnType<typeof EnrollmentControllerService.deleteEnrollment>>;
export type DocumentControllerServiceDeleteDocumentMutationResult = Awaited<ReturnType<typeof DocumentControllerService.deleteDocument>>;
export type DeviceControllerServiceUpdateStatus4MutationResult = Awaited<ReturnType<typeof DeviceControllerService.updateStatus4>>;
export type AdminUserControllerServiceRemoveUserMutationResult = Awaited<ReturnType<typeof AdminUserControllerService.removeUser>>;
